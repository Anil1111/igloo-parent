// $ANTLR 3.2 Sep 23, 2009 14:05:07 com/joestelmach/natty/generated/DateParser.g 2012-02-13 15:13:27

  package com.joestelmach.natty.generated;


import java.io.IOException;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.debug.DebugEventListener;
import org.antlr.runtime.debug.DebugEventSocketProxy;
import org.antlr.runtime.debug.DebugParser;
import org.antlr.runtime.debug.DebugTokenStream;
import org.antlr.runtime.debug.DebugTreeAdaptor;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

@SuppressWarnings("unused")
public class DateParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "DOT", "JANVIER", "FEVRIER", "MARS", "AVRIL", "MAI", "JUIN", "JUILLET", "AOUT", "SEPTEMBRE", "OCTOBRE", "NOVEMBRE", "DECEMBRE", "DIMANCHE", "LUNDI", "MARDI", "MERCREDI", "JEUDI", "VENDREDI", "SAMEDI", "HEURE", "HEURE_SHORT", "MINUTE", "JOUR", "SEMAINE", "MOIS", "ANNEE", "SINGLE_QUOTE", "AUJOURD_HUI", "DEMAIN", "APRES_DEMAIN", "HIER", "AVANT_HIER", "DASH", "WEEKEND", "CHAQUE", "JUSQU_A", "A", "APRES", "PASSE", "MINUIT", "APRES_MIDI", "MATIN", "SOIR", "NUIT", "PENDANT", "DANS", "LE", "LA", "OU", "ET", "CE", "DE", "DU", "AU", "MAINTENANT", "SUIVANT", "DERNIER", "WHITE_SPACE", "AVANT", "DEBUT", "FIN", "IL_Y_A", "COLON", "COMMA", "SLASH", "PLUS", "INT_00", "INT_01", "INT_02", "INT_03", "INT_04", "INT_05", "INT_06", "INT_07", "INT_08", "INT_09", "INT_0", "INT_1", "INT_2", "INT_3", "INT_4", "INT_5", "INT_6", "INT_7", "INT_8", "INT_9", "INT_10", "INT_11", "INT_12", "INT_13", "INT_14", "INT_15", "INT_16", "INT_17", "INT_18", "INT_19", "INT_20", "INT_21", "INT_22", "INT_23", "INT_24", "INT_25", "INT_26", "INT_27", "INT_28", "INT_29", "INT_30", "INT_31", "INT_32", "INT_33", "INT_34", "INT_35", "INT_36", "INT_37", "INT_38", "INT_39", "INT_40", "INT_41", "INT_42", "INT_43", "INT_44", "INT_45", "INT_46", "INT_47", "INT_48", "INT_49", "INT_50", "INT_51", "INT_52", "INT_53", "INT_54", "INT_55", "INT_56", "INT_57", "INT_58", "INT_59", "INT_60", "INT_61", "INT_62", "INT_63", "INT_64", "INT_65", "INT_66", "INT_67", "INT_68", "INT_69", "INT_70", "INT_71", "INT_72", "INT_73", "INT_74", "INT_75", "INT_76", "INT_77", "INT_78", "INT_79", "INT_80", "INT_81", "INT_82", "INT_83", "INT_84", "INT_85", "INT_86", "INT_87", "INT_88", "INT_89", "INT_90", "INT_91", "INT_92", "INT_93", "INT_94", "INT_95", "INT_96", "INT_97", "INT_98", "INT_99", "UN", "DEUX", "TROIS", "QUATRE", "CINQ", "SIX", "SEPT", "HUIT", "NEUF", "DIX", "ONZE", "DOUZE", "TREIZE", "QUATORZE", "QUINZE", "SEIZE", "VINGT", "TRENTE", "PREMIER", "DEUXIEME", "TROISIEME", "QUATRIEME", "CINQUIEME", "SIXIEME", "SEPTIEME", "HUITIEME", "NEUVIEME", "DIXIEME", "ONZIEME", "DOUZIEME", "TREIZIEME", "QUATORZIEME", "QUINZIEME", "SEIZIEME", "VINGTIEME", "TRENTIEME", "UNIEME", "SPACE", "UNKNOWN_CHAR", "UNKNOWN", "DIGIT", "INT", "MONTH_OF_YEAR", "DAY_OF_MONTH", "DAY_OF_WEEK", "DAY_OF_YEAR", "YEAR_OF", "DATE_TIME", "DATE_TIME_ALTERNATIVE", "EXPLICIT_DATE", "RELATIVE_DATE", "SEEK", "DIRECTION", "SEEK_BY", "EXPLICIT_SEEK", "SPAN", "EXPLICIT_TIME", "RELATIVE_TIME", "HOURS_OF_DAY", "MINUTES_OF_HOUR", "SECONDS_OF_MINUTE", "AM_PM", "ZONE", "ZONE_OFFSET", "RECURRENCE", "IS_INTERVAL", "SECOND"
    };
    public static final int DIRECTION=365;
    public static final int UNKNOWN_CHAR=219;
    public static final int INT_08=79;
    public static final int INT_09=80;
    public static final int DIXIEME=208;
    public static final int MAINTENANT=59;
    public static final int INT_02=73;
    public static final int DU=57;
    public static final int INT_03=74;
    public static final int INT_00=71;
    public static final int INT_01=72;
    public static final int INT_06=77;
    public static final int APRES_DEMAIN=34;
    public static final int INT_07=78;
    public static final int INT_04=75;
    public static final int INT_05=76;
    public static final int DEUXIEME=200;
    public static final int DE=56;
    public static final int EOF=-1;
    public static final int IL_Y_A=66;
    public static final int PENDANT=49;
    public static final int AM_PM=374;
    public static final int UN=181;
    public static final int SPAN=368;
    public static final int AOUT=12;
    public static final int ET=54;
    public static final int HEURE=24;
    public static final int PREMIER=199;
    public static final int QUATORZE=194;
    public static final int A=41;
    public static final int PASSE=43;
    public static final int DEMAIN=33;
    public static final int MONTH_OF_YEAR=355;
    public static final int WEEKEND=38;
    public static final int DAY_OF_WEEK=357;
    public static final int EXPLICIT_DATE=362;
    public static final int INT=222;
    public static final int SEPTIEME=205;
    public static final int SIX=186;
    public static final int JEUDI=21;
    public static final int DAY_OF_YEAR=358;
    public static final int SEPT=187;
    public static final int JOUR=27;
    public static final int FEVRIER=6;
    public static final int SECONDS_OF_MINUTE=373;
    public static final int EXPLICIT_SEEK=367;
    public static final int INT_47=128;
    public static final int INT_46=127;
    public static final int INT_45=126;
    public static final int INT_44=125;
    public static final int VINGTIEME=215;
    public static final int INT_49=130;
    public static final int INT_48=129;
    public static final int TREIZE=193;
    public static final int QUATRIEME=202;
    public static final int INT_42=123;
    public static final int WHITE_SPACE=62;
    public static final int INT_43=124;
    public static final int INT_40=121;
    public static final int ONZE=191;
    public static final int INT_41=122;
    public static final int INT_34=115;
    public static final int INT_33=114;
    public static final int INT_36=117;
    public static final int SINGLE_QUOTE=31;
    public static final int INT_35=116;
    public static final int INT_38=119;
    public static final int SLASH=69;
    public static final int INT_37=118;
    public static final int INT_39=120;
    public static final int AU=58;
    public static final int MATIN=46;
    public static final int ZONE=375;
    public static final int PLUS=70;
    public static final int TROIS=183;
    public static final int INT_30=111;
    public static final int INT_31=112;
    public static final int INT_32=113;
    public static final int INT_29=110;
    public static final int INT_28=109;
    public static final int INT_27=108;
    public static final int INT_26=107;
    public static final int INT_25=106;
    public static final int AVRIL=8;
    public static final int INT_24=105;
    public static final int INT_23=104;
    public static final int INT_22=103;
    public static final int ANNEE=30;
    public static final int TROISIEME=201;
    public static final int JUIN=10;
    public static final int HUIT=188;
    public static final int INT_20=101;
    public static final int INT_21=102;
    public static final int CHAQUE=39;
    public static final int MARS=7;
    public static final int INT_16=97;
    public static final int COLON=67;
    public static final int INT_15=96;
    public static final int INT_18=99;
    public static final int INT_17=98;
    public static final int INT_12=93;
    public static final int INT_11=92;
    public static final int INT_14=95;
    public static final int INT_13=94;
    public static final int DEBUT=64;
    public static final int DAY_OF_MONTH=356;
    public static final int INT_19=100;
    public static final int AUJOURD_HUI=32;
    public static final int DOUZIEME=210;
    public static final int CE=55;
    public static final int SEMAINE=28;
    public static final int DIX=190;
    public static final int VENDREDI=22;
    public static final int AVANT_HIER=36;
    public static final int INT_10=91;
    public static final int INT_81=162;
    public static final int INT_80=161;
    public static final int INT_83=164;
    public static final int INT_82=163;
    public static final int INT_85=166;
    public static final int TRENTE=198;
    public static final int INT_84=165;
    public static final int INT_87=168;
    public static final int INT_86=167;
    public static final int MINUIT=44;
    public static final int INT_88=169;
    public static final int INT_89=170;
    public static final int FIN=65;
    public static final int DATE_TIME=360;
    public static final int INT_72=153;
    public static final int INT_71=152;
    public static final int RECURRENCE=377;
    public static final int INT_70=151;
    public static final int INT_76=157;
    public static final int QUINZE=195;
    public static final int INT_75=156;
    public static final int INT_74=155;
    public static final int INT_73=154;
    public static final int MINUTES_OF_HOUR=372;
    public static final int SUIVANT=60;
    public static final int INT_79=160;
    public static final int INT_77=158;
    public static final int INT_78=159;
    public static final int RELATIVE_DATE=363;
    public static final int INT_63=144;
    public static final int SEIZE=196;
    public static final int INT_62=143;
    public static final int INT_65=146;
    public static final int INT_64=145;
    public static final int SECOND=379;
    public static final int JUILLET=11;
    public static final int INT_61=142;
    public static final int INT_60=141;
    public static final int SIXIEME=204;
    public static final int IS_INTERVAL=378;
    public static final int INT_66=147;
    public static final int INT_67=148;
    public static final int INT_68=149;
    public static final int DANS=50;
    public static final int INT_69=150;
    public static final int INT_54=135;
    public static final int INT_53=134;
    public static final int INT_52=133;
    public static final int INT_51=132;
    public static final int INT_50=131;
    public static final int VINGT=197;
    public static final int CINQ=185;
    public static final int TREIZIEME=211;
    public static final int RELATIVE_TIME=370;
    public static final int OU=53;
    public static final int DATE_TIME_ALTERNATIVE=361;
    public static final int MOIS=29;
    public static final int ZONE_OFFSET=376;
    public static final int SEEK_BY=366;
    public static final int TRENTIEME=216;
    public static final int EXPLICIT_TIME=369;
    public static final int DERNIER=61;
    public static final int HEURE_SHORT=25;
    public static final int INT_59=140;
    public static final int INT_57=138;
    public static final int INT_58=139;
    public static final int INT_55=136;
    public static final int MARDI=19;
    public static final int INT_56=137;
    public static final int HOURS_OF_DAY=371;
    public static final int DEUX=182;
    public static final int AVANT=63;
    public static final int MERCREDI=20;
    public static final int INT_9=90;
    public static final int INT_8=89;
    public static final int INT_7=88;
    public static final int SPACE=218;
    public static final int INT_6=87;
    public static final int INT_5=86;
    public static final int INT_4=85;
    public static final int INT_3=84;
    public static final int INT_2=83;
    public static final int INT_1=82;
    public static final int INT_0=81;
    public static final int APRES_MIDI=45;
    public static final int APRES=42;
    public static final int UNKNOWN=220;
    public static final int SAMEDI=23;
    public static final int HIER=35;
    public static final int COMMA=68;
    public static final int SEPTEMBRE=13;
    public static final int JANVIER=5;
    public static final int SEIZIEME=214;
    public static final int CINQUIEME=203;
    public static final int DIGIT=221;
    public static final int DOT=4;
    public static final int DOUZE=192;
    public static final int DIMANCHE=17;
    public static final int DASH=37;
    public static final int HUITIEME=206;
    public static final int YEAR_OF=359;
    public static final int NEUF=189;
    public static final int ONZIEME=209;
    public static final int SOIR=47;
    public static final int QUATORZIEME=212;
    public static final int QUATRE=184;
    public static final int SEEK=364;
    public static final int INT_90=171;
    public static final int UNIEME=217;
    public static final int JUSQU_A=40;
    public static final int MAI=9;
    public static final int INT_97=178;
    public static final int QUINZIEME=213;
    public static final int INT_98=179;
    public static final int INT_95=176;
    public static final int INT_96=177;
    public static final int INT_93=174;
    public static final int INT_94=175;
    public static final int INT_91=172;
    public static final int NEUVIEME=207;
    public static final int INT_92=173;
    public static final int LA=52;
    public static final int NOVEMBRE=15;
    public static final int NUIT=48;
    public static final int OCTOBRE=14;
    public static final int INT_99=180;
    public static final int MINUTE=26;
    public static final int DECEMBRE=16;
    public static final int LE=51;
    public static final int LUNDI=18;

    // delegates
    public DateParser_NumericRules gNumericRules;
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "spelled_one_to_thirty_one", "relative_date_span", 
        "relaxed_year", "synpred9_DateParser", "int_32_to_59", "relaxed_day_of_year", 
        "empty", "synpred5_NumericRules", "named_time", "synpred4_DateParser", 
        "synpred12_NumericRules", "int_1_to_5", "parse", "synpred10_NumericRules", 
        "synpred1_DateParser", "int_00_to_99_mandatory_prefix", "date_time", 
        "spelled_or_int_optional_prefix", "synpred1_NumericRules", "synpred3_NumericRules", 
        "synpred4_NumericRules", "synpred18_DateParser", "relative_date_interval", 
        "this_suffix", "synpred16_DateParser", "int_00_to_59_mandatory_prefix", 
        "int_1_to_9", "hours", "int_24_to_31", "synpred14_DateParser", "day_of_week_list_separator", 
        "synpred2_DateParser", "int_60_to_99", "relaxed_day_of_month_prefix", 
        "formal_day_of_month", "synpred7_NumericRules", "implicit_prefix", 
        "formal_year", "relaxed_date", "synpred11_NumericRules", "relative_time", 
        "global_date_prefix", "int_01_to_12", "formal_date_separator", "synpred8_DateParser", 
        "relative_time_span", "relative_time_target", "date_time_alternative", 
        "int_01_to_12_optional_prefix", "relative_time_suffix", "synpred2_NumericRules", 
        "relative_date_prefix", "synpred6_NumericRules", "relative_occurrence_index", 
        "conjunction", "seconds", "prefix", "relaxed_day_of_month", "int_00_to_23_optional_prefix", 
        "relaxed_day_of_week", "alternative_day_of_week_list", "explicit_day_of_month_part", 
        "explicit_day_of_week_bound", "synpred9_NumericRules", "alternative_day_of_month_list", 
        "synpred10_DateParser", "date_time_separator", "synpred3_DateParser", 
        "synpred5_DateParser", "relative_target", "named_relative_time", 
        "int_01_to_31_optional_prefix", "relative_time_suffix_anchor", "synpred19_DateParser", 
        "int_four_digits", "relaxed_month", "explicit_day_of_year_bound", 
        "relative_date_direction", "synpred15_DateParser", "minutes", "formal_month_of_year", 
        "synpred6_DateParser", "synpred8_NumericRules", "explicit_day_of_week_part", 
        "named_relative_date", "date", "synpred7_DateParser", "explicit_day_of_year_part", 
        "recurrence", "formal_year_four_digits", "explicit_relative_date", 
        "relative_date", "synpred13_DateParser", "prefix_direction", "explicit_day_of_month_bound", 
        "relative_date_suffix", "synpred12_DateParser", "day_of_week", "synpred17_DateParser", 
        "formal_date", "interval_conjunction", "synpred13_NumericRules", 
        "spelled_or_int_01_to_31_optional_prefix", "interval_direction_prefix", 
        "synpred20_DateParser", "time_date_separator", "synpred11_DateParser", 
        "int_13_to_23", "explicit_time", "explicit_relative_month", "alternative_direction"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public DateParser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public DateParser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            gNumericRules = new DateParser_NumericRules(input, dbg, this.state, this);
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public DateParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

        gNumericRules = new DateParser_NumericRules(input, dbg, this.state, this);
         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

        gNumericRules.setTreeAdaptor(this.adaptor);
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return DateParser.tokenNames; }
    public String getGrammarFileName() { return "com/joestelmach/natty/generated/DateParser.g"; }


      private java.util.logging.Logger _logger = java.util.logging.Logger.getLogger("com.joestelmach.natty");
      
      public void displayRecognitionError(String[] tokenNames, RecognitionException re) {
        String message = getErrorHeader(re);
        try { message += getErrorMessage(re, tokenNames); } catch(Exception e) {}
        _logger.fine(message);
      }


    public static class parse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parse"
    // com/joestelmach/natty/generated/DateParser.g:52:1: parse : empty ( ( recurrence )=> recurrence | date_time_alternative ) ;
    public final DateParser.parse_return parse() throws RecognitionException {
        DateParser.parse_return retval = new DateParser.parse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.empty_return empty1 = null;

        DateParser.recurrence_return recurrence2 = null;

        DateParser.date_time_alternative_return date_time_alternative3 = null;



        try { dbg.enterRule(getGrammarFileName(), "parse");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(52, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:53:3: ( empty ( ( recurrence )=> recurrence | date_time_alternative ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:53:5: empty ( ( recurrence )=> recurrence | date_time_alternative )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(53,5);
            pushFollow(FOLLOW_empty_in_parse181);
            empty1=empty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, empty1.getTree());
            dbg.location(53,11);
            // com/joestelmach/natty/generated/DateParser.g:53:11: ( ( recurrence )=> recurrence | date_time_alternative )
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1);

            int LA1_0 = input.LA(1);

            if ( (LA1_0==CHAQUE) && (synpred1_DateParser())) {
                alt1=1;
            }
            else if ( ((LA1_0>=JANVIER && LA1_0<=HEURE)||(LA1_0>=MINUTE && LA1_0<=ANNEE)||(LA1_0>=AUJOURD_HUI && LA1_0<=AVANT_HIER)||LA1_0==WEEKEND||LA1_0==A||(LA1_0>=PASSE && LA1_0<=LA)||LA1_0==CE||(LA1_0>=MAINTENANT && LA1_0<=WHITE_SPACE)||(LA1_0>=DEBUT && LA1_0<=IL_Y_A)||LA1_0==COMMA||(LA1_0>=INT_00 && LA1_0<=CINQUIEME)||LA1_0==SECOND) ) {
                alt1=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:53:12: ( recurrence )=> recurrence
                    {
                    dbg.location(53,26);
                    pushFollow(FOLLOW_recurrence_in_parse188);
                    recurrence2=recurrence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, recurrence2.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:53:39: date_time_alternative
                    {
                    dbg.location(53,39);
                    pushFollow(FOLLOW_date_time_alternative_in_parse192);
                    date_time_alternative3=date_time_alternative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_time_alternative3.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(54, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "parse");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "parse"

    public static class recurrence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "recurrence"
    // com/joestelmach/natty/generated/DateParser.g:56:1: recurrence : CHAQUE WHITE_SPACE date_time_alternative ( WHITE_SPACE JUSQU_A WHITE_SPACE date_time )? -> date_time_alternative ^( RECURRENCE ( date_time )? ) ;
    public final DateParser.recurrence_return recurrence() throws RecognitionException {
        DateParser.recurrence_return retval = new DateParser.recurrence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CHAQUE4=null;
        Token WHITE_SPACE5=null;
        Token WHITE_SPACE7=null;
        Token JUSQU_A8=null;
        Token WHITE_SPACE9=null;
        DateParser.date_time_alternative_return date_time_alternative6 = null;

        DateParser.date_time_return date_time10 = null;


        Object CHAQUE4_tree=null;
        Object WHITE_SPACE5_tree=null;
        Object WHITE_SPACE7_tree=null;
        Object JUSQU_A8_tree=null;
        Object WHITE_SPACE9_tree=null;
        RewriteRuleTokenStream stream_JUSQU_A=new RewriteRuleTokenStream(adaptor,"token JUSQU_A");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_CHAQUE=new RewriteRuleTokenStream(adaptor,"token CHAQUE");
        RewriteRuleSubtreeStream stream_date_time_alternative=new RewriteRuleSubtreeStream(adaptor,"rule date_time_alternative");
        RewriteRuleSubtreeStream stream_date_time=new RewriteRuleSubtreeStream(adaptor,"rule date_time");
        try { dbg.enterRule(getGrammarFileName(), "recurrence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(56, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:57:3: ( CHAQUE WHITE_SPACE date_time_alternative ( WHITE_SPACE JUSQU_A WHITE_SPACE date_time )? -> date_time_alternative ^( RECURRENCE ( date_time )? ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:57:5: CHAQUE WHITE_SPACE date_time_alternative ( WHITE_SPACE JUSQU_A WHITE_SPACE date_time )?
            {
            dbg.location(57,5);
            CHAQUE4=(Token)match(input,CHAQUE,FOLLOW_CHAQUE_in_recurrence208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CHAQUE.add(CHAQUE4);

            dbg.location(57,12);
            WHITE_SPACE5=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_recurrence210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE5);

            dbg.location(57,24);
            pushFollow(FOLLOW_date_time_alternative_in_recurrence212);
            date_time_alternative6=date_time_alternative();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_date_time_alternative.add(date_time_alternative6.getTree());
            dbg.location(57,46);
            // com/joestelmach/natty/generated/DateParser.g:57:46: ( WHITE_SPACE JUSQU_A WHITE_SPACE date_time )?
            int alt2=2;
            try { dbg.enterSubRule(2);
            try { dbg.enterDecision(2);

            switch ( input.LA(1) ) {
                case WHITE_SPACE:
                    {
                    alt2=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(2);}

            switch (alt2) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:57:47: WHITE_SPACE JUSQU_A WHITE_SPACE date_time
                    {
                    dbg.location(57,47);
                    WHITE_SPACE7=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_recurrence215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE7);

                    dbg.location(57,59);
                    JUSQU_A8=(Token)match(input,JUSQU_A,FOLLOW_JUSQU_A_in_recurrence217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JUSQU_A.add(JUSQU_A8);

                    dbg.location(57,67);
                    WHITE_SPACE9=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_recurrence219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE9);

                    dbg.location(57,79);
                    pushFollow(FOLLOW_date_time_in_recurrence221);
                    date_time10=date_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date_time.add(date_time10.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(2);}



            // AST REWRITE
            // elements: date_time_alternative, date_time
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 58:7: -> date_time_alternative ^( RECURRENCE ( date_time )? )
            {
                dbg.location(58,10);
                adaptor.addChild(root_0, stream_date_time_alternative.nextTree());
                dbg.location(58,32);
                // com/joestelmach/natty/generated/DateParser.g:58:32: ^( RECURRENCE ( date_time )? )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(58,34);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RECURRENCE, "RECURRENCE"), root_1);

                dbg.location(58,45);
                // com/joestelmach/natty/generated/DateParser.g:58:45: ( date_time )?
                if ( stream_date_time.hasNext() ) {
                    dbg.location(58,45);
                    adaptor.addChild(root_1, stream_date_time.nextTree());

                }
                stream_date_time.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(59, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "recurrence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "recurrence"

    public static class empty_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "empty"
    // com/joestelmach/natty/generated/DateParser.g:61:1: empty : ;
    public final DateParser.empty_return empty() throws RecognitionException {
        DateParser.empty_return retval = new DateParser.empty_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        try { dbg.enterRule(getGrammarFileName(), "empty");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(61, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:62:3: ()
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:63:3: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        dbg.location(63, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "empty");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "empty"

    public static class date_time_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_time"
    // com/joestelmach/natty/generated/DateParser.g:65:1: date_time : ( ( ( date )=> date ( date_time_separator explicit_time )? | explicit_time ( time_date_separator date )? ) -> ^( DATE_TIME ( date )? ( explicit_time )? ) | relative_time -> ^( DATE_TIME ( relative_time )? ) );
    public final DateParser.date_time_return date_time() throws RecognitionException {
        DateParser.date_time_return retval = new DateParser.date_time_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.date_return date11 = null;

        DateParser.date_time_separator_return date_time_separator12 = null;

        DateParser.explicit_time_return explicit_time13 = null;

        DateParser.explicit_time_return explicit_time14 = null;

        DateParser.time_date_separator_return time_date_separator15 = null;

        DateParser.date_return date16 = null;

        DateParser.relative_time_return relative_time17 = null;


        RewriteRuleSubtreeStream stream_date_time_separator=new RewriteRuleSubtreeStream(adaptor,"rule date_time_separator");
        RewriteRuleSubtreeStream stream_time_date_separator=new RewriteRuleSubtreeStream(adaptor,"rule time_date_separator");
        RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date");
        RewriteRuleSubtreeStream stream_relative_time=new RewriteRuleSubtreeStream(adaptor,"rule relative_time");
        RewriteRuleSubtreeStream stream_explicit_time=new RewriteRuleSubtreeStream(adaptor,"rule explicit_time");
        try { dbg.enterRule(getGrammarFileName(), "date_time");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(65, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:66:3: ( ( ( date )=> date ( date_time_separator explicit_time )? | explicit_time ( time_date_separator date )? ) -> ^( DATE_TIME ( date )? ( explicit_time )? ) | relative_time -> ^( DATE_TIME ( relative_time )? ) )
            int alt6=2;
            try { dbg.enterDecision(6);

            try {
                isCyclicDecision = true;
                alt6 = dfa6.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:66:5: ( ( date )=> date ( date_time_separator explicit_time )? | explicit_time ( time_date_separator date )? )
                    {
                    dbg.location(66,5);
                    // com/joestelmach/natty/generated/DateParser.g:66:5: ( ( date )=> date ( date_time_separator explicit_time )? | explicit_time ( time_date_separator date )? )
                    int alt5=2;
                    try { dbg.enterSubRule(5);
                    try { dbg.enterDecision(5);

                    try {
                        isCyclicDecision = true;
                        alt5 = dfa5.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(5);}

                    switch (alt5) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:67:7: ( date )=> date ( date_time_separator explicit_time )?
                            {
                            dbg.location(67,15);
                            pushFollow(FOLLOW_date_in_date_time280);
                            date11=date();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_date.add(date11.getTree());
                            dbg.location(67,20);
                            // com/joestelmach/natty/generated/DateParser.g:67:20: ( date_time_separator explicit_time )?
                            int alt3=2;
                            try { dbg.enterSubRule(3);
                            try { dbg.enterDecision(3);

                            switch ( input.LA(1) ) {
                                case WHITE_SPACE:
                                    {
                                    switch ( input.LA(2) ) {
                                        case A:
                                        case MINUIT:
                                        case APRES_MIDI:
                                        case MATIN:
                                        case SOIR:
                                        case NUIT:
                                        case DANS:
                                        case CE:
                                        case INT_00:
                                        case INT_01:
                                        case INT_02:
                                        case INT_03:
                                        case INT_04:
                                        case INT_05:
                                        case INT_06:
                                        case INT_07:
                                        case INT_08:
                                        case INT_09:
                                        case INT_0:
                                        case INT_1:
                                        case INT_2:
                                        case INT_3:
                                        case INT_4:
                                        case INT_5:
                                        case INT_6:
                                        case INT_7:
                                        case INT_8:
                                        case INT_9:
                                        case INT_10:
                                        case INT_11:
                                        case INT_12:
                                        case INT_13:
                                        case INT_14:
                                        case INT_15:
                                        case INT_16:
                                        case INT_17:
                                        case INT_18:
                                        case INT_19:
                                        case INT_20:
                                        case INT_21:
                                        case INT_22:
                                        case INT_23:
                                            {
                                            alt3=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case COMMA:
                                    {
                                    switch ( input.LA(2) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(3) ) {
                                                case A:
                                                case MINUIT:
                                                case APRES_MIDI:
                                                case MATIN:
                                                case SOIR:
                                                case NUIT:
                                                case DANS:
                                                case CE:
                                                case INT_00:
                                                case INT_01:
                                                case INT_02:
                                                case INT_03:
                                                case INT_04:
                                                case INT_05:
                                                case INT_06:
                                                case INT_07:
                                                case INT_08:
                                                case INT_09:
                                                case INT_0:
                                                case INT_1:
                                                case INT_2:
                                                case INT_3:
                                                case INT_4:
                                                case INT_5:
                                                case INT_6:
                                                case INT_7:
                                                case INT_8:
                                                case INT_9:
                                                case INT_10:
                                                case INT_11:
                                                case INT_12:
                                                case INT_13:
                                                case INT_14:
                                                case INT_15:
                                                case INT_16:
                                                case INT_17:
                                                case INT_18:
                                                case INT_19:
                                                case INT_20:
                                                case INT_21:
                                                case INT_22:
                                                case INT_23:
                                                    {
                                                    alt3=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                        case A:
                                        case MINUIT:
                                        case APRES_MIDI:
                                        case MATIN:
                                        case SOIR:
                                        case NUIT:
                                        case DANS:
                                        case CE:
                                        case INT_00:
                                        case INT_01:
                                        case INT_02:
                                        case INT_03:
                                        case INT_04:
                                        case INT_05:
                                        case INT_06:
                                        case INT_07:
                                        case INT_08:
                                        case INT_09:
                                        case INT_0:
                                        case INT_1:
                                        case INT_2:
                                        case INT_3:
                                        case INT_4:
                                        case INT_5:
                                        case INT_6:
                                        case INT_7:
                                        case INT_8:
                                        case INT_9:
                                        case INT_10:
                                        case INT_11:
                                        case INT_12:
                                        case INT_13:
                                        case INT_14:
                                        case INT_15:
                                        case INT_16:
                                        case INT_17:
                                        case INT_18:
                                        case INT_19:
                                        case INT_20:
                                        case INT_21:
                                        case INT_22:
                                        case INT_23:
                                            {
                                            alt3=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(3);}

                            switch (alt3) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:67:21: date_time_separator explicit_time
                                    {
                                    dbg.location(67,21);
                                    pushFollow(FOLLOW_date_time_separator_in_date_time283);
                                    date_time_separator12=date_time_separator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator12.getTree());
                                    dbg.location(67,41);
                                    pushFollow(FOLLOW_explicit_time_in_date_time285);
                                    explicit_time13=explicit_time();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time13.getTree());

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(3);}


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:68:9: explicit_time ( time_date_separator date )?
                            {
                            dbg.location(68,9);
                            pushFollow(FOLLOW_explicit_time_in_date_time297);
                            explicit_time14=explicit_time();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time14.getTree());
                            dbg.location(68,23);
                            // com/joestelmach/natty/generated/DateParser.g:68:23: ( time_date_separator date )?
                            int alt4=2;
                            try { dbg.enterSubRule(4);
                            try { dbg.enterDecision(4);

                            switch ( input.LA(1) ) {
                                case WHITE_SPACE:
                                    {
                                    switch ( input.LA(2) ) {
                                        case JANVIER:
                                        case FEVRIER:
                                        case MARS:
                                        case AVRIL:
                                        case MAI:
                                        case JUIN:
                                        case JUILLET:
                                        case AOUT:
                                        case SEPTEMBRE:
                                        case OCTOBRE:
                                        case NOVEMBRE:
                                        case DECEMBRE:
                                        case DIMANCHE:
                                        case LUNDI:
                                        case MARDI:
                                        case MERCREDI:
                                        case JEUDI:
                                        case VENDREDI:
                                        case SAMEDI:
                                        case JOUR:
                                        case AUJOURD_HUI:
                                        case DEMAIN:
                                        case APRES_DEMAIN:
                                        case HIER:
                                        case AVANT_HIER:
                                        case A:
                                        case PASSE:
                                        case DANS:
                                        case LE:
                                        case LA:
                                        case CE:
                                        case MAINTENANT:
                                        case SUIVANT:
                                        case DERNIER:
                                        case WHITE_SPACE:
                                        case DEBUT:
                                        case FIN:
                                        case IL_Y_A:
                                        case COMMA:
                                        case INT_01:
                                        case INT_02:
                                        case INT_03:
                                        case INT_04:
                                        case INT_05:
                                        case INT_06:
                                        case INT_07:
                                        case INT_08:
                                        case INT_09:
                                        case INT_1:
                                        case INT_2:
                                        case INT_3:
                                        case INT_4:
                                        case INT_5:
                                        case INT_6:
                                        case INT_7:
                                        case INT_8:
                                        case INT_9:
                                        case INT_10:
                                        case INT_11:
                                        case INT_12:
                                        case INT_13:
                                        case INT_14:
                                        case INT_15:
                                        case INT_16:
                                        case INT_17:
                                        case INT_18:
                                        case INT_19:
                                        case INT_20:
                                        case INT_21:
                                        case INT_22:
                                        case INT_23:
                                        case INT_24:
                                        case INT_25:
                                        case INT_26:
                                        case INT_27:
                                        case INT_28:
                                        case INT_29:
                                        case INT_30:
                                        case INT_31:
                                        case INT_32:
                                        case INT_33:
                                        case INT_34:
                                        case INT_35:
                                        case INT_36:
                                        case INT_37:
                                        case INT_38:
                                        case INT_39:
                                        case INT_40:
                                        case INT_41:
                                        case INT_42:
                                        case INT_43:
                                        case INT_44:
                                        case INT_45:
                                        case INT_46:
                                        case INT_47:
                                        case INT_48:
                                        case INT_49:
                                        case INT_50:
                                        case INT_51:
                                        case INT_52:
                                        case INT_53:
                                        case INT_54:
                                        case INT_55:
                                        case INT_56:
                                        case INT_57:
                                        case INT_58:
                                        case INT_59:
                                        case INT_60:
                                        case INT_61:
                                        case INT_62:
                                        case INT_63:
                                        case INT_64:
                                        case INT_65:
                                        case INT_66:
                                        case INT_67:
                                        case INT_68:
                                        case INT_69:
                                        case INT_70:
                                        case INT_71:
                                        case INT_72:
                                        case INT_73:
                                        case INT_74:
                                        case INT_75:
                                        case INT_76:
                                        case INT_77:
                                        case INT_78:
                                        case INT_79:
                                        case INT_80:
                                        case INT_81:
                                        case INT_82:
                                        case INT_83:
                                        case INT_84:
                                        case INT_85:
                                        case INT_86:
                                        case INT_87:
                                        case INT_88:
                                        case INT_89:
                                        case INT_90:
                                        case INT_91:
                                        case INT_92:
                                        case INT_93:
                                        case INT_94:
                                        case INT_95:
                                        case INT_96:
                                        case INT_97:
                                        case INT_98:
                                        case INT_99:
                                        case UN:
                                        case DEUX:
                                        case TROIS:
                                        case QUATRE:
                                        case CINQ:
                                        case SIX:
                                        case SEPT:
                                        case HUIT:
                                        case NEUF:
                                        case DIX:
                                        case ONZE:
                                        case DOUZE:
                                        case TREIZE:
                                        case QUATORZE:
                                        case QUINZE:
                                        case SEIZE:
                                        case VINGT:
                                        case TRENTE:
                                        case PREMIER:
                                        case DEUXIEME:
                                        case TROISIEME:
                                        case QUATRIEME:
                                        case CINQUIEME:
                                            {
                                            alt4=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case COMMA:
                                    {
                                    switch ( input.LA(2) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(3) ) {
                                                case JANVIER:
                                                case FEVRIER:
                                                case MARS:
                                                case AVRIL:
                                                case MAI:
                                                case JUIN:
                                                case JUILLET:
                                                case AOUT:
                                                case SEPTEMBRE:
                                                case OCTOBRE:
                                                case NOVEMBRE:
                                                case DECEMBRE:
                                                case DIMANCHE:
                                                case LUNDI:
                                                case MARDI:
                                                case MERCREDI:
                                                case JEUDI:
                                                case VENDREDI:
                                                case SAMEDI:
                                                case JOUR:
                                                case AUJOURD_HUI:
                                                case DEMAIN:
                                                case APRES_DEMAIN:
                                                case HIER:
                                                case AVANT_HIER:
                                                case A:
                                                case PASSE:
                                                case DANS:
                                                case LE:
                                                case LA:
                                                case CE:
                                                case MAINTENANT:
                                                case SUIVANT:
                                                case DERNIER:
                                                case WHITE_SPACE:
                                                case DEBUT:
                                                case FIN:
                                                case IL_Y_A:
                                                case COMMA:
                                                case INT_01:
                                                case INT_02:
                                                case INT_03:
                                                case INT_04:
                                                case INT_05:
                                                case INT_06:
                                                case INT_07:
                                                case INT_08:
                                                case INT_09:
                                                case INT_1:
                                                case INT_2:
                                                case INT_3:
                                                case INT_4:
                                                case INT_5:
                                                case INT_6:
                                                case INT_7:
                                                case INT_8:
                                                case INT_9:
                                                case INT_10:
                                                case INT_11:
                                                case INT_12:
                                                case INT_13:
                                                case INT_14:
                                                case INT_15:
                                                case INT_16:
                                                case INT_17:
                                                case INT_18:
                                                case INT_19:
                                                case INT_20:
                                                case INT_21:
                                                case INT_22:
                                                case INT_23:
                                                case INT_24:
                                                case INT_25:
                                                case INT_26:
                                                case INT_27:
                                                case INT_28:
                                                case INT_29:
                                                case INT_30:
                                                case INT_31:
                                                case INT_32:
                                                case INT_33:
                                                case INT_34:
                                                case INT_35:
                                                case INT_36:
                                                case INT_37:
                                                case INT_38:
                                                case INT_39:
                                                case INT_40:
                                                case INT_41:
                                                case INT_42:
                                                case INT_43:
                                                case INT_44:
                                                case INT_45:
                                                case INT_46:
                                                case INT_47:
                                                case INT_48:
                                                case INT_49:
                                                case INT_50:
                                                case INT_51:
                                                case INT_52:
                                                case INT_53:
                                                case INT_54:
                                                case INT_55:
                                                case INT_56:
                                                case INT_57:
                                                case INT_58:
                                                case INT_59:
                                                case INT_60:
                                                case INT_61:
                                                case INT_62:
                                                case INT_63:
                                                case INT_64:
                                                case INT_65:
                                                case INT_66:
                                                case INT_67:
                                                case INT_68:
                                                case INT_69:
                                                case INT_70:
                                                case INT_71:
                                                case INT_72:
                                                case INT_73:
                                                case INT_74:
                                                case INT_75:
                                                case INT_76:
                                                case INT_77:
                                                case INT_78:
                                                case INT_79:
                                                case INT_80:
                                                case INT_81:
                                                case INT_82:
                                                case INT_83:
                                                case INT_84:
                                                case INT_85:
                                                case INT_86:
                                                case INT_87:
                                                case INT_88:
                                                case INT_89:
                                                case INT_90:
                                                case INT_91:
                                                case INT_92:
                                                case INT_93:
                                                case INT_94:
                                                case INT_95:
                                                case INT_96:
                                                case INT_97:
                                                case INT_98:
                                                case INT_99:
                                                case UN:
                                                case DEUX:
                                                case TROIS:
                                                case QUATRE:
                                                case CINQ:
                                                case SIX:
                                                case SEPT:
                                                case HUIT:
                                                case NEUF:
                                                case DIX:
                                                case ONZE:
                                                case DOUZE:
                                                case TREIZE:
                                                case QUATORZE:
                                                case QUINZE:
                                                case SEIZE:
                                                case VINGT:
                                                case TRENTE:
                                                case PREMIER:
                                                case DEUXIEME:
                                                case TROISIEME:
                                                case QUATRIEME:
                                                case CINQUIEME:
                                                    {
                                                    alt4=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                        case JANVIER:
                                        case FEVRIER:
                                        case MARS:
                                        case AVRIL:
                                        case MAI:
                                        case JUIN:
                                        case JUILLET:
                                        case AOUT:
                                        case SEPTEMBRE:
                                        case OCTOBRE:
                                        case NOVEMBRE:
                                        case DECEMBRE:
                                        case DIMANCHE:
                                        case LUNDI:
                                        case MARDI:
                                        case MERCREDI:
                                        case JEUDI:
                                        case VENDREDI:
                                        case SAMEDI:
                                        case JOUR:
                                        case AUJOURD_HUI:
                                        case DEMAIN:
                                        case APRES_DEMAIN:
                                        case HIER:
                                        case AVANT_HIER:
                                        case A:
                                        case PASSE:
                                        case DANS:
                                        case LE:
                                        case LA:
                                        case CE:
                                        case MAINTENANT:
                                        case SUIVANT:
                                        case DERNIER:
                                        case DEBUT:
                                        case FIN:
                                        case IL_Y_A:
                                        case COMMA:
                                        case INT_01:
                                        case INT_02:
                                        case INT_03:
                                        case INT_04:
                                        case INT_05:
                                        case INT_06:
                                        case INT_07:
                                        case INT_08:
                                        case INT_09:
                                        case INT_1:
                                        case INT_2:
                                        case INT_3:
                                        case INT_4:
                                        case INT_5:
                                        case INT_6:
                                        case INT_7:
                                        case INT_8:
                                        case INT_9:
                                        case INT_10:
                                        case INT_11:
                                        case INT_12:
                                        case INT_13:
                                        case INT_14:
                                        case INT_15:
                                        case INT_16:
                                        case INT_17:
                                        case INT_18:
                                        case INT_19:
                                        case INT_20:
                                        case INT_21:
                                        case INT_22:
                                        case INT_23:
                                        case INT_24:
                                        case INT_25:
                                        case INT_26:
                                        case INT_27:
                                        case INT_28:
                                        case INT_29:
                                        case INT_30:
                                        case INT_31:
                                        case INT_32:
                                        case INT_33:
                                        case INT_34:
                                        case INT_35:
                                        case INT_36:
                                        case INT_37:
                                        case INT_38:
                                        case INT_39:
                                        case INT_40:
                                        case INT_41:
                                        case INT_42:
                                        case INT_43:
                                        case INT_44:
                                        case INT_45:
                                        case INT_46:
                                        case INT_47:
                                        case INT_48:
                                        case INT_49:
                                        case INT_50:
                                        case INT_51:
                                        case INT_52:
                                        case INT_53:
                                        case INT_54:
                                        case INT_55:
                                        case INT_56:
                                        case INT_57:
                                        case INT_58:
                                        case INT_59:
                                        case INT_60:
                                        case INT_61:
                                        case INT_62:
                                        case INT_63:
                                        case INT_64:
                                        case INT_65:
                                        case INT_66:
                                        case INT_67:
                                        case INT_68:
                                        case INT_69:
                                        case INT_70:
                                        case INT_71:
                                        case INT_72:
                                        case INT_73:
                                        case INT_74:
                                        case INT_75:
                                        case INT_76:
                                        case INT_77:
                                        case INT_78:
                                        case INT_79:
                                        case INT_80:
                                        case INT_81:
                                        case INT_82:
                                        case INT_83:
                                        case INT_84:
                                        case INT_85:
                                        case INT_86:
                                        case INT_87:
                                        case INT_88:
                                        case INT_89:
                                        case INT_90:
                                        case INT_91:
                                        case INT_92:
                                        case INT_93:
                                        case INT_94:
                                        case INT_95:
                                        case INT_96:
                                        case INT_97:
                                        case INT_98:
                                        case INT_99:
                                        case UN:
                                        case DEUX:
                                        case TROIS:
                                        case QUATRE:
                                        case CINQ:
                                        case SIX:
                                        case SEPT:
                                        case HUIT:
                                        case NEUF:
                                        case DIX:
                                        case ONZE:
                                        case DOUZE:
                                        case TREIZE:
                                        case QUATORZE:
                                        case QUINZE:
                                        case SEIZE:
                                        case VINGT:
                                        case TRENTE:
                                        case PREMIER:
                                        case DEUXIEME:
                                        case TROISIEME:
                                        case QUATRIEME:
                                        case CINQUIEME:
                                            {
                                            alt4=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(4);}

                            switch (alt4) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:68:24: time_date_separator date
                                    {
                                    dbg.location(68,24);
                                    pushFollow(FOLLOW_time_date_separator_in_date_time300);
                                    time_date_separator15=time_date_separator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_time_date_separator.add(time_date_separator15.getTree());
                                    dbg.location(68,44);
                                    pushFollow(FOLLOW_date_in_date_time302);
                                    date16=date();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_date.add(date16.getTree());

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(4);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(5);}



                    // AST REWRITE
                    // elements: date, explicit_time
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 69:7: -> ^( DATE_TIME ( date )? ( explicit_time )? )
                    {
                        dbg.location(69,10);
                        // com/joestelmach/natty/generated/DateParser.g:69:10: ^( DATE_TIME ( date )? ( explicit_time )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(69,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(69,22);
                        // com/joestelmach/natty/generated/DateParser.g:69:22: ( date )?
                        if ( stream_date.hasNext() ) {
                            dbg.location(69,22);
                            adaptor.addChild(root_1, stream_date.nextTree());

                        }
                        stream_date.reset();
                        dbg.location(69,28);
                        // com/joestelmach/natty/generated/DateParser.g:69:28: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(69,28);
                            adaptor.addChild(root_1, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:70:5: relative_time
                    {
                    dbg.location(70,5);
                    pushFollow(FOLLOW_relative_time_in_date_time328);
                    relative_time17=relative_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_time.add(relative_time17.getTree());


                    // AST REWRITE
                    // elements: relative_time
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 70:19: -> ^( DATE_TIME ( relative_time )? )
                    {
                        dbg.location(70,22);
                        // com/joestelmach/natty/generated/DateParser.g:70:22: ^( DATE_TIME ( relative_time )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(70,24);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(70,34);
                        // com/joestelmach/natty/generated/DateParser.g:70:34: ( relative_time )?
                        if ( stream_relative_time.hasNext() ) {
                            dbg.location(70,34);
                            adaptor.addChild(root_1, stream_relative_time.nextTree());

                        }
                        stream_relative_time.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(71, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "date_time");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "date_time"

    public static class date_time_separator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_time_separator"
    // com/joestelmach/natty/generated/DateParser.g:73:1: date_time_separator : ( WHITE_SPACE ( A WHITE_SPACE )? | COMMA ( WHITE_SPACE )? ( A WHITE_SPACE )? );
    public final DateParser.date_time_separator_return date_time_separator() throws RecognitionException {
        DateParser.date_time_separator_return retval = new DateParser.date_time_separator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE18=null;
        Token A19=null;
        Token WHITE_SPACE20=null;
        Token COMMA21=null;
        Token WHITE_SPACE22=null;
        Token A23=null;
        Token WHITE_SPACE24=null;

        Object WHITE_SPACE18_tree=null;
        Object A19_tree=null;
        Object WHITE_SPACE20_tree=null;
        Object COMMA21_tree=null;
        Object WHITE_SPACE22_tree=null;
        Object A23_tree=null;
        Object WHITE_SPACE24_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "date_time_separator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(73, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:74:3: ( WHITE_SPACE ( A WHITE_SPACE )? | COMMA ( WHITE_SPACE )? ( A WHITE_SPACE )? )
            int alt10=2;
            try { dbg.enterDecision(10);

            switch ( input.LA(1) ) {
            case WHITE_SPACE:
                {
                alt10=1;
                }
                break;
            case COMMA:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(10);}

            switch (alt10) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:74:5: WHITE_SPACE ( A WHITE_SPACE )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(74,5);
                    WHITE_SPACE18=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_separator352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHITE_SPACE18_tree = (Object)adaptor.create(WHITE_SPACE18);
                    adaptor.addChild(root_0, WHITE_SPACE18_tree);
                    }
                    dbg.location(74,17);
                    // com/joestelmach/natty/generated/DateParser.g:74:17: ( A WHITE_SPACE )?
                    int alt7=2;
                    try { dbg.enterSubRule(7);
                    try { dbg.enterDecision(7);

                    switch ( input.LA(1) ) {
                        case A:
                            {
                            switch ( input.LA(2) ) {
                                case WHITE_SPACE:
                                    {
                                    alt7=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(7);}

                    switch (alt7) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:74:18: A WHITE_SPACE
                            {
                            dbg.location(74,18);
                            A19=(Token)match(input,A,FOLLOW_A_in_date_time_separator355); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            A19_tree = (Object)adaptor.create(A19);
                            adaptor.addChild(root_0, A19_tree);
                            }
                            dbg.location(74,20);
                            WHITE_SPACE20=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_separator357); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE20_tree = (Object)adaptor.create(WHITE_SPACE20);
                            adaptor.addChild(root_0, WHITE_SPACE20_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(7);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:75:5: COMMA ( WHITE_SPACE )? ( A WHITE_SPACE )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(75,5);
                    COMMA21=(Token)match(input,COMMA,FOLLOW_COMMA_in_date_time_separator365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA21_tree = (Object)adaptor.create(COMMA21);
                    adaptor.addChild(root_0, COMMA21_tree);
                    }
                    dbg.location(75,11);
                    // com/joestelmach/natty/generated/DateParser.g:75:11: ( WHITE_SPACE )?
                    int alt8=2;
                    try { dbg.enterSubRule(8);
                    try { dbg.enterDecision(8);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            alt8=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(8);}

                    switch (alt8) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:75:11: WHITE_SPACE
                            {
                            dbg.location(75,11);
                            WHITE_SPACE22=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_separator367); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE22_tree = (Object)adaptor.create(WHITE_SPACE22);
                            adaptor.addChild(root_0, WHITE_SPACE22_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(8);}

                    dbg.location(75,24);
                    // com/joestelmach/natty/generated/DateParser.g:75:24: ( A WHITE_SPACE )?
                    int alt9=2;
                    try { dbg.enterSubRule(9);
                    try { dbg.enterDecision(9);

                    switch ( input.LA(1) ) {
                        case A:
                            {
                            switch ( input.LA(2) ) {
                                case WHITE_SPACE:
                                    {
                                    alt9=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(9);}

                    switch (alt9) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:75:25: A WHITE_SPACE
                            {
                            dbg.location(75,25);
                            A23=(Token)match(input,A,FOLLOW_A_in_date_time_separator371); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            A23_tree = (Object)adaptor.create(A23);
                            adaptor.addChild(root_0, A23_tree);
                            }
                            dbg.location(75,27);
                            WHITE_SPACE24=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_separator373); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE24_tree = (Object)adaptor.create(WHITE_SPACE24);
                            adaptor.addChild(root_0, WHITE_SPACE24_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(9);}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(76, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "date_time_separator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "date_time_separator"

    public static class time_date_separator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "time_date_separator"
    // com/joestelmach/natty/generated/DateParser.g:78:1: time_date_separator : ( WHITE_SPACE ( LE WHITE_SPACE )? | COMMA ( WHITE_SPACE )? ( LE WHITE_SPACE )? );
    public final DateParser.time_date_separator_return time_date_separator() throws RecognitionException {
        DateParser.time_date_separator_return retval = new DateParser.time_date_separator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE25=null;
        Token LE26=null;
        Token WHITE_SPACE27=null;
        Token COMMA28=null;
        Token WHITE_SPACE29=null;
        Token LE30=null;
        Token WHITE_SPACE31=null;

        Object WHITE_SPACE25_tree=null;
        Object LE26_tree=null;
        Object WHITE_SPACE27_tree=null;
        Object COMMA28_tree=null;
        Object WHITE_SPACE29_tree=null;
        Object LE30_tree=null;
        Object WHITE_SPACE31_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "time_date_separator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(78, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:79:3: ( WHITE_SPACE ( LE WHITE_SPACE )? | COMMA ( WHITE_SPACE )? ( LE WHITE_SPACE )? )
            int alt14=2;
            try { dbg.enterDecision(14);

            switch ( input.LA(1) ) {
            case WHITE_SPACE:
                {
                alt14=1;
                }
                break;
            case COMMA:
                {
                alt14=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:79:5: WHITE_SPACE ( LE WHITE_SPACE )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(79,5);
                    WHITE_SPACE25=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_time_date_separator390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHITE_SPACE25_tree = (Object)adaptor.create(WHITE_SPACE25);
                    adaptor.addChild(root_0, WHITE_SPACE25_tree);
                    }
                    dbg.location(79,17);
                    // com/joestelmach/natty/generated/DateParser.g:79:17: ( LE WHITE_SPACE )?
                    int alt11=2;
                    try { dbg.enterSubRule(11);
                    try { dbg.enterDecision(11);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            switch ( input.LA(2) ) {
                                case WHITE_SPACE:
                                    {
                                    alt11=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(11);}

                    switch (alt11) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:79:18: LE WHITE_SPACE
                            {
                            dbg.location(79,18);
                            LE26=(Token)match(input,LE,FOLLOW_LE_in_time_date_separator393); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LE26_tree = (Object)adaptor.create(LE26);
                            adaptor.addChild(root_0, LE26_tree);
                            }
                            dbg.location(79,21);
                            WHITE_SPACE27=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_time_date_separator395); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE27_tree = (Object)adaptor.create(WHITE_SPACE27);
                            adaptor.addChild(root_0, WHITE_SPACE27_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(11);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:80:5: COMMA ( WHITE_SPACE )? ( LE WHITE_SPACE )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(80,5);
                    COMMA28=(Token)match(input,COMMA,FOLLOW_COMMA_in_time_date_separator403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA28_tree = (Object)adaptor.create(COMMA28);
                    adaptor.addChild(root_0, COMMA28_tree);
                    }
                    dbg.location(80,11);
                    // com/joestelmach/natty/generated/DateParser.g:80:11: ( WHITE_SPACE )?
                    int alt12=2;
                    try { dbg.enterSubRule(12);
                    try { dbg.enterDecision(12);

                    try {
                        isCyclicDecision = true;
                        alt12 = dfa12.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(12);}

                    switch (alt12) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:80:11: WHITE_SPACE
                            {
                            dbg.location(80,11);
                            WHITE_SPACE29=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_time_date_separator405); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE29_tree = (Object)adaptor.create(WHITE_SPACE29);
                            adaptor.addChild(root_0, WHITE_SPACE29_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(12);}

                    dbg.location(80,24);
                    // com/joestelmach/natty/generated/DateParser.g:80:24: ( LE WHITE_SPACE )?
                    int alt13=2;
                    try { dbg.enterSubRule(13);
                    try { dbg.enterDecision(13);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            switch ( input.LA(2) ) {
                                case WHITE_SPACE:
                                    {
                                    alt13=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(13);}

                    switch (alt13) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:80:25: LE WHITE_SPACE
                            {
                            dbg.location(80,25);
                            LE30=(Token)match(input,LE,FOLLOW_LE_in_time_date_separator409); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LE30_tree = (Object)adaptor.create(LE30);
                            adaptor.addChild(root_0, LE30_tree);
                            }
                            dbg.location(80,28);
                            WHITE_SPACE31=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_time_date_separator411); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE31_tree = (Object)adaptor.create(WHITE_SPACE31);
                            adaptor.addChild(root_0, WHITE_SPACE31_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(13);}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(81, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "time_date_separator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "time_date_separator"

    public static class date_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date"
    // com/joestelmach/natty/generated/DateParser.g:83:1: date : ( formal_date | relaxed_date | relative_date | explicit_relative_date | global_date_prefix WHITE_SPACE date -> ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ) );
    public final DateParser.date_return date() throws RecognitionException {
        DateParser.date_return retval = new DateParser.date_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE37=null;
        DateParser.formal_date_return formal_date32 = null;

        DateParser.relaxed_date_return relaxed_date33 = null;

        DateParser.relative_date_return relative_date34 = null;

        DateParser.explicit_relative_date_return explicit_relative_date35 = null;

        DateParser.global_date_prefix_return global_date_prefix36 = null;

        DateParser.date_return date38 = null;


        Object WHITE_SPACE37_tree=null;
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_global_date_prefix=new RewriteRuleSubtreeStream(adaptor,"rule global_date_prefix");
        RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date");
        try { dbg.enterRule(getGrammarFileName(), "date");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(83, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:84:3: ( formal_date | relaxed_date | relative_date | explicit_relative_date | global_date_prefix WHITE_SPACE date -> ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ) )
            int alt15=5;
            try { dbg.enterDecision(15);

            try {
                isCyclicDecision = true;
                alt15 = dfa15.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(15);}

            switch (alt15) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:84:5: formal_date
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(84,5);
                    pushFollow(FOLLOW_formal_date_in_date428);
                    formal_date32=formal_date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_date32.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:85:5: relaxed_date
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(85,5);
                    pushFollow(FOLLOW_relaxed_date_in_date434);
                    relaxed_date33=relaxed_date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relaxed_date33.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:86:5: relative_date
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(86,5);
                    pushFollow(FOLLOW_relative_date_in_date440);
                    relative_date34=relative_date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relative_date34.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:87:5: explicit_relative_date
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(87,5);
                    pushFollow(FOLLOW_explicit_relative_date_in_date446);
                    explicit_relative_date35=explicit_relative_date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_relative_date35.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:88:5: global_date_prefix WHITE_SPACE date
                    {
                    dbg.location(88,5);
                    pushFollow(FOLLOW_global_date_prefix_in_date452);
                    global_date_prefix36=global_date_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_global_date_prefix.add(global_date_prefix36.getTree());
                    dbg.location(88,24);
                    WHITE_SPACE37=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE37);

                    dbg.location(88,36);
                    pushFollow(FOLLOW_date_in_date456);
                    date38=date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date.add(date38.getTree());


                    // AST REWRITE
                    // elements: global_date_prefix, date
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 89:7: -> ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) )
                    {
                        dbg.location(89,10);
                        // com/joestelmach/natty/generated/DateParser.g:89:10: ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(89,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(89,26);
                        // com/joestelmach/natty/generated/DateParser.g:89:26: ^( SEEK global_date_prefix date )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(89,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(89,33);
                        adaptor.addChild(root_2, stream_global_date_prefix.nextTree());
                        dbg.location(89,52);
                        adaptor.addChild(root_2, stream_date.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(90, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "date");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "date"

    public static class date_time_alternative_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_time_alternative"
    // com/joestelmach/natty/generated/DateParser.g:92:1: date_time_alternative : ( CE WHITE_SPACE this_suffix -> ^( DATE_TIME_ALTERNATIVE this_suffix IS_INTERVAL ) | ( relaxed_month WHITE_SPACE ( relaxed_year | SUIVANT ) )=> relaxed_month WHITE_SPACE ( relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL ) | SUIVANT -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL ) ) | ( ( LE | LA ) WHITE_SPACE )? relative_date_interval -> ^( DATE_TIME_ALTERNATIVE relative_date_interval IS_INTERVAL ) | ( date ( conjunction | interval_conjunction ) global_date_prefix )=> date ( conjunction | interval_conjunction ) global_date_prefix ( date_time_separator explicit_time )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME date ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? ) ) ( interval_conjunction )? ) | ( alternative_day_of_week_list )=> alternative_day_of_week_list -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_week_list ) | ( alternative_day_of_month_list )=> alternative_day_of_month_list -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_month_list ) | ( ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction )=> ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction ( date_time_separator explicit_time )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) ( interval_conjunction )? ) | ( explicit_day_of_year_part ( conjunction | interval_conjunction ) explicit_day_of_year_part WHITE_SPACE relaxed_year )=>first= explicit_day_of_year_part ( conjunction | interval_conjunction ) second= explicit_day_of_year_part WHITE_SPACE relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second) ) ( interval_conjunction )? ) | ( PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE )=> PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL ) ) | ( spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE )=> spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) ) ) | ( ( relaxed_day_of_week )? relaxed_day_of_month interval_conjunction relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? )=> ( relaxed_day_of_week )? premier= relaxed_day_of_month interval_conjunction deuxieme= relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? ) ) ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? ) ) IS_INTERVAL ) | ( date_time ( conjunction | interval_conjunction ) date_time )=> date_time ( conjunction | interval_conjunction ) date_time -> ^( DATE_TIME_ALTERNATIVE date_time date_time ( interval_conjunction )? ) | date_time -> ^( DATE_TIME_ALTERNATIVE date_time ) );
    public final DateParser.date_time_alternative_return date_time_alternative() throws RecognitionException {
        DateParser.date_time_alternative_return retval = new DateParser.date_time_alternative_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CE39=null;
        Token WHITE_SPACE40=null;
        Token WHITE_SPACE43=null;
        Token SUIVANT45=null;
        Token LE46=null;
        Token LA47=null;
        Token WHITE_SPACE48=null;
        Token CE58=null;
        Token WHITE_SPACE59=null;
        Token WHITE_SPACE68=null;
        Token PENDANT70=null;
        Token WHITE_SPACE71=null;
        Token WHITE_SPACE73=null;
        Token WHITE_SPACE77=null;
        Token DERNIER78=null;
        Token PASSE79=null;
        Token WHITE_SPACE80=null;
        Token WHITE_SPACE85=null;
        Token WHITE_SPACE87=null;
        DateParser.explicit_day_of_year_part_return first = null;

        DateParser.explicit_day_of_year_part_return second = null;

        DateParser.relaxed_day_of_month_return premier = null;

        DateParser.relaxed_day_of_month_return deuxieme = null;

        DateParser.this_suffix_return this_suffix41 = null;

        DateParser.relaxed_month_return relaxed_month42 = null;

        DateParser.relaxed_year_return relaxed_year44 = null;

        DateParser.relative_date_interval_return relative_date_interval49 = null;

        DateParser.date_return date50 = null;

        DateParser.conjunction_return conjunction51 = null;

        DateParser.interval_conjunction_return interval_conjunction52 = null;

        DateParser.global_date_prefix_return global_date_prefix53 = null;

        DateParser.date_time_separator_return date_time_separator54 = null;

        DateParser.explicit_time_return explicit_time55 = null;

        DateParser.alternative_day_of_week_list_return alternative_day_of_week_list56 = null;

        DateParser.alternative_day_of_month_list_return alternative_day_of_month_list57 = null;

        DateParser.day_of_week_return day_of_week60 = null;

        DateParser.conjunction_return conjunction61 = null;

        DateParser.interval_conjunction_return interval_conjunction62 = null;

        DateParser.alternative_direction_return alternative_direction63 = null;

        DateParser.date_time_separator_return date_time_separator64 = null;

        DateParser.explicit_time_return explicit_time65 = null;

        DateParser.conjunction_return conjunction66 = null;

        DateParser.interval_conjunction_return interval_conjunction67 = null;

        DateParser.relaxed_year_return relaxed_year69 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix72 = null;

        DateParser.relative_date_span_return relative_date_span74 = null;

        DateParser.relative_time_span_return relative_time_span75 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix76 = null;

        DateParser.relative_date_span_return relative_date_span81 = null;

        DateParser.relative_time_span_return relative_time_span82 = null;

        DateParser.relaxed_day_of_week_return relaxed_day_of_week83 = null;

        DateParser.interval_conjunction_return interval_conjunction84 = null;

        DateParser.relaxed_month_return relaxed_month86 = null;

        DateParser.relaxed_year_return relaxed_year88 = null;

        DateParser.date_time_return date_time89 = null;

        DateParser.conjunction_return conjunction90 = null;

        DateParser.interval_conjunction_return interval_conjunction91 = null;

        DateParser.date_time_return date_time92 = null;

        DateParser.date_time_return date_time93 = null;


        Object CE39_tree=null;
        Object WHITE_SPACE40_tree=null;
        Object WHITE_SPACE43_tree=null;
        Object SUIVANT45_tree=null;
        Object LE46_tree=null;
        Object LA47_tree=null;
        Object WHITE_SPACE48_tree=null;
        Object CE58_tree=null;
        Object WHITE_SPACE59_tree=null;
        Object WHITE_SPACE68_tree=null;
        Object PENDANT70_tree=null;
        Object WHITE_SPACE71_tree=null;
        Object WHITE_SPACE73_tree=null;
        Object WHITE_SPACE77_tree=null;
        Object DERNIER78_tree=null;
        Object PASSE79_tree=null;
        Object WHITE_SPACE80_tree=null;
        Object WHITE_SPACE85_tree=null;
        Object WHITE_SPACE87_tree=null;
        RewriteRuleTokenStream stream_LA=new RewriteRuleTokenStream(adaptor,"token LA");
        RewriteRuleTokenStream stream_PENDANT=new RewriteRuleTokenStream(adaptor,"token PENDANT");
        RewriteRuleTokenStream stream_CE=new RewriteRuleTokenStream(adaptor,"token CE");
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_PASSE=new RewriteRuleTokenStream(adaptor,"token PASSE");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_SUIVANT=new RewriteRuleTokenStream(adaptor,"token SUIVANT");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_relative_date_interval=new RewriteRuleSubtreeStream(adaptor,"rule relative_date_interval");
        RewriteRuleSubtreeStream stream_date_time_separator=new RewriteRuleSubtreeStream(adaptor,"rule date_time_separator");
        RewriteRuleSubtreeStream stream_relaxed_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_month");
        RewriteRuleSubtreeStream stream_conjunction=new RewriteRuleSubtreeStream(adaptor,"rule conjunction");
        RewriteRuleSubtreeStream stream_alternative_day_of_month_list=new RewriteRuleSubtreeStream(adaptor,"rule alternative_day_of_month_list");
        RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date");
        RewriteRuleSubtreeStream stream_this_suffix=new RewriteRuleSubtreeStream(adaptor,"rule this_suffix");
        RewriteRuleSubtreeStream stream_spelled_or_int_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_optional_prefix");
        RewriteRuleSubtreeStream stream_relative_date_span=new RewriteRuleSubtreeStream(adaptor,"rule relative_date_span");
        RewriteRuleSubtreeStream stream_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week");
        RewriteRuleSubtreeStream stream_relaxed_day_of_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_month");
        RewriteRuleSubtreeStream stream_relative_time_span=new RewriteRuleSubtreeStream(adaptor,"rule relative_time_span");
        RewriteRuleSubtreeStream stream_global_date_prefix=new RewriteRuleSubtreeStream(adaptor,"rule global_date_prefix");
        RewriteRuleSubtreeStream stream_relaxed_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_week");
        RewriteRuleSubtreeStream stream_alternative_direction=new RewriteRuleSubtreeStream(adaptor,"rule alternative_direction");
        RewriteRuleSubtreeStream stream_relaxed_year=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_year");
        RewriteRuleSubtreeStream stream_explicit_day_of_year_part=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_year_part");
        RewriteRuleSubtreeStream stream_date_time=new RewriteRuleSubtreeStream(adaptor,"rule date_time");
        RewriteRuleSubtreeStream stream_interval_conjunction=new RewriteRuleSubtreeStream(adaptor,"rule interval_conjunction");
        RewriteRuleSubtreeStream stream_alternative_day_of_week_list=new RewriteRuleSubtreeStream(adaptor,"rule alternative_day_of_week_list");
        RewriteRuleSubtreeStream stream_explicit_time=new RewriteRuleSubtreeStream(adaptor,"rule explicit_time");
        try { dbg.enterRule(getGrammarFileName(), "date_time_alternative");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(92, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:95:3: ( CE WHITE_SPACE this_suffix -> ^( DATE_TIME_ALTERNATIVE this_suffix IS_INTERVAL ) | ( relaxed_month WHITE_SPACE ( relaxed_year | SUIVANT ) )=> relaxed_month WHITE_SPACE ( relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL ) | SUIVANT -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL ) ) | ( ( LE | LA ) WHITE_SPACE )? relative_date_interval -> ^( DATE_TIME_ALTERNATIVE relative_date_interval IS_INTERVAL ) | ( date ( conjunction | interval_conjunction ) global_date_prefix )=> date ( conjunction | interval_conjunction ) global_date_prefix ( date_time_separator explicit_time )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME date ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? ) ) ( interval_conjunction )? ) | ( alternative_day_of_week_list )=> alternative_day_of_week_list -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_week_list ) | ( alternative_day_of_month_list )=> alternative_day_of_month_list -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_month_list ) | ( ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction )=> ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction ( date_time_separator explicit_time )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) ( interval_conjunction )? ) | ( explicit_day_of_year_part ( conjunction | interval_conjunction ) explicit_day_of_year_part WHITE_SPACE relaxed_year )=>first= explicit_day_of_year_part ( conjunction | interval_conjunction ) second= explicit_day_of_year_part WHITE_SPACE relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second) ) ( interval_conjunction )? ) | ( PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE )=> PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL ) ) | ( spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE )=> spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) ) ) | ( ( relaxed_day_of_week )? relaxed_day_of_month interval_conjunction relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? )=> ( relaxed_day_of_week )? premier= relaxed_day_of_month interval_conjunction deuxieme= relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? ) ) ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? ) ) IS_INTERVAL ) | ( date_time ( conjunction | interval_conjunction ) date_time )=> date_time ( conjunction | interval_conjunction ) date_time -> ^( DATE_TIME_ALTERNATIVE date_time date_time ( interval_conjunction )? ) | date_time -> ^( DATE_TIME_ALTERNATIVE date_time ) )
            int alt31=13;
            try { dbg.enterDecision(31);

            try {
                isCyclicDecision = true;
                alt31 = dfa31.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:95:5: CE WHITE_SPACE this_suffix
                    {
                    dbg.location(95,5);
                    CE39=(Token)match(input,CE,FOLLOW_CE_in_date_time_alternative498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CE.add(CE39);

                    dbg.location(95,8);
                    WHITE_SPACE40=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE40);

                    dbg.location(95,20);
                    pushFollow(FOLLOW_this_suffix_in_date_time_alternative502);
                    this_suffix41=this_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_this_suffix.add(this_suffix41.getTree());


                    // AST REWRITE
                    // elements: this_suffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 96:7: -> ^( DATE_TIME_ALTERNATIVE this_suffix IS_INTERVAL )
                    {
                        dbg.location(96,10);
                        // com/joestelmach/natty/generated/DateParser.g:96:10: ^( DATE_TIME_ALTERNATIVE this_suffix IS_INTERVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(96,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(96,34);
                        adaptor.addChild(root_1, stream_this_suffix.nextTree());
                        dbg.location(96,46);
                        adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:99:5: ( relaxed_month WHITE_SPACE ( relaxed_year | SUIVANT ) )=> relaxed_month WHITE_SPACE ( relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL ) | SUIVANT -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL ) )
                    {
                    dbg.location(100,9);
                    pushFollow(FOLLOW_relaxed_month_in_date_time_alternative555);
                    relaxed_month42=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month42.getTree());
                    dbg.location(100,23);
                    WHITE_SPACE43=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE43);

                    dbg.location(101,11);
                    // com/joestelmach/natty/generated/DateParser.g:101:11: ( relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL ) | SUIVANT -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL ) )
                    int alt16=2;
                    try { dbg.enterSubRule(16);
                    try { dbg.enterDecision(16);

                    switch ( input.LA(1) ) {
                    case INT_00:
                    case INT_01:
                    case INT_02:
                    case INT_03:
                    case INT_04:
                    case INT_05:
                    case INT_06:
                    case INT_07:
                    case INT_08:
                    case INT_09:
                    case INT_10:
                    case INT_11:
                    case INT_12:
                    case INT_13:
                    case INT_14:
                    case INT_15:
                    case INT_16:
                    case INT_17:
                    case INT_18:
                    case INT_19:
                    case INT_20:
                    case INT_21:
                    case INT_22:
                    case INT_23:
                    case INT_24:
                    case INT_25:
                    case INT_26:
                    case INT_27:
                    case INT_28:
                    case INT_29:
                    case INT_30:
                    case INT_31:
                    case INT_32:
                    case INT_33:
                    case INT_34:
                    case INT_35:
                    case INT_36:
                    case INT_37:
                    case INT_38:
                    case INT_39:
                    case INT_40:
                    case INT_41:
                    case INT_42:
                    case INT_43:
                    case INT_44:
                    case INT_45:
                    case INT_46:
                    case INT_47:
                    case INT_48:
                    case INT_49:
                    case INT_50:
                    case INT_51:
                    case INT_52:
                    case INT_53:
                    case INT_54:
                    case INT_55:
                    case INT_56:
                    case INT_57:
                    case INT_58:
                    case INT_59:
                    case INT_60:
                    case INT_61:
                    case INT_62:
                    case INT_63:
                    case INT_64:
                    case INT_65:
                    case INT_66:
                    case INT_67:
                    case INT_68:
                    case INT_69:
                    case INT_70:
                    case INT_71:
                    case INT_72:
                    case INT_73:
                    case INT_74:
                    case INT_75:
                    case INT_76:
                    case INT_77:
                    case INT_78:
                    case INT_79:
                    case INT_80:
                    case INT_81:
                    case INT_82:
                    case INT_83:
                    case INT_84:
                    case INT_85:
                    case INT_86:
                    case INT_87:
                    case INT_88:
                    case INT_89:
                    case INT_90:
                    case INT_91:
                    case INT_92:
                    case INT_93:
                    case INT_94:
                    case INT_95:
                    case INT_96:
                    case INT_97:
                    case INT_98:
                    case INT_99:
                        {
                        alt16=1;
                        }
                        break;
                    case SUIVANT:
                        {
                        alt16=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 16, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(16);}

                    switch (alt16) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:101:12: relaxed_year
                            {
                            dbg.location(101,12);
                            pushFollow(FOLLOW_relaxed_year_in_date_time_alternative571);
                            relaxed_year44=relaxed_year();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_year.add(relaxed_year44.getTree());


                            // AST REWRITE
                            // elements: relaxed_year, relaxed_month, relaxed_year, relaxed_month
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 101:25: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL )
                            {
                                dbg.location(102,13);
                                // com/joestelmach/natty/generated/DateParser.g:102:13: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                dbg.location(102,15);
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                                dbg.location(103,15);
                                // com/joestelmach/natty/generated/DateParser.g:103:15: ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(103,17);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(103,27);
                                // com/joestelmach/natty/generated/DateParser.g:103:27: ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(103,29);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_DATE, "EXPLICIT_DATE"), root_3);

                                dbg.location(103,43);
                                adaptor.addChild(root_3, stream_relaxed_month.nextTree());
                                dbg.location(103,57);
                                // com/joestelmach/natty/generated/DateParser.g:103:57: ^( DAY_OF_MONTH INT[\"1\"] )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(103,59);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_4);

                                dbg.location(103,72);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                                adaptor.addChild(root_3, root_4);
                                }
                                dbg.location(103,82);
                                adaptor.addChild(root_3, stream_relaxed_year.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(104,15);
                                // com/joestelmach/natty/generated/DateParser.g:104:15: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(104,17);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(104,27);
                                // com/joestelmach/natty/generated/DateParser.g:104:27: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(104,29);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(105,17);
                                // com/joestelmach/natty/generated/DateParser.g:105:17: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(105,19);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(105,24);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(105,39);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_month"));
                                dbg.location(105,59);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));
                                dbg.location(105,68);
                                adaptor.addChild(root_4, stream_relaxed_month.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }
                                dbg.location(106,17);
                                // com/joestelmach/natty/generated/DateParser.g:106:17: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(106,19);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_4);

                                dbg.location(106,33);
                                // com/joestelmach/natty/generated/DateParser.g:106:33: ^( DAY_OF_MONTH INT[\"31\"] )
                                {
                                Object root_5 = (Object)adaptor.nil();
                                dbg.location(106,35);
                                root_5 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_5);

                                dbg.location(106,48);
                                adaptor.addChild(root_5, (Object)adaptor.create(INT, "31"));

                                adaptor.addChild(root_4, root_5);
                                }

                                adaptor.addChild(root_3, root_4);
                                }
                                dbg.location(107,17);
                                // com/joestelmach/natty/generated/DateParser.g:107:17: ^( EXPLICIT_SEEK relaxed_year )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(107,19);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_4);

                                dbg.location(107,33);
                                adaptor.addChild(root_4, stream_relaxed_year.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(108,15);
                                adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:109:13: SUIVANT
                            {
                            dbg.location(109,13);
                            SUIVANT45=(Token)match(input,SUIVANT,FOLLOW_SUIVANT_in_date_time_alternative757); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUIVANT.add(SUIVANT45);



                            // AST REWRITE
                            // elements: relaxed_month, relaxed_month
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 109:21: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL )
                            {
                                dbg.location(110,13);
                                // com/joestelmach/natty/generated/DateParser.g:110:13: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                dbg.location(110,15);
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                                dbg.location(111,15);
                                // com/joestelmach/natty/generated/DateParser.g:111:15: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(111,17);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(111,27);
                                // com/joestelmach/natty/generated/DateParser.g:111:27: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(111,29);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(111,43);
                                // com/joestelmach/natty/generated/DateParser.g:111:43: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(111,45);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(111,50);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(111,65);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_month"));
                                dbg.location(111,85);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));
                                dbg.location(111,94);
                                adaptor.addChild(root_4, stream_relaxed_month.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }
                                dbg.location(111,109);
                                // com/joestelmach/natty/generated/DateParser.g:111:109: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(111,111);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_4);

                                dbg.location(111,125);
                                // com/joestelmach/natty/generated/DateParser.g:111:125: ^( DAY_OF_MONTH INT[\"1\"] )
                                {
                                Object root_5 = (Object)adaptor.nil();
                                dbg.location(111,127);
                                root_5 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_5);

                                dbg.location(111,140);
                                adaptor.addChild(root_5, (Object)adaptor.create(INT, "1"));

                                adaptor.addChild(root_4, root_5);
                                }

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(112,15);
                                // com/joestelmach/natty/generated/DateParser.g:112:15: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(112,17);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(112,27);
                                // com/joestelmach/natty/generated/DateParser.g:112:27: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(112,29);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(112,43);
                                // com/joestelmach/natty/generated/DateParser.g:112:43: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(112,45);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(112,50);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(112,65);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_month"));
                                dbg.location(112,85);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));
                                dbg.location(112,94);
                                adaptor.addChild(root_4, stream_relaxed_month.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }
                                dbg.location(112,109);
                                // com/joestelmach/natty/generated/DateParser.g:112:109: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(112,111);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_4);

                                dbg.location(112,125);
                                // com/joestelmach/natty/generated/DateParser.g:112:125: ^( DAY_OF_MONTH INT[\"31\"] )
                                {
                                Object root_5 = (Object)adaptor.nil();
                                dbg.location(112,127);
                                root_5 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_5);

                                dbg.location(112,140);
                                adaptor.addChild(root_5, (Object)adaptor.create(INT, "31"));

                                adaptor.addChild(root_4, root_5);
                                }

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(113,15);
                                adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(16);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:117:5: ( ( LE | LA ) WHITE_SPACE )? relative_date_interval
                    {
                    dbg.location(117,5);
                    // com/joestelmach/natty/generated/DateParser.g:117:5: ( ( LE | LA ) WHITE_SPACE )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18);

                    switch ( input.LA(1) ) {
                        case LE:
                        case LA:
                            {
                            alt18=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:117:6: ( LE | LA ) WHITE_SPACE
                            {
                            dbg.location(117,6);
                            // com/joestelmach/natty/generated/DateParser.g:117:6: ( LE | LA )
                            int alt17=2;
                            try { dbg.enterSubRule(17);
                            try { dbg.enterDecision(17);

                            switch ( input.LA(1) ) {
                            case LE:
                                {
                                alt17=1;
                                }
                                break;
                            case LA:
                                {
                                alt17=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 17, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(17);}

                            switch (alt17) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:117:7: LE
                                    {
                                    dbg.location(117,7);
                                    LE46=(Token)match(input,LE,FOLLOW_LE_in_date_time_alternative913); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LE.add(LE46);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:117:12: LA
                                    {
                                    dbg.location(117,12);
                                    LA47=(Token)match(input,LA,FOLLOW_LA_in_date_time_alternative917); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LA.add(LA47);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(17);}

                            dbg.location(117,16);
                            WHITE_SPACE48=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative920); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE48);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(117,30);
                    pushFollow(FOLLOW_relative_date_interval_in_date_time_alternative924);
                    relative_date_interval49=relative_date_interval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_date_interval.add(relative_date_interval49.getTree());


                    // AST REWRITE
                    // elements: relative_date_interval
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 118:7: -> ^( DATE_TIME_ALTERNATIVE relative_date_interval IS_INTERVAL )
                    {
                        dbg.location(118,10);
                        // com/joestelmach/natty/generated/DateParser.g:118:10: ^( DATE_TIME_ALTERNATIVE relative_date_interval IS_INTERVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(118,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(118,34);
                        adaptor.addChild(root_1, stream_relative_date_interval.nextTree());
                        dbg.location(118,57);
                        adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:121:5: ( date ( conjunction | interval_conjunction ) global_date_prefix )=> date ( conjunction | interval_conjunction ) global_date_prefix ( date_time_separator explicit_time )?
                    {
                    dbg.location(122,7);
                    pushFollow(FOLLOW_date_in_date_time_alternative973);
                    date50=date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date.add(date50.getTree());
                    dbg.location(122,12);
                    // com/joestelmach/natty/generated/DateParser.g:122:12: ( conjunction | interval_conjunction )
                    int alt19=2;
                    try { dbg.enterSubRule(19);
                    try { dbg.enterDecision(19);

                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(3) ) {
                            case OU:
                            case ET:
                                {
                                alt19=1;
                                }
                                break;
                            case DASH:
                            case AU:
                                {
                                alt19=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 19, 2, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 19, 1, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case WHITE_SPACE:
                        {
                        switch ( input.LA(2) ) {
                        case OU:
                        case ET:
                            {
                            alt19=1;
                            }
                            break;
                        case DASH:
                        case AU:
                            {
                            alt19=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 19, 2, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(19);}

                    switch (alt19) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:122:13: conjunction
                            {
                            dbg.location(122,13);
                            pushFollow(FOLLOW_conjunction_in_date_time_alternative976);
                            conjunction51=conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_conjunction.add(conjunction51.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:122:27: interval_conjunction
                            {
                            dbg.location(122,27);
                            pushFollow(FOLLOW_interval_conjunction_in_date_time_alternative980);
                            interval_conjunction52=interval_conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interval_conjunction.add(interval_conjunction52.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(19);}

                    dbg.location(122,49);
                    pushFollow(FOLLOW_global_date_prefix_in_date_time_alternative983);
                    global_date_prefix53=global_date_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_global_date_prefix.add(global_date_prefix53.getTree());
                    dbg.location(122,68);
                    // com/joestelmach/natty/generated/DateParser.g:122:68: ( date_time_separator explicit_time )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt20=1;
                                    }
                                    break;
                            }

                            }
                            break;
                        case COMMA:
                            {
                            alt20=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:122:69: date_time_separator explicit_time
                            {
                            dbg.location(122,69);
                            pushFollow(FOLLOW_date_time_separator_in_date_time_alternative986);
                            date_time_separator54=date_time_separator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator54.getTree());
                            dbg.location(122,89);
                            pushFollow(FOLLOW_explicit_time_in_date_time_alternative988);
                            explicit_time55=explicit_time();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time55.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}



                    // AST REWRITE
                    // elements: date, explicit_time, explicit_time, date, interval_conjunction, global_date_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 123:9: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME date ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? ) ) ( interval_conjunction )? )
                    {
                        dbg.location(123,12);
                        // com/joestelmach/natty/generated/DateParser.g:123:12: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME date ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? ) ) ( interval_conjunction )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(123,14);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(123,36);
                        // com/joestelmach/natty/generated/DateParser.g:123:36: ^( DATE_TIME date ( explicit_time )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(123,38);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(123,48);
                        adaptor.addChild(root_2, stream_date.nextTree());
                        dbg.location(123,53);
                        // com/joestelmach/natty/generated/DateParser.g:123:53: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(123,53);
                            adaptor.addChild(root_2, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(123,69);
                        // com/joestelmach/natty/generated/DateParser.g:123:69: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(123,71);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(123,81);
                        // com/joestelmach/natty/generated/DateParser.g:123:81: ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(123,83);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                        dbg.location(123,97);
                        // com/joestelmach/natty/generated/DateParser.g:123:97: ^( SEEK global_date_prefix date )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(123,99);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                        dbg.location(123,104);
                        adaptor.addChild(root_4, stream_global_date_prefix.nextTree());
                        dbg.location(123,123);
                        adaptor.addChild(root_4, stream_date.nextTree());

                        adaptor.addChild(root_3, root_4);
                        }
                        dbg.location(123,129);
                        // com/joestelmach/natty/generated/DateParser.g:123:129: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(123,129);
                            adaptor.addChild(root_3, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(123,146);
                        // com/joestelmach/natty/generated/DateParser.g:123:146: ( interval_conjunction )?
                        if ( stream_interval_conjunction.hasNext() ) {
                            dbg.location(123,146);
                            adaptor.addChild(root_1, stream_interval_conjunction.nextTree());

                        }
                        stream_interval_conjunction.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:126:5: ( alternative_day_of_week_list )=> alternative_day_of_week_list
                    {
                    dbg.location(126,38);
                    pushFollow(FOLLOW_alternative_day_of_week_list_in_date_time_alternative1052);
                    alternative_day_of_week_list56=alternative_day_of_week_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alternative_day_of_week_list.add(alternative_day_of_week_list56.getTree());


                    // AST REWRITE
                    // elements: alternative_day_of_week_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 127:7: -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_week_list )
                    {
                        dbg.location(127,10);
                        // com/joestelmach/natty/generated/DateParser.g:127:10: ^( DATE_TIME_ALTERNATIVE alternative_day_of_week_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(127,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(127,34);
                        adaptor.addChild(root_1, stream_alternative_day_of_week_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:130:5: ( alternative_day_of_month_list )=> alternative_day_of_month_list
                    {
                    dbg.location(130,39);
                    pushFollow(FOLLOW_alternative_day_of_month_list_in_date_time_alternative1083);
                    alternative_day_of_month_list57=alternative_day_of_month_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alternative_day_of_month_list.add(alternative_day_of_month_list57.getTree());


                    // AST REWRITE
                    // elements: alternative_day_of_month_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 131:7: -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_month_list )
                    {
                        dbg.location(131,10);
                        // com/joestelmach/natty/generated/DateParser.g:131:10: ^( DATE_TIME_ALTERNATIVE alternative_day_of_month_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(131,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(131,34);
                        adaptor.addChild(root_1, stream_alternative_day_of_month_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // com/joestelmach/natty/generated/DateParser.g:134:5: ( ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction )=> ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction ( date_time_separator explicit_time )?
                    {
                    dbg.location(135,5);
                    // com/joestelmach/natty/generated/DateParser.g:135:5: ( CE WHITE_SPACE )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21);

                    switch ( input.LA(1) ) {
                        case CE:
                            {
                            alt21=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:135:6: CE WHITE_SPACE
                            {
                            dbg.location(135,6);
                            CE58=(Token)match(input,CE,FOLLOW_CE_in_date_time_alternative1136); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CE.add(CE58);

                            dbg.location(135,9);
                            WHITE_SPACE59=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1138); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE59);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(135,23);
                    pushFollow(FOLLOW_day_of_week_in_date_time_alternative1142);
                    day_of_week60=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week60.getTree());
                    dbg.location(135,35);
                    // com/joestelmach/natty/generated/DateParser.g:135:35: ( conjunction | interval_conjunction )
                    int alt22=2;
                    try { dbg.enterSubRule(22);
                    try { dbg.enterDecision(22);

                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(3) ) {
                            case OU:
                            case ET:
                                {
                                alt22=1;
                                }
                                break;
                            case DASH:
                            case AU:
                                {
                                alt22=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 22, 2, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 22, 1, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case WHITE_SPACE:
                        {
                        switch ( input.LA(2) ) {
                        case OU:
                        case ET:
                            {
                            alt22=1;
                            }
                            break;
                        case DASH:
                        case AU:
                            {
                            alt22=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 22, 2, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 22, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(22);}

                    switch (alt22) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:135:36: conjunction
                            {
                            dbg.location(135,36);
                            pushFollow(FOLLOW_conjunction_in_date_time_alternative1145);
                            conjunction61=conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_conjunction.add(conjunction61.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:135:50: interval_conjunction
                            {
                            dbg.location(135,50);
                            pushFollow(FOLLOW_interval_conjunction_in_date_time_alternative1149);
                            interval_conjunction62=interval_conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interval_conjunction.add(interval_conjunction62.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(22);}

                    dbg.location(135,72);
                    pushFollow(FOLLOW_alternative_direction_in_date_time_alternative1152);
                    alternative_direction63=alternative_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alternative_direction.add(alternative_direction63.getTree());
                    dbg.location(135,94);
                    // com/joestelmach/natty/generated/DateParser.g:135:94: ( date_time_separator explicit_time )?
                    int alt23=2;
                    try { dbg.enterSubRule(23);
                    try { dbg.enterDecision(23);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt23=1;
                                    }
                                    break;
                            }

                            }
                            break;
                        case COMMA:
                            {
                            alt23=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(23);}

                    switch (alt23) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:135:95: date_time_separator explicit_time
                            {
                            dbg.location(135,95);
                            pushFollow(FOLLOW_date_time_separator_in_date_time_alternative1155);
                            date_time_separator64=date_time_separator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator64.getTree());
                            dbg.location(135,115);
                            pushFollow(FOLLOW_explicit_time_in_date_time_alternative1157);
                            explicit_time65=explicit_time();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time65.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(23);}



                    // AST REWRITE
                    // elements: interval_conjunction, explicit_time, day_of_week, explicit_time, day_of_week, alternative_direction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 136:7: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) ( interval_conjunction )? )
                    {
                        dbg.location(136,10);
                        // com/joestelmach/natty/generated/DateParser.g:136:10: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) ( interval_conjunction )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(136,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(137,13);
                        // com/joestelmach/natty/generated/DateParser.g:137:13: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) ( explicit_time )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(137,15);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(137,25);
                        // com/joestelmach/natty/generated/DateParser.g:137:25: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(137,27);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                        dbg.location(137,41);
                        // com/joestelmach/natty/generated/DateParser.g:137:41: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(137,43);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                        dbg.location(137,48);
                        adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(137,63);
                        adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(137,81);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "0"));
                        dbg.location(137,90);
                        adaptor.addChild(root_4, stream_day_of_week.nextTree());

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(137,104);
                        // com/joestelmach/natty/generated/DateParser.g:137:104: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(137,104);
                            adaptor.addChild(root_2, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(138,13);
                        // com/joestelmach/natty/generated/DateParser.g:138:13: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(138,15);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(138,25);
                        // com/joestelmach/natty/generated/DateParser.g:138:25: ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(138,27);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                        dbg.location(138,41);
                        // com/joestelmach/natty/generated/DateParser.g:138:41: ^( SEEK alternative_direction day_of_week )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(138,43);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                        dbg.location(138,48);
                        adaptor.addChild(root_4, stream_alternative_direction.nextTree());
                        dbg.location(138,70);
                        adaptor.addChild(root_4, stream_day_of_week.nextTree());

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(138,84);
                        // com/joestelmach/natty/generated/DateParser.g:138:84: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(138,84);
                            adaptor.addChild(root_2, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(139,13);
                        // com/joestelmach/natty/generated/DateParser.g:139:13: ( interval_conjunction )?
                        if ( stream_interval_conjunction.hasNext() ) {
                            dbg.location(139,13);
                            adaptor.addChild(root_1, stream_interval_conjunction.nextTree());

                        }
                        stream_interval_conjunction.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // com/joestelmach/natty/generated/DateParser.g:142:5: ( explicit_day_of_year_part ( conjunction | interval_conjunction ) explicit_day_of_year_part WHITE_SPACE relaxed_year )=>first= explicit_day_of_year_part ( conjunction | interval_conjunction ) second= explicit_day_of_year_part WHITE_SPACE relaxed_year
                    {
                    dbg.location(143,12);
                    pushFollow(FOLLOW_explicit_day_of_year_part_in_date_time_alternative1296);
                    first=explicit_day_of_year_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_year_part.add(first.getTree());
                    dbg.location(143,39);
                    // com/joestelmach/natty/generated/DateParser.g:143:39: ( conjunction | interval_conjunction )
                    int alt24=2;
                    try { dbg.enterSubRule(24);
                    try { dbg.enterDecision(24);

                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(3) ) {
                            case OU:
                            case ET:
                                {
                                alt24=1;
                                }
                                break;
                            case DASH:
                            case AU:
                                {
                                alt24=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 24, 2, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 24, 1, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case WHITE_SPACE:
                        {
                        switch ( input.LA(2) ) {
                        case OU:
                        case ET:
                            {
                            alt24=1;
                            }
                            break;
                        case DASH:
                        case AU:
                            {
                            alt24=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 24, 2, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 24, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(24);}

                    switch (alt24) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:143:40: conjunction
                            {
                            dbg.location(143,40);
                            pushFollow(FOLLOW_conjunction_in_date_time_alternative1299);
                            conjunction66=conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_conjunction.add(conjunction66.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:143:54: interval_conjunction
                            {
                            dbg.location(143,54);
                            pushFollow(FOLLOW_interval_conjunction_in_date_time_alternative1303);
                            interval_conjunction67=interval_conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interval_conjunction.add(interval_conjunction67.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(143,82);
                    pushFollow(FOLLOW_explicit_day_of_year_part_in_date_time_alternative1308);
                    second=explicit_day_of_year_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_year_part.add(second.getTree());
                    dbg.location(143,109);
                    WHITE_SPACE68=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE68);

                    dbg.location(143,121);
                    pushFollow(FOLLOW_relaxed_year_in_date_time_alternative1312);
                    relaxed_year69=relaxed_year();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_year.add(relaxed_year69.getTree());


                    // AST REWRITE
                    // elements: relaxed_year, relaxed_year, second, first, interval_conjunction
                    // token labels: 
                    // rule labels: retval, second, first
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_second=new RewriteRuleSubtreeStream(adaptor,"rule second",second!=null?second.tree:null);
                    RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 144:9: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second) ) ( interval_conjunction )? )
                    {
                        dbg.location(144,12);
                        // com/joestelmach/natty/generated/DateParser.g:144:12: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second) ) ( interval_conjunction )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(144,14);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(145,14);
                        // com/joestelmach/natty/generated/DateParser.g:145:14: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(145,16);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(145,26);
                        // com/joestelmach/natty/generated/DateParser.g:145:26: ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first)
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(145,28);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                        dbg.location(145,42);
                        // com/joestelmach/natty/generated/DateParser.g:145:42: ^( EXPLICIT_SEEK relaxed_year )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(145,44);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_4);

                        dbg.location(145,58);
                        adaptor.addChild(root_4, stream_relaxed_year.nextTree());

                        adaptor.addChild(root_3, root_4);
                        }
                        dbg.location(145,72);
                        adaptor.addChild(root_3, stream_first.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(146,14);
                        // com/joestelmach/natty/generated/DateParser.g:146:14: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(146,16);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(146,26);
                        // com/joestelmach/natty/generated/DateParser.g:146:26: ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second)
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(146,28);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                        dbg.location(146,42);
                        // com/joestelmach/natty/generated/DateParser.g:146:42: ^( EXPLICIT_SEEK relaxed_year )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(146,44);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_4);

                        dbg.location(146,58);
                        adaptor.addChild(root_4, stream_relaxed_year.nextTree());

                        adaptor.addChild(root_3, root_4);
                        }
                        dbg.location(146,72);
                        adaptor.addChild(root_3, stream_second.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(147,14);
                        // com/joestelmach/natty/generated/DateParser.g:147:14: ( interval_conjunction )?
                        if ( stream_interval_conjunction.hasNext() ) {
                            dbg.location(147,14);
                            adaptor.addChild(root_1, stream_interval_conjunction.nextTree());

                        }
                        stream_interval_conjunction.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // com/joestelmach/natty/generated/DateParser.g:150:5: ( PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE )=> PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL ) )
                    {
                    dbg.location(151,5);
                    PENDANT70=(Token)match(input,PENDANT,FOLLOW_PENDANT_in_date_time_alternative1429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PENDANT.add(PENDANT70);

                    dbg.location(151,13);
                    WHITE_SPACE71=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE71);

                    dbg.location(151,25);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_date_time_alternative1433);
                    spelled_or_int_optional_prefix72=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix72.getTree());
                    dbg.location(151,56);
                    WHITE_SPACE73=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE73);

                    dbg.location(152,7);
                    // com/joestelmach/natty/generated/DateParser.g:152:7: ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL ) )
                    int alt25=2;
                    try { dbg.enterSubRule(25);
                    try { dbg.enterDecision(25);

                    switch ( input.LA(1) ) {
                    case JOUR:
                    case SEMAINE:
                    case MOIS:
                    case ANNEE:
                        {
                        alt25=1;
                        }
                        break;
                    case HEURE:
                    case MINUTE:
                    case SECOND:
                        {
                        alt25=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 25, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(25);}

                    switch (alt25) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:152:8: relative_date_span
                            {
                            dbg.location(152,8);
                            pushFollow(FOLLOW_relative_date_span_in_date_time_alternative1444);
                            relative_date_span74=relative_date_span();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relative_date_span.add(relative_date_span74.getTree());


                            // AST REWRITE
                            // elements: spelled_or_int_optional_prefix, relative_date_span
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 152:27: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL )
                            {
                                dbg.location(153,9);
                                // com/joestelmach/natty/generated/DateParser.g:153:9: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                dbg.location(153,11);
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                                dbg.location(154,11);
                                // com/joestelmach/natty/generated/DateParser.g:154:11: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(154,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(154,23);
                                // com/joestelmach/natty/generated/DateParser.g:154:23: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(154,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(154,39);
                                // com/joestelmach/natty/generated/DateParser.g:154:39: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(154,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(154,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(154,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(154,79);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "0"));
                                dbg.location(154,88);
                                adaptor.addChild(root_4, (Object)adaptor.create(SPAN, "day"));

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(155,11);
                                // com/joestelmach/natty/generated/DateParser.g:155:11: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(155,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(155,23);
                                // com/joestelmach/natty/generated/DateParser.g:155:23: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(155,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(155,39);
                                // com/joestelmach/natty/generated/DateParser.g:155:39: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(155,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(155,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(155,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(155,79);
                                adaptor.addChild(root_4, stream_spelled_or_int_optional_prefix.nextTree());
                                dbg.location(155,110);
                                adaptor.addChild(root_4, stream_relative_date_span.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(155,132);
                                adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:156:9: relative_time_span
                            {
                            dbg.location(156,9);
                            pushFollow(FOLLOW_relative_time_span_in_date_time_alternative1537);
                            relative_time_span75=relative_time_span();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relative_time_span.add(relative_time_span75.getTree());


                            // AST REWRITE
                            // elements: relative_time_span, spelled_or_int_optional_prefix
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 156:28: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL )
                            {
                                dbg.location(157,9);
                                // com/joestelmach/natty/generated/DateParser.g:157:9: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                dbg.location(157,11);
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                                dbg.location(158,11);
                                // com/joestelmach/natty/generated/DateParser.g:158:11: ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(158,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(158,23);
                                // com/joestelmach/natty/generated/DateParser.g:158:23: ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(158,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_3);

                                dbg.location(158,39);
                                // com/joestelmach/natty/generated/DateParser.g:158:39: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(158,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(158,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(158,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(158,79);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "0"));
                                dbg.location(158,88);
                                adaptor.addChild(root_4, (Object)adaptor.create(SPAN, "day"));

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(159,11);
                                // com/joestelmach/natty/generated/DateParser.g:159:11: ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(159,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(159,23);
                                // com/joestelmach/natty/generated/DateParser.g:159:23: ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(159,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_3);

                                dbg.location(159,39);
                                // com/joestelmach/natty/generated/DateParser.g:159:39: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(159,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(159,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, ">"));
                                dbg.location(159,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(159,79);
                                adaptor.addChild(root_4, stream_spelled_or_int_optional_prefix.nextTree());
                                dbg.location(159,110);
                                adaptor.addChild(root_4, stream_relative_time_span.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(159,132);
                                adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(25);}


                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // com/joestelmach/natty/generated/DateParser.g:163:5: ( spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE )=> spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) ) )
                    {
                    dbg.location(164,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_date_time_alternative1661);
                    spelled_or_int_optional_prefix76=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix76.getTree());
                    dbg.location(164,36);
                    WHITE_SPACE77=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE77);

                    dbg.location(164,48);
                    // com/joestelmach/natty/generated/DateParser.g:164:48: ( DERNIER | PASSE )
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26);

                    switch ( input.LA(1) ) {
                    case DERNIER:
                        {
                        alt26=1;
                        }
                        break;
                    case PASSE:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:164:49: DERNIER
                            {
                            dbg.location(164,49);
                            DERNIER78=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_date_time_alternative1666); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER78);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:164:59: PASSE
                            {
                            dbg.location(164,59);
                            PASSE79=(Token)match(input,PASSE,FOLLOW_PASSE_in_date_time_alternative1670); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PASSE.add(PASSE79);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}

                    dbg.location(164,66);
                    WHITE_SPACE80=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE80);

                    dbg.location(165,7);
                    // com/joestelmach/natty/generated/DateParser.g:165:7: ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) ) )
                    int alt27=2;
                    try { dbg.enterSubRule(27);
                    try { dbg.enterDecision(27);

                    switch ( input.LA(1) ) {
                    case JOUR:
                    case SEMAINE:
                    case MOIS:
                    case ANNEE:
                        {
                        alt27=1;
                        }
                        break;
                    case HEURE:
                    case MINUTE:
                    case SECOND:
                        {
                        alt27=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 27, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(27);}

                    switch (alt27) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:165:8: relative_date_span
                            {
                            dbg.location(165,8);
                            pushFollow(FOLLOW_relative_date_span_in_date_time_alternative1682);
                            relative_date_span81=relative_date_span();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relative_date_span.add(relative_date_span81.getTree());


                            // AST REWRITE
                            // elements: relative_date_span, spelled_or_int_optional_prefix
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 165:27: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) )
                            {
                                dbg.location(166,9);
                                // com/joestelmach/natty/generated/DateParser.g:166:9: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                dbg.location(166,11);
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                                dbg.location(167,11);
                                // com/joestelmach/natty/generated/DateParser.g:167:11: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(167,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(167,23);
                                // com/joestelmach/natty/generated/DateParser.g:167:23: ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(167,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(167,39);
                                // com/joestelmach/natty/generated/DateParser.g:167:39: ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(167,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(167,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, "<"));
                                dbg.location(167,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(167,79);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "0"));
                                dbg.location(167,88);
                                adaptor.addChild(root_4, (Object)adaptor.create(SPAN, "day"));

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(168,11);
                                // com/joestelmach/natty/generated/DateParser.g:168:11: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(168,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(168,23);
                                // com/joestelmach/natty/generated/DateParser.g:168:23: ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(168,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_3);

                                dbg.location(168,39);
                                // com/joestelmach/natty/generated/DateParser.g:168:39: ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(168,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(168,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, "<"));
                                dbg.location(168,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(168,79);
                                adaptor.addChild(root_4, stream_spelled_or_int_optional_prefix.nextTree());
                                dbg.location(168,110);
                                adaptor.addChild(root_4, stream_relative_date_span.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:169:9: relative_time_span
                            {
                            dbg.location(169,9);
                            pushFollow(FOLLOW_relative_time_span_in_date_time_alternative1773);
                            relative_time_span82=relative_time_span();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relative_time_span.add(relative_time_span82.getTree());


                            // AST REWRITE
                            // elements: spelled_or_int_optional_prefix, relative_time_span
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 169:28: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) )
                            {
                                dbg.location(170,9);
                                // com/joestelmach/natty/generated/DateParser.g:170:9: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                dbg.location(170,11);
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                                dbg.location(171,11);
                                // com/joestelmach/natty/generated/DateParser.g:171:11: ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(171,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(171,23);
                                // com/joestelmach/natty/generated/DateParser.g:171:23: ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(171,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_3);

                                dbg.location(171,39);
                                // com/joestelmach/natty/generated/DateParser.g:171:39: ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(171,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(171,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, "<"));
                                dbg.location(171,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(171,79);
                                adaptor.addChild(root_4, (Object)adaptor.create(INT, "0"));
                                dbg.location(171,88);
                                adaptor.addChild(root_4, (Object)adaptor.create(SPAN, "day"));

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }
                                dbg.location(172,11);
                                // com/joestelmach/natty/generated/DateParser.g:172:11: ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                dbg.location(172,13);
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                                dbg.location(172,23);
                                // com/joestelmach/natty/generated/DateParser.g:172:23: ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) )
                                {
                                Object root_3 = (Object)adaptor.nil();
                                dbg.location(172,25);
                                root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_3);

                                dbg.location(172,39);
                                // com/joestelmach/natty/generated/DateParser.g:172:39: ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span )
                                {
                                Object root_4 = (Object)adaptor.nil();
                                dbg.location(172,41);
                                root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_4);

                                dbg.location(172,46);
                                adaptor.addChild(root_4, (Object)adaptor.create(DIRECTION, "<"));
                                dbg.location(172,61);
                                adaptor.addChild(root_4, (Object)adaptor.create(SEEK_BY, "by_day"));
                                dbg.location(172,79);
                                adaptor.addChild(root_4, stream_spelled_or_int_optional_prefix.nextTree());
                                dbg.location(172,110);
                                adaptor.addChild(root_4, stream_relative_time_span.nextTree());

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(27);}


                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // com/joestelmach/natty/generated/DateParser.g:176:5: ( ( relaxed_day_of_week )? relaxed_day_of_month interval_conjunction relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? )=> ( relaxed_day_of_week )? premier= relaxed_day_of_month interval_conjunction deuxieme= relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )?
                    {
                    dbg.location(177,4);
                    // com/joestelmach/natty/generated/DateParser.g:177:4: ( relaxed_day_of_week )?
                    int alt28=2;
                    try { dbg.enterSubRule(28);
                    try { dbg.enterDecision(28);

                    try {
                        isCyclicDecision = true;
                        alt28 = dfa28.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(28);}

                    switch (alt28) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:177:4: relaxed_day_of_week
                            {
                            dbg.location(177,4);
                            pushFollow(FOLLOW_relaxed_day_of_week_in_date_time_alternative1899);
                            relaxed_day_of_week83=relaxed_day_of_week();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_week.add(relaxed_day_of_week83.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(28);}

                    dbg.location(177,32);
                    pushFollow(FOLLOW_relaxed_day_of_month_in_date_time_alternative1904);
                    premier=relaxed_day_of_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(premier.getTree());
                    dbg.location(177,54);
                    pushFollow(FOLLOW_interval_conjunction_in_date_time_alternative1906);
                    interval_conjunction84=interval_conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_conjunction.add(interval_conjunction84.getTree());
                    dbg.location(177,83);
                    pushFollow(FOLLOW_relaxed_day_of_month_in_date_time_alternative1910);
                    deuxieme=relaxed_day_of_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(deuxieme.getTree());
                    dbg.location(177,105);
                    WHITE_SPACE85=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE85);

                    dbg.location(177,117);
                    pushFollow(FOLLOW_relaxed_month_in_date_time_alternative1914);
                    relaxed_month86=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month86.getTree());
                    dbg.location(177,131);
                    // com/joestelmach/natty/generated/DateParser.g:177:131: ( WHITE_SPACE relaxed_year )?
                    int alt29=2;
                    try { dbg.enterSubRule(29);
                    try { dbg.enterDecision(29);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                case INT_24:
                                case INT_25:
                                case INT_26:
                                case INT_27:
                                case INT_28:
                                case INT_29:
                                case INT_30:
                                case INT_31:
                                case INT_32:
                                case INT_33:
                                case INT_34:
                                case INT_35:
                                case INT_36:
                                case INT_37:
                                case INT_38:
                                case INT_39:
                                case INT_40:
                                case INT_41:
                                case INT_42:
                                case INT_43:
                                case INT_44:
                                case INT_45:
                                case INT_46:
                                case INT_47:
                                case INT_48:
                                case INT_49:
                                case INT_50:
                                case INT_51:
                                case INT_52:
                                case INT_53:
                                case INT_54:
                                case INT_55:
                                case INT_56:
                                case INT_57:
                                case INT_58:
                                case INT_59:
                                case INT_60:
                                case INT_61:
                                case INT_62:
                                case INT_63:
                                case INT_64:
                                case INT_65:
                                case INT_66:
                                case INT_67:
                                case INT_68:
                                case INT_69:
                                case INT_70:
                                case INT_71:
                                case INT_72:
                                case INT_73:
                                case INT_74:
                                case INT_75:
                                case INT_76:
                                case INT_77:
                                case INT_78:
                                case INT_79:
                                case INT_80:
                                case INT_81:
                                case INT_82:
                                case INT_83:
                                case INT_84:
                                case INT_85:
                                case INT_86:
                                case INT_87:
                                case INT_88:
                                case INT_89:
                                case INT_90:
                                case INT_91:
                                case INT_92:
                                case INT_93:
                                case INT_94:
                                case INT_95:
                                case INT_96:
                                case INT_97:
                                case INT_98:
                                case INT_99:
                                    {
                                    alt29=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(29);}

                    switch (alt29) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:177:132: WHITE_SPACE relaxed_year
                            {
                            dbg.location(177,132);
                            WHITE_SPACE87=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_date_time_alternative1917); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE87);

                            dbg.location(177,144);
                            pushFollow(FOLLOW_relaxed_year_in_date_time_alternative1919);
                            relaxed_year88=relaxed_year();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_year.add(relaxed_year88.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(29);}



                    // AST REWRITE
                    // elements: relaxed_month, relaxed_year, relaxed_year, deuxieme, relaxed_month, premier
                    // token labels: 
                    // rule labels: deuxieme, retval, premier
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_deuxieme=new RewriteRuleSubtreeStream(adaptor,"rule deuxieme",deuxieme!=null?deuxieme.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_premier=new RewriteRuleSubtreeStream(adaptor,"rule premier",premier!=null?premier.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 177:158: -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? ) ) ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? ) ) IS_INTERVAL )
                    {
                        dbg.location(178,8);
                        // com/joestelmach/natty/generated/DateParser.g:178:8: ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? ) ) ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? ) ) IS_INTERVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(178,10);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(179,11);
                        // com/joestelmach/natty/generated/DateParser.g:179:11: ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(179,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(179,23);
                        // com/joestelmach/natty/generated/DateParser.g:179:23: ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(179,25);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_DATE, "EXPLICIT_DATE"), root_3);

                        dbg.location(179,39);
                        adaptor.addChild(root_3, stream_relaxed_month.nextTree());
                        dbg.location(179,53);
                        adaptor.addChild(root_3, stream_premier.nextTree());
                        dbg.location(179,62);
                        // com/joestelmach/natty/generated/DateParser.g:179:62: ( relaxed_year )?
                        if ( stream_relaxed_year.hasNext() ) {
                            dbg.location(179,62);
                            adaptor.addChild(root_3, stream_relaxed_year.nextTree());

                        }
                        stream_relaxed_year.reset();

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(180,11);
                        // com/joestelmach/natty/generated/DateParser.g:180:11: ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(180,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_2);

                        dbg.location(180,23);
                        // com/joestelmach/natty/generated/DateParser.g:180:23: ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(180,25);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_DATE, "EXPLICIT_DATE"), root_3);

                        dbg.location(180,39);
                        adaptor.addChild(root_3, stream_relaxed_month.nextTree());
                        dbg.location(180,53);
                        adaptor.addChild(root_3, stream_deuxieme.nextTree());
                        dbg.location(180,63);
                        // com/joestelmach/natty/generated/DateParser.g:180:63: ( relaxed_year )?
                        if ( stream_relaxed_year.hasNext() ) {
                            dbg.location(180,63);
                            adaptor.addChild(root_3, stream_relaxed_year.nextTree());

                        }
                        stream_relaxed_year.reset();

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(181,11);
                        adaptor.addChild(root_1, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // com/joestelmach/natty/generated/DateParser.g:184:5: ( date_time ( conjunction | interval_conjunction ) date_time )=> date_time ( conjunction | interval_conjunction ) date_time
                    {
                    dbg.location(185,5);
                    pushFollow(FOLLOW_date_time_in_date_time_alternative2028);
                    date_time89=date_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date_time.add(date_time89.getTree());
                    dbg.location(185,15);
                    // com/joestelmach/natty/generated/DateParser.g:185:15: ( conjunction | interval_conjunction )
                    int alt30=2;
                    try { dbg.enterSubRule(30);
                    try { dbg.enterDecision(30);

                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(3) ) {
                            case OU:
                            case ET:
                                {
                                alt30=1;
                                }
                                break;
                            case DASH:
                            case AU:
                                {
                                alt30=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 30, 2, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 30, 1, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case WHITE_SPACE:
                        {
                        switch ( input.LA(2) ) {
                        case OU:
                        case ET:
                            {
                            alt30=1;
                            }
                            break;
                        case DASH:
                        case AU:
                            {
                            alt30=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 30, 2, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 30, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(30);}

                    switch (alt30) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:185:16: conjunction
                            {
                            dbg.location(185,16);
                            pushFollow(FOLLOW_conjunction_in_date_time_alternative2031);
                            conjunction90=conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_conjunction.add(conjunction90.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:185:30: interval_conjunction
                            {
                            dbg.location(185,30);
                            pushFollow(FOLLOW_interval_conjunction_in_date_time_alternative2035);
                            interval_conjunction91=interval_conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interval_conjunction.add(interval_conjunction91.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(30);}

                    dbg.location(185,52);
                    pushFollow(FOLLOW_date_time_in_date_time_alternative2038);
                    date_time92=date_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date_time.add(date_time92.getTree());


                    // AST REWRITE
                    // elements: date_time, interval_conjunction, date_time
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 186:7: -> ^( DATE_TIME_ALTERNATIVE date_time date_time ( interval_conjunction )? )
                    {
                        dbg.location(186,10);
                        // com/joestelmach/natty/generated/DateParser.g:186:10: ^( DATE_TIME_ALTERNATIVE date_time date_time ( interval_conjunction )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(186,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(186,34);
                        adaptor.addChild(root_1, stream_date_time.nextTree());
                        dbg.location(186,44);
                        adaptor.addChild(root_1, stream_date_time.nextTree());
                        dbg.location(186,54);
                        // com/joestelmach/natty/generated/DateParser.g:186:54: ( interval_conjunction )?
                        if ( stream_interval_conjunction.hasNext() ) {
                            dbg.location(186,54);
                            adaptor.addChild(root_1, stream_interval_conjunction.nextTree());

                        }
                        stream_interval_conjunction.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // com/joestelmach/natty/generated/DateParser.g:189:5: date_time
                    {
                    dbg.location(189,5);
                    pushFollow(FOLLOW_date_time_in_date_time_alternative2069);
                    date_time93=date_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date_time.add(date_time93.getTree());


                    // AST REWRITE
                    // elements: date_time
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 189:15: -> ^( DATE_TIME_ALTERNATIVE date_time )
                    {
                        dbg.location(189,18);
                        // com/joestelmach/natty/generated/DateParser.g:189:18: ^( DATE_TIME_ALTERNATIVE date_time )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(189,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME_ALTERNATIVE, "DATE_TIME_ALTERNATIVE"), root_1);

                        dbg.location(189,42);
                        adaptor.addChild(root_1, stream_date_time.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(190, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "date_time_alternative");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "date_time_alternative"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // com/joestelmach/natty/generated/DateParser.g:192:3: conjunction : ( COMMA )? WHITE_SPACE ( ET | OU ) WHITE_SPACE ;
    public final DateParser.conjunction_return conjunction() throws RecognitionException {
        DateParser.conjunction_return retval = new DateParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA94=null;
        Token WHITE_SPACE95=null;
        Token set96=null;
        Token WHITE_SPACE97=null;

        Object COMMA94_tree=null;
        Object WHITE_SPACE95_tree=null;
        Object set96_tree=null;
        Object WHITE_SPACE97_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "conjunction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(192, 3);

        try {
            // com/joestelmach/natty/generated/DateParser.g:193:3: ( ( COMMA )? WHITE_SPACE ( ET | OU ) WHITE_SPACE )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:193:5: ( COMMA )? WHITE_SPACE ( ET | OU ) WHITE_SPACE
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(193,5);
            // com/joestelmach/natty/generated/DateParser.g:193:5: ( COMMA )?
            int alt32=2;
            try { dbg.enterSubRule(32);
            try { dbg.enterDecision(32);

            switch ( input.LA(1) ) {
                case COMMA:
                    {
                    alt32=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:193:5: COMMA
                    {
                    dbg.location(193,5);
                    COMMA94=(Token)match(input,COMMA,FOLLOW_COMMA_in_conjunction2094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA94_tree = (Object)adaptor.create(COMMA94);
                    adaptor.addChild(root_0, COMMA94_tree);
                    }

                    }
                    break;

            }
            } finally {dbg.exitSubRule(32);}

            dbg.location(193,12);
            WHITE_SPACE95=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_conjunction2097); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHITE_SPACE95_tree = (Object)adaptor.create(WHITE_SPACE95);
            adaptor.addChild(root_0, WHITE_SPACE95_tree);
            }
            dbg.location(193,24);
            set96=(Token)input.LT(1);
            if ( (input.LA(1)>=OU && input.LA(1)<=ET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set96));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(193,34);
            WHITE_SPACE97=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_conjunction2107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHITE_SPACE97_tree = (Object)adaptor.create(WHITE_SPACE97);
            adaptor.addChild(root_0, WHITE_SPACE97_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(193, 45);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "conjunction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "conjunction"

    public static class interval_conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_conjunction"
    // com/joestelmach/natty/generated/DateParser.g:195:3: interval_conjunction : ( COMMA )? WHITE_SPACE ( AU | DASH ) WHITE_SPACE -> IS_INTERVAL ;
    public final DateParser.interval_conjunction_return interval_conjunction() throws RecognitionException {
        DateParser.interval_conjunction_return retval = new DateParser.interval_conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA98=null;
        Token WHITE_SPACE99=null;
        Token AU100=null;
        Token DASH101=null;
        Token WHITE_SPACE102=null;

        Object COMMA98_tree=null;
        Object WHITE_SPACE99_tree=null;
        Object AU100_tree=null;
        Object DASH101_tree=null;
        Object WHITE_SPACE102_tree=null;
        RewriteRuleTokenStream stream_AU=new RewriteRuleTokenStream(adaptor,"token AU");
        RewriteRuleTokenStream stream_DASH=new RewriteRuleTokenStream(adaptor,"token DASH");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");

        try { dbg.enterRule(getGrammarFileName(), "interval_conjunction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(195, 3);

        try {
            // com/joestelmach/natty/generated/DateParser.g:196:3: ( ( COMMA )? WHITE_SPACE ( AU | DASH ) WHITE_SPACE -> IS_INTERVAL )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:196:5: ( COMMA )? WHITE_SPACE ( AU | DASH ) WHITE_SPACE
            {
            dbg.location(196,5);
            // com/joestelmach/natty/generated/DateParser.g:196:5: ( COMMA )?
            int alt33=2;
            try { dbg.enterSubRule(33);
            try { dbg.enterDecision(33);

            switch ( input.LA(1) ) {
                case COMMA:
                    {
                    alt33=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:196:5: COMMA
                    {
                    dbg.location(196,5);
                    COMMA98=(Token)match(input,COMMA,FOLLOW_COMMA_in_interval_conjunction2121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA98);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(33);}

            dbg.location(196,12);
            WHITE_SPACE99=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_interval_conjunction2124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE99);

            dbg.location(196,24);
            // com/joestelmach/natty/generated/DateParser.g:196:24: ( AU | DASH )
            int alt34=2;
            try { dbg.enterSubRule(34);
            try { dbg.enterDecision(34);

            switch ( input.LA(1) ) {
            case AU:
                {
                alt34=1;
                }
                break;
            case DASH:
                {
                alt34=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(34);}

            switch (alt34) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:196:25: AU
                    {
                    dbg.location(196,25);
                    AU100=(Token)match(input,AU,FOLLOW_AU_in_interval_conjunction2127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AU.add(AU100);


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:196:30: DASH
                    {
                    dbg.location(196,30);
                    DASH101=(Token)match(input,DASH,FOLLOW_DASH_in_interval_conjunction2131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DASH.add(DASH101);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(34);}

            dbg.location(196,36);
            WHITE_SPACE102=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_interval_conjunction2134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE102);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 196:48: -> IS_INTERVAL
            {
                dbg.location(196,51);
                adaptor.addChild(root_0, (Object)adaptor.create(IS_INTERVAL, "IS_INTERVAL"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(196, 62);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "interval_conjunction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "interval_conjunction"

    public static class this_suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "this_suffix"
    // com/joestelmach/natty/generated/DateParser.g:198:3: this_suffix : ( SEMAINE -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) | MOIS -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) | ANNEE -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) ) | WEEKEND -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) );
    public final DateParser.this_suffix_return this_suffix() throws RecognitionException {
        DateParser.this_suffix_return retval = new DateParser.this_suffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMAINE103=null;
        Token MOIS104=null;
        Token ANNEE105=null;
        Token WEEKEND106=null;

        Object SEMAINE103_tree=null;
        Object MOIS104_tree=null;
        Object ANNEE105_tree=null;
        Object WEEKEND106_tree=null;
        RewriteRuleTokenStream stream_WEEKEND=new RewriteRuleTokenStream(adaptor,"token WEEKEND");
        RewriteRuleTokenStream stream_SEMAINE=new RewriteRuleTokenStream(adaptor,"token SEMAINE");
        RewriteRuleTokenStream stream_ANNEE=new RewriteRuleTokenStream(adaptor,"token ANNEE");
        RewriteRuleTokenStream stream_MOIS=new RewriteRuleTokenStream(adaptor,"token MOIS");

        try { dbg.enterRule(getGrammarFileName(), "this_suffix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(198, 3);

        try {
            // com/joestelmach/natty/generated/DateParser.g:199:3: ( SEMAINE -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) | MOIS -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) | ANNEE -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) ) | WEEKEND -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) )
            int alt35=4;
            try { dbg.enterDecision(35);

            switch ( input.LA(1) ) {
            case SEMAINE:
                {
                alt35=1;
                }
                break;
            case MOIS:
                {
                alt35=2;
                }
                break;
            case ANNEE:
                {
                alt35=3;
                }
                break;
            case WEEKEND:
                {
                alt35=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(35);}

            switch (alt35) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:199:5: SEMAINE
                    {
                    dbg.location(199,5);
                    SEMAINE103=(Token)match(input,SEMAINE,FOLLOW_SEMAINE_in_this_suffix2153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMAINE.add(SEMAINE103);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 199:15: -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                    {
                        dbg.location(199,18);
                        // com/joestelmach/natty/generated/DateParser.g:199:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(199,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(199,30);
                        // com/joestelmach/natty/generated/DateParser.g:199:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(199,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(199,46);
                        // com/joestelmach/natty/generated/DateParser.g:199:46: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(199,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(199,62);
                        // com/joestelmach/natty/generated/DateParser.g:199:62: ^( DAY_OF_WEEK INT[\"2\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(199,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(199,76);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "2"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(200,18);
                        // com/joestelmach/natty/generated/DateParser.g:200:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(200,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(200,30);
                        // com/joestelmach/natty/generated/DateParser.g:200:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(200,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(200,46);
                        // com/joestelmach/natty/generated/DateParser.g:200:46: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(200,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(200,62);
                        // com/joestelmach/natty/generated/DateParser.g:200:62: ^( DAY_OF_WEEK INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(200,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(200,76);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:201:5: MOIS
                    {
                    dbg.location(201,5);
                    MOIS104=(Token)match(input,MOIS,FOLLOW_MOIS_in_this_suffix2218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOIS.add(MOIS104);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 201:15: -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) )
                    {
                        dbg.location(201,18);
                        // com/joestelmach/natty/generated/DateParser.g:201:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(201,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(201,30);
                        // com/joestelmach/natty/generated/DateParser.g:201:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(201,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(201,46);
                        // com/joestelmach/natty/generated/DateParser.g:201:46: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(201,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(201,62);
                        // com/joestelmach/natty/generated/DateParser.g:201:62: ^( DAY_OF_MONTH INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(201,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_4);

                        dbg.location(201,77);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(202,18);
                        // com/joestelmach/natty/generated/DateParser.g:202:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(202,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(202,30);
                        // com/joestelmach/natty/generated/DateParser.g:202:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(202,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(202,46);
                        // com/joestelmach/natty/generated/DateParser.g:202:46: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(202,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(202,62);
                        // com/joestelmach/natty/generated/DateParser.g:202:62: ^( DAY_OF_MONTH INT[\"31\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(202,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_4);

                        dbg.location(202,77);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "31"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:203:5: ANNEE
                    {
                    dbg.location(203,5);
                    ANNEE105=(Token)match(input,ANNEE,FOLLOW_ANNEE_in_this_suffix2286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ANNEE.add(ANNEE105);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 203:15: -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) )
                    {
                        dbg.location(203,18);
                        // com/joestelmach/natty/generated/DateParser.g:203:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(203,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(203,30);
                        // com/joestelmach/natty/generated/DateParser.g:203:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(203,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(203,46);
                        // com/joestelmach/natty/generated/DateParser.g:203:46: ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(203,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(203,62);
                        // com/joestelmach/natty/generated/DateParser.g:203:62: ^( DAY_OF_YEAR INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(203,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_4);

                        dbg.location(203,76);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(204,18);
                        // com/joestelmach/natty/generated/DateParser.g:204:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(204,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(204,30);
                        // com/joestelmach/natty/generated/DateParser.g:204:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(204,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(204,46);
                        // com/joestelmach/natty/generated/DateParser.g:204:46: ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(204,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(204,62);
                        // com/joestelmach/natty/generated/DateParser.g:204:62: ^( DAY_OF_YEAR INT[\"366\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(204,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_4);

                        dbg.location(204,76);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "366"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:205:5: WEEKEND
                    {
                    dbg.location(205,5);
                    WEEKEND106=(Token)match(input,WEEKEND,FOLLOW_WEEKEND_in_this_suffix2353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WEEKEND.add(WEEKEND106);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 205:15: -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                    {
                        dbg.location(205,18);
                        // com/joestelmach/natty/generated/DateParser.g:205:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(205,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(205,30);
                        // com/joestelmach/natty/generated/DateParser.g:205:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(205,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(205,46);
                        // com/joestelmach/natty/generated/DateParser.g:205:46: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(205,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(205,62);
                        // com/joestelmach/natty/generated/DateParser.g:205:62: ^( DAY_OF_WEEK INT[\"7\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(205,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(205,76);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "7"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(206,18);
                        // com/joestelmach/natty/generated/DateParser.g:206:18: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(206,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(206,30);
                        // com/joestelmach/natty/generated/DateParser.g:206:30: ^( RELATIVE_DATE ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(206,32);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(206,46);
                        // com/joestelmach/natty/generated/DateParser.g:206:46: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(206,48);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(206,62);
                        // com/joestelmach/natty/generated/DateParser.g:206:62: ^( DAY_OF_WEEK INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(206,64);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(206,76);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(207, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "this_suffix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "this_suffix"

    public static class relative_date_interval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_date_interval"
    // com/joestelmach/natty/generated/DateParser.g:209:1: relative_date_interval : ( SEMAINE WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) | MOIS WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) | ANNEE WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) ) | WEEKEND WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) );
    public final DateParser.relative_date_interval_return relative_date_interval() throws RecognitionException {
        DateParser.relative_date_interval_return retval = new DateParser.relative_date_interval_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMAINE107=null;
        Token WHITE_SPACE108=null;
        Token MOIS110=null;
        Token WHITE_SPACE111=null;
        Token ANNEE113=null;
        Token WHITE_SPACE114=null;
        Token WEEKEND116=null;
        Token WHITE_SPACE117=null;
        DateParser.interval_direction_prefix_return interval_direction_prefix109 = null;

        DateParser.interval_direction_prefix_return interval_direction_prefix112 = null;

        DateParser.interval_direction_prefix_return interval_direction_prefix115 = null;

        DateParser.interval_direction_prefix_return interval_direction_prefix118 = null;


        Object SEMAINE107_tree=null;
        Object WHITE_SPACE108_tree=null;
        Object MOIS110_tree=null;
        Object WHITE_SPACE111_tree=null;
        Object ANNEE113_tree=null;
        Object WHITE_SPACE114_tree=null;
        Object WEEKEND116_tree=null;
        Object WHITE_SPACE117_tree=null;
        RewriteRuleTokenStream stream_WEEKEND=new RewriteRuleTokenStream(adaptor,"token WEEKEND");
        RewriteRuleTokenStream stream_SEMAINE=new RewriteRuleTokenStream(adaptor,"token SEMAINE");
        RewriteRuleTokenStream stream_ANNEE=new RewriteRuleTokenStream(adaptor,"token ANNEE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_MOIS=new RewriteRuleTokenStream(adaptor,"token MOIS");
        RewriteRuleSubtreeStream stream_interval_direction_prefix=new RewriteRuleSubtreeStream(adaptor,"rule interval_direction_prefix");
        try { dbg.enterRule(getGrammarFileName(), "relative_date_interval");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(209, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:210:3: ( SEMAINE WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) | MOIS WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) | ANNEE WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) ) | WEEKEND WHITE_SPACE interval_direction_prefix -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) ) )
            int alt36=4;
            try { dbg.enterDecision(36);

            switch ( input.LA(1) ) {
            case SEMAINE:
                {
                alt36=1;
                }
                break;
            case MOIS:
                {
                alt36=2;
                }
                break;
            case ANNEE:
                {
                alt36=3;
                }
                break;
            case WEEKEND:
                {
                alt36=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:210:5: SEMAINE WHITE_SPACE interval_direction_prefix
                    {
                    dbg.location(210,5);
                    SEMAINE107=(Token)match(input,SEMAINE,FOLLOW_SEMAINE_in_relative_date_interval2427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMAINE.add(SEMAINE107);

                    dbg.location(210,13);
                    WHITE_SPACE108=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date_interval2429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE108);

                    dbg.location(210,25);
                    pushFollow(FOLLOW_interval_direction_prefix_in_relative_date_interval2431);
                    interval_direction_prefix109=interval_direction_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_direction_prefix.add(interval_direction_prefix109.getTree());


                    // AST REWRITE
                    // elements: interval_direction_prefix, interval_direction_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 210:51: -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                    {
                        dbg.location(211,7);
                        // com/joestelmach/natty/generated/DateParser.g:211:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(211,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(211,19);
                        // com/joestelmach/natty/generated/DateParser.g:211:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(211,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(211,35);
                        // com/joestelmach/natty/generated/DateParser.g:211:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(211,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(211,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(211,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(211,87);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(211,96);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "week"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(211,110);
                        // com/joestelmach/natty/generated/DateParser.g:211:110: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(211,112);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(211,126);
                        // com/joestelmach/natty/generated/DateParser.g:211:126: ^( DAY_OF_WEEK INT[\"2\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(211,128);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(211,140);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "2"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(212,7);
                        // com/joestelmach/natty/generated/DateParser.g:212:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(212,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(212,19);
                        // com/joestelmach/natty/generated/DateParser.g:212:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(212,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(212,35);
                        // com/joestelmach/natty/generated/DateParser.g:212:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(212,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(212,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(212,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(212,87);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(212,96);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "week"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(212,110);
                        // com/joestelmach/natty/generated/DateParser.g:212:110: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(212,112);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(212,126);
                        // com/joestelmach/natty/generated/DateParser.g:212:126: ^( DAY_OF_WEEK INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(212,128);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(212,140);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:214:5: MOIS WHITE_SPACE interval_direction_prefix
                    {
                    dbg.location(214,5);
                    MOIS110=(Token)match(input,MOIS,FOLLOW_MOIS_in_relative_date_interval2522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOIS.add(MOIS110);

                    dbg.location(214,10);
                    WHITE_SPACE111=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date_interval2524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE111);

                    dbg.location(214,22);
                    pushFollow(FOLLOW_interval_direction_prefix_in_relative_date_interval2526);
                    interval_direction_prefix112=interval_direction_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_direction_prefix.add(interval_direction_prefix112.getTree());


                    // AST REWRITE
                    // elements: interval_direction_prefix, interval_direction_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 214:51: -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) )
                    {
                        dbg.location(215,7);
                        // com/joestelmach/natty/generated/DateParser.g:215:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(215,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(215,19);
                        // com/joestelmach/natty/generated/DateParser.g:215:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(215,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(215,35);
                        // com/joestelmach/natty/generated/DateParser.g:215:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(215,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(215,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(215,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_month"));
                        dbg.location(215,88);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(215,97);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "month"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(215,112);
                        // com/joestelmach/natty/generated/DateParser.g:215:112: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(215,114);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(215,128);
                        // com/joestelmach/natty/generated/DateParser.g:215:128: ^( DAY_OF_MONTH INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(215,130);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_4);

                        dbg.location(215,143);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(216,7);
                        // com/joestelmach/natty/generated/DateParser.g:216:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(216,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(216,19);
                        // com/joestelmach/natty/generated/DateParser.g:216:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(216,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(216,35);
                        // com/joestelmach/natty/generated/DateParser.g:216:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_month\"] INT[\"1\"] SPAN[\"month\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(216,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(216,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(216,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_month"));
                        dbg.location(216,88);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(216,97);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "month"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(216,112);
                        // com/joestelmach/natty/generated/DateParser.g:216:112: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(216,114);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(216,128);
                        // com/joestelmach/natty/generated/DateParser.g:216:128: ^( DAY_OF_MONTH INT[\"31\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(216,130);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_4);

                        dbg.location(216,143);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "31"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:218:5: ANNEE WHITE_SPACE interval_direction_prefix
                    {
                    dbg.location(218,5);
                    ANNEE113=(Token)match(input,ANNEE,FOLLOW_ANNEE_in_relative_date_interval2620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ANNEE.add(ANNEE113);

                    dbg.location(218,11);
                    WHITE_SPACE114=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date_interval2622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE114);

                    dbg.location(218,23);
                    pushFollow(FOLLOW_interval_direction_prefix_in_relative_date_interval2624);
                    interval_direction_prefix115=interval_direction_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_direction_prefix.add(interval_direction_prefix115.getTree());


                    // AST REWRITE
                    // elements: interval_direction_prefix, interval_direction_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 218:51: -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) )
                    {
                        dbg.location(219,7);
                        // com/joestelmach/natty/generated/DateParser.g:219:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(219,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(219,19);
                        // com/joestelmach/natty/generated/DateParser.g:219:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(219,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(219,35);
                        // com/joestelmach/natty/generated/DateParser.g:219:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(219,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(219,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(219,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_year"));
                        dbg.location(219,87);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(219,96);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "year"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(219,110);
                        // com/joestelmach/natty/generated/DateParser.g:219:110: ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(219,112);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(219,126);
                        // com/joestelmach/natty/generated/DateParser.g:219:126: ^( DAY_OF_YEAR INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(219,128);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_4);

                        dbg.location(219,140);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(220,7);
                        // com/joestelmach/natty/generated/DateParser.g:220:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(220,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(220,19);
                        // com/joestelmach/natty/generated/DateParser.g:220:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(220,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(220,35);
                        // com/joestelmach/natty/generated/DateParser.g:220:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_year\"] INT[\"1\"] SPAN[\"year\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(220,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(220,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(220,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_year"));
                        dbg.location(220,87);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(220,96);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "year"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(220,110);
                        // com/joestelmach/natty/generated/DateParser.g:220:110: ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(220,112);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(220,126);
                        // com/joestelmach/natty/generated/DateParser.g:220:126: ^( DAY_OF_YEAR INT[\"366\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(220,128);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_4);

                        dbg.location(220,140);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "366"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:222:5: WEEKEND WHITE_SPACE interval_direction_prefix
                    {
                    dbg.location(222,5);
                    WEEKEND116=(Token)match(input,WEEKEND,FOLLOW_WEEKEND_in_relative_date_interval2717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WEEKEND.add(WEEKEND116);

                    dbg.location(222,13);
                    WHITE_SPACE117=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date_interval2719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE117);

                    dbg.location(222,25);
                    pushFollow(FOLLOW_interval_direction_prefix_in_relative_date_interval2721);
                    interval_direction_prefix118=interval_direction_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_direction_prefix.add(interval_direction_prefix118.getTree());


                    // AST REWRITE
                    // elements: interval_direction_prefix, interval_direction_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 222:51: -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                    {
                        dbg.location(223,7);
                        // com/joestelmach/natty/generated/DateParser.g:223:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(223,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(223,19);
                        // com/joestelmach/natty/generated/DateParser.g:223:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(223,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(223,35);
                        // com/joestelmach/natty/generated/DateParser.g:223:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(223,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(223,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(223,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(223,87);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(223,96);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "week"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(223,110);
                        // com/joestelmach/natty/generated/DateParser.g:223:110: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"7\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(223,112);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(223,126);
                        // com/joestelmach/natty/generated/DateParser.g:223:126: ^( DAY_OF_WEEK INT[\"7\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(223,128);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(223,140);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "7"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(224,7);
                        // com/joestelmach/natty/generated/DateParser.g:224:7: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(224,9);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(224,19);
                        // com/joestelmach/natty/generated/DateParser.g:224:19: ^( RELATIVE_DATE ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] ) ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(224,21);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(224,35);
                        // com/joestelmach/natty/generated/DateParser.g:224:35: ^( SEEK interval_direction_prefix SEEK_BY[\"by_week\"] INT[\"1\"] SPAN[\"week\"] )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(224,37);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(224,42);
                        adaptor.addChild(root_3, stream_interval_direction_prefix.nextTree());
                        dbg.location(224,68);
                        adaptor.addChild(root_3, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(224,87);
                        adaptor.addChild(root_3, (Object)adaptor.create(INT, "1"));
                        dbg.location(224,96);
                        adaptor.addChild(root_3, (Object)adaptor.create(SPAN, "week"));

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(224,110);
                        // com/joestelmach/natty/generated/DateParser.g:224:110: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"1\"] ) )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(224,112);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(224,126);
                        // com/joestelmach/natty/generated/DateParser.g:224:126: ^( DAY_OF_WEEK INT[\"1\"] )
                        {
                        Object root_4 = (Object)adaptor.nil();
                        dbg.location(224,128);
                        root_4 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_4);

                        dbg.location(224,140);
                        adaptor.addChild(root_4, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(225, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_date_interval");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_date_interval"

    public static class interval_direction_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_direction_prefix"
    // com/joestelmach/natty/generated/DateParser.g:227:3: interval_direction_prefix : ( DERNIER -> DIRECTION[\"<\"] | SUIVANT -> DIRECTION[\">\"] | PASSE -> DIRECTION[\"<\"] );
    public final DateParser.interval_direction_prefix_return interval_direction_prefix() throws RecognitionException {
        DateParser.interval_direction_prefix_return retval = new DateParser.interval_direction_prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DERNIER119=null;
        Token SUIVANT120=null;
        Token PASSE121=null;

        Object DERNIER119_tree=null;
        Object SUIVANT120_tree=null;
        Object PASSE121_tree=null;
        RewriteRuleTokenStream stream_PASSE=new RewriteRuleTokenStream(adaptor,"token PASSE");
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_SUIVANT=new RewriteRuleTokenStream(adaptor,"token SUIVANT");

        try { dbg.enterRule(getGrammarFileName(), "interval_direction_prefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(227, 3);

        try {
            // com/joestelmach/natty/generated/DateParser.g:228:3: ( DERNIER -> DIRECTION[\"<\"] | SUIVANT -> DIRECTION[\">\"] | PASSE -> DIRECTION[\"<\"] )
            int alt37=3;
            try { dbg.enterDecision(37);

            switch ( input.LA(1) ) {
            case DERNIER:
                {
                alt37=1;
                }
                break;
            case SUIVANT:
                {
                alt37=2;
                }
                break;
            case PASSE:
                {
                alt37=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:228:5: DERNIER
                    {
                    dbg.location(228,5);
                    DERNIER119=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_interval_direction_prefix2821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER119);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 228:17: -> DIRECTION[\"<\"]
                    {
                        dbg.location(228,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:229:5: SUIVANT
                    {
                    dbg.location(229,5);
                    SUIVANT120=(Token)match(input,SUIVANT,FOLLOW_SUIVANT_in_interval_direction_prefix2836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUIVANT.add(SUIVANT120);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 229:17: -> DIRECTION[\">\"]
                    {
                        dbg.location(229,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:230:5: PASSE
                    {
                    dbg.location(230,5);
                    PASSE121=(Token)match(input,PASSE,FOLLOW_PASSE_in_interval_direction_prefix2851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PASSE.add(PASSE121);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 230:17: -> DIRECTION[\"<\"]
                    {
                        dbg.location(230,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(231, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "interval_direction_prefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "interval_direction_prefix"

    public static class alternative_day_of_month_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_day_of_month_list"
    // com/joestelmach/natty/generated/DateParser.g:233:1: alternative_day_of_month_list : ( ( ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ ) ( date_time_separator explicit_time )? ) -> ( ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month relaxed_day_of_month ) ( explicit_time )? ) )+ interval_conjunction | ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month ( date_time_separator explicit_time )? -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $second) ( explicit_time )? ) | ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix ( date_time_separator explicit_time )? -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $second) ( explicit_time )? ) );
    public final DateParser.alternative_day_of_month_list_return alternative_day_of_month_list() throws RecognitionException {
        DateParser.alternative_day_of_month_list_return retval = new DateParser.alternative_day_of_month_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE125=null;
        Token WHITE_SPACE132=null;
        Token WHITE_SPACE137=null;
        Token WHITE_SPACE139=null;
        DateParser.explicit_day_of_month_part_return first = null;

        DateParser.explicit_day_of_month_part_return second = null;

        DateParser.relaxed_day_of_week_return relaxed_day_of_week122 = null;

        DateParser.relaxed_day_of_month_return relaxed_day_of_month123 = null;

        DateParser.relaxed_month_return relaxed_month124 = null;

        DateParser.conjunction_return conjunction126 = null;

        DateParser.interval_conjunction_return interval_conjunction127 = null;

        DateParser.relaxed_day_of_month_return relaxed_day_of_month128 = null;

        DateParser.date_time_separator_return date_time_separator129 = null;

        DateParser.explicit_time_return explicit_time130 = null;

        DateParser.conjunction_return conjunction131 = null;

        DateParser.explicit_relative_month_return explicit_relative_month133 = null;

        DateParser.date_time_separator_return date_time_separator134 = null;

        DateParser.explicit_time_return explicit_time135 = null;

        DateParser.conjunction_return conjunction136 = null;

        DateParser.explicit_relative_month_return explicit_relative_month138 = null;

        DateParser.prefix_return prefix140 = null;

        DateParser.date_time_separator_return date_time_separator141 = null;

        DateParser.explicit_time_return explicit_time142 = null;


        Object WHITE_SPACE125_tree=null;
        Object WHITE_SPACE132_tree=null;
        Object WHITE_SPACE137_tree=null;
        Object WHITE_SPACE139_tree=null;
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_date_time_separator=new RewriteRuleSubtreeStream(adaptor,"rule date_time_separator");
        RewriteRuleSubtreeStream stream_explicit_relative_month=new RewriteRuleSubtreeStream(adaptor,"rule explicit_relative_month");
        RewriteRuleSubtreeStream stream_relaxed_day_of_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_month");
        RewriteRuleSubtreeStream stream_relaxed_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_month");
        RewriteRuleSubtreeStream stream_relaxed_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_week");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_conjunction=new RewriteRuleSubtreeStream(adaptor,"rule conjunction");
        RewriteRuleSubtreeStream stream_explicit_day_of_month_part=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_month_part");
        RewriteRuleSubtreeStream stream_interval_conjunction=new RewriteRuleSubtreeStream(adaptor,"rule interval_conjunction");
        RewriteRuleSubtreeStream stream_explicit_time=new RewriteRuleSubtreeStream(adaptor,"rule explicit_time");
        try { dbg.enterRule(getGrammarFileName(), "alternative_day_of_month_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(233, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:235:3: ( ( ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ ) ( date_time_separator explicit_time )? ) -> ( ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month relaxed_day_of_month ) ( explicit_time )? ) )+ interval_conjunction | ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month ( date_time_separator explicit_time )? -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $second) ( explicit_time )? ) | ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix ( date_time_separator explicit_time )? -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $second) ( explicit_time )? ) )
            int alt44=3;
            try { dbg.enterDecision(44);

            try {
                isCyclicDecision = true;
                alt44 = dfa44.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:235:5: ( ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ ) ( date_time_separator explicit_time )? )
                    {
                    dbg.location(235,5);
                    // com/joestelmach/natty/generated/DateParser.g:235:5: ( ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ ) ( date_time_separator explicit_time )? )
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:235:6: ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ ) ( date_time_separator explicit_time )?
                    {
                    dbg.location(235,6);
                    // com/joestelmach/natty/generated/DateParser.g:235:6: ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ )
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:235:7: ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+
                    {
                    dbg.location(235,7);
                    // com/joestelmach/natty/generated/DateParser.g:235:7: ( relaxed_day_of_week )?
                    int alt38=2;
                    try { dbg.enterSubRule(38);
                    try { dbg.enterDecision(38);

                    try {
                        isCyclicDecision = true;
                        alt38 = dfa38.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(38);}

                    switch (alt38) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:235:7: relaxed_day_of_week
                            {
                            dbg.location(235,7);
                            pushFollow(FOLLOW_relaxed_day_of_week_in_alternative_day_of_month_list2882);
                            relaxed_day_of_week122=relaxed_day_of_week();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_week.add(relaxed_day_of_week122.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(38);}

                    dbg.location(235,28);
                    pushFollow(FOLLOW_relaxed_day_of_month_in_alternative_day_of_month_list2885);
                    relaxed_day_of_month123=relaxed_day_of_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(relaxed_day_of_month123.getTree());
                    dbg.location(235,49);
                    pushFollow(FOLLOW_relaxed_month_in_alternative_day_of_month_list2887);
                    relaxed_month124=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month124.getTree());
                    dbg.location(235,63);
                    WHITE_SPACE125=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list2889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE125);

                    dbg.location(235,75);
                    // com/joestelmach/natty/generated/DateParser.g:235:75: ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+
                    int cnt40=0;
                    try { dbg.enterSubRule(40);

                    loop40:
                    do {
                        int alt40=2;
                        try { dbg.enterDecision(40);

                        switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                            case DASH:
                            case OU:
                            case ET:
                            case AU:
                                {
                                alt40=1;
                                }
                                break;

                            }

                            }
                            break;
                        case COMMA:
                            {
                            switch ( input.LA(2) ) {
                            case WHITE_SPACE:
                                {
                                switch ( input.LA(3) ) {
                                case DASH:
                                case OU:
                                case ET:
                                case AU:
                                    {
                                    alt40=1;
                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        } finally {dbg.exitDecision(40);}

                        switch (alt40) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // com/joestelmach/natty/generated/DateParser.g:235:76: ( conjunction | interval_conjunction ) relaxed_day_of_month
                    	    {
                    	    dbg.location(235,76);
                    	    // com/joestelmach/natty/generated/DateParser.g:235:76: ( conjunction | interval_conjunction )
                    	    int alt39=2;
                    	    try { dbg.enterSubRule(39);
                    	    try { dbg.enterDecision(39);

                    	    switch ( input.LA(1) ) {
                    	    case COMMA:
                    	        {
                    	        switch ( input.LA(2) ) {
                    	        case WHITE_SPACE:
                    	            {
                    	            switch ( input.LA(3) ) {
                    	            case OU:
                    	            case ET:
                    	                {
                    	                alt39=1;
                    	                }
                    	                break;
                    	            case DASH:
                    	            case AU:
                    	                {
                    	                alt39=2;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 39, 2, input);

                    	                dbg.recognitionException(nvae);
                    	                throw nvae;
                    	            }

                    	            }
                    	            break;
                    	        default:
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 39, 1, input);

                    	            dbg.recognitionException(nvae);
                    	            throw nvae;
                    	        }

                    	        }
                    	        break;
                    	    case WHITE_SPACE:
                    	        {
                    	        switch ( input.LA(2) ) {
                    	        case OU:
                    	        case ET:
                    	            {
                    	            alt39=1;
                    	            }
                    	            break;
                    	        case DASH:
                    	        case AU:
                    	            {
                    	            alt39=2;
                    	            }
                    	            break;
                    	        default:
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 39, 2, input);

                    	            dbg.recognitionException(nvae);
                    	            throw nvae;
                    	        }

                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 39, 0, input);

                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }

                    	    } finally {dbg.exitDecision(39);}

                    	    switch (alt39) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // com/joestelmach/natty/generated/DateParser.g:235:77: conjunction
                    	            {
                    	            dbg.location(235,77);
                    	            pushFollow(FOLLOW_conjunction_in_alternative_day_of_month_list2893);
                    	            conjunction126=conjunction();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_conjunction.add(conjunction126.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // com/joestelmach/natty/generated/DateParser.g:235:91: interval_conjunction
                    	            {
                    	            dbg.location(235,91);
                    	            pushFollow(FOLLOW_interval_conjunction_in_alternative_day_of_month_list2897);
                    	            interval_conjunction127=interval_conjunction();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_interval_conjunction.add(interval_conjunction127.getTree());

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(39);}

                    	    dbg.location(235,113);
                    	    pushFollow(FOLLOW_relaxed_day_of_month_in_alternative_day_of_month_list2900);
                    	    relaxed_day_of_month128=relaxed_day_of_month();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(relaxed_day_of_month128.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt40++;
                    } while (true);
                    } finally {dbg.exitSubRule(40);}


                    }

                    dbg.location(235,137);
                    // com/joestelmach/natty/generated/DateParser.g:235:137: ( date_time_separator explicit_time )?
                    int alt41=2;
                    try { dbg.enterSubRule(41);
                    try { dbg.enterDecision(41);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt41=1;
                                    }
                                    break;
                            }

                            }
                            break;
                        case COMMA:
                            {
                            alt41=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(41);}

                    switch (alt41) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:235:138: date_time_separator explicit_time
                            {
                            dbg.location(235,138);
                            pushFollow(FOLLOW_date_time_separator_in_alternative_day_of_month_list2906);
                            date_time_separator129=date_time_separator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator129.getTree());
                            dbg.location(235,158);
                            pushFollow(FOLLOW_explicit_time_in_alternative_day_of_month_list2908);
                            explicit_time130=explicit_time();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time130.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(41);}


                    }



                    // AST REWRITE
                    // elements: interval_conjunction, explicit_time, relaxed_day_of_month, relaxed_month
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 236:7: -> ( ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month relaxed_day_of_month ) ( explicit_time )? ) )+ interval_conjunction
                    {
                        dbg.location(236,10);
                        if ( !(stream_relaxed_day_of_month.hasNext()||stream_relaxed_month.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_relaxed_day_of_month.hasNext()||stream_relaxed_month.hasNext() ) {
                            dbg.location(236,10);
                            // com/joestelmach/natty/generated/DateParser.g:236:10: ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month relaxed_day_of_month ) ( explicit_time )? )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            dbg.location(236,12);
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                            dbg.location(236,22);
                            // com/joestelmach/natty/generated/DateParser.g:236:22: ^( EXPLICIT_DATE relaxed_month relaxed_day_of_month )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            dbg.location(236,24);
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_DATE, "EXPLICIT_DATE"), root_2);

                            dbg.location(236,38);
                            adaptor.addChild(root_2, stream_relaxed_month.nextTree());
                            dbg.location(236,52);
                            adaptor.addChild(root_2, stream_relaxed_day_of_month.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }
                            dbg.location(236,74);
                            // com/joestelmach/natty/generated/DateParser.g:236:74: ( explicit_time )?
                            if ( stream_explicit_time.hasNext() ) {
                                dbg.location(236,74);
                                adaptor.addChild(root_1, stream_explicit_time.nextTree());

                            }
                            stream_explicit_time.reset();

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_relaxed_day_of_month.reset();
                        stream_relaxed_month.reset();
                        dbg.location(236,91);
                        adaptor.addChild(root_0, stream_interval_conjunction.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:239:5: ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month ( date_time_separator explicit_time )?
                    {
                    dbg.location(240,12);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list2970);
                    first=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(first.getTree());
                    dbg.location(240,40);
                    pushFollow(FOLLOW_conjunction_in_alternative_day_of_month_list2972);
                    conjunction131=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conjunction.add(conjunction131.getTree());
                    dbg.location(240,58);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list2976);
                    second=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(second.getTree());
                    dbg.location(240,86);
                    WHITE_SPACE132=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list2978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE132);

                    dbg.location(240,98);
                    pushFollow(FOLLOW_explicit_relative_month_in_alternative_day_of_month_list2980);
                    explicit_relative_month133=explicit_relative_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_relative_month.add(explicit_relative_month133.getTree());
                    dbg.location(240,122);
                    // com/joestelmach/natty/generated/DateParser.g:240:122: ( date_time_separator explicit_time )?
                    int alt42=2;
                    try { dbg.enterSubRule(42);
                    try { dbg.enterDecision(42);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt42=1;
                                    }
                                    break;
                            }

                            }
                            break;
                        case COMMA:
                            {
                            alt42=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(42);}

                    switch (alt42) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:240:123: date_time_separator explicit_time
                            {
                            dbg.location(240,123);
                            pushFollow(FOLLOW_date_time_separator_in_alternative_day_of_month_list2983);
                            date_time_separator134=date_time_separator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator134.getTree());
                            dbg.location(240,143);
                            pushFollow(FOLLOW_explicit_time_in_alternative_day_of_month_list2985);
                            explicit_time135=explicit_time();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time135.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(42);}



                    // AST REWRITE
                    // elements: explicit_time, second, first, explicit_relative_month, explicit_relative_month, explicit_time
                    // token labels: 
                    // rule labels: retval, second, first
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_second=new RewriteRuleSubtreeStream(adaptor,"rule second",second!=null?second.tree:null);
                    RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 241:9: -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $second) ( explicit_time )? )
                    {
                        dbg.location(241,12);
                        // com/joestelmach/natty/generated/DateParser.g:241:12: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $first) ( explicit_time )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(241,14);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(241,24);
                        // com/joestelmach/natty/generated/DateParser.g:241:24: ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $first)
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(241,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(241,40);
                        // com/joestelmach/natty/generated/DateParser.g:241:40: ^( EXPLICIT_SEEK explicit_relative_month )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(241,42);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(241,56);
                        adaptor.addChild(root_3, stream_explicit_relative_month.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(241,81);
                        adaptor.addChild(root_2, stream_first.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(241,89);
                        // com/joestelmach/natty/generated/DateParser.g:241:89: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(241,89);
                            adaptor.addChild(root_1, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(242,12);
                        // com/joestelmach/natty/generated/DateParser.g:242:12: ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $second) ( explicit_time )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(242,14);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(242,24);
                        // com/joestelmach/natty/generated/DateParser.g:242:24: ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $second)
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(242,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(242,40);
                        // com/joestelmach/natty/generated/DateParser.g:242:40: ^( EXPLICIT_SEEK explicit_relative_month )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(242,42);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_3);

                        dbg.location(242,56);
                        adaptor.addChild(root_3, stream_explicit_relative_month.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(242,81);
                        adaptor.addChild(root_2, stream_second.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(242,90);
                        // com/joestelmach/natty/generated/DateParser.g:242:90: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(242,90);
                            adaptor.addChild(root_1, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:245:5: ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix ( date_time_separator explicit_time )?
                    {
                    dbg.location(246,12);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list3085);
                    first=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(first.getTree());
                    dbg.location(246,40);
                    pushFollow(FOLLOW_conjunction_in_alternative_day_of_month_list3087);
                    conjunction136=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conjunction.add(conjunction136.getTree());
                    dbg.location(246,58);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list3091);
                    second=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(second.getTree());
                    dbg.location(246,86);
                    WHITE_SPACE137=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list3093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE137);

                    dbg.location(246,98);
                    pushFollow(FOLLOW_explicit_relative_month_in_alternative_day_of_month_list3095);
                    explicit_relative_month138=explicit_relative_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_relative_month.add(explicit_relative_month138.getTree());
                    dbg.location(246,122);
                    WHITE_SPACE139=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list3097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE139);

                    dbg.location(246,134);
                    pushFollow(FOLLOW_prefix_in_alternative_day_of_month_list3099);
                    prefix140=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix140.getTree());
                    dbg.location(246,141);
                    // com/joestelmach/natty/generated/DateParser.g:246:141: ( date_time_separator explicit_time )?
                    int alt43=2;
                    try { dbg.enterSubRule(43);
                    try { dbg.enterDecision(43);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt43=1;
                                    }
                                    break;
                            }

                            }
                            break;
                        case COMMA:
                            {
                            alt43=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(43);}

                    switch (alt43) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:246:142: date_time_separator explicit_time
                            {
                            dbg.location(246,142);
                            pushFollow(FOLLOW_date_time_separator_in_alternative_day_of_month_list3102);
                            date_time_separator141=date_time_separator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator141.getTree());
                            dbg.location(246,162);
                            pushFollow(FOLLOW_explicit_time_in_alternative_day_of_month_list3104);
                            explicit_time142=explicit_time();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time142.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(43);}



                    // AST REWRITE
                    // elements: explicit_relative_month, prefix, explicit_relative_month, second, explicit_time, first, explicit_time, prefix
                    // token labels: 
                    // rule labels: retval, second, first
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_second=new RewriteRuleSubtreeStream(adaptor,"rule second",second!=null?second.tree:null);
                    RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 247:9: -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $second) ( explicit_time )? )
                    {
                        dbg.location(247,12);
                        // com/joestelmach/natty/generated/DateParser.g:247:12: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $first) ( explicit_time )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(247,14);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(247,24);
                        // com/joestelmach/natty/generated/DateParser.g:247:24: ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $first)
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(247,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(247,40);
                        // com/joestelmach/natty/generated/DateParser.g:247:40: ^( SEEK prefix explicit_relative_month )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(247,42);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(247,47);
                        adaptor.addChild(root_3, stream_prefix.nextTree());
                        dbg.location(247,54);
                        adaptor.addChild(root_3, stream_explicit_relative_month.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(247,79);
                        adaptor.addChild(root_2, stream_first.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(247,87);
                        // com/joestelmach/natty/generated/DateParser.g:247:87: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(247,87);
                            adaptor.addChild(root_1, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(248,12);
                        // com/joestelmach/natty/generated/DateParser.g:248:12: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $second) ( explicit_time )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(248,14);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                        dbg.location(248,24);
                        // com/joestelmach/natty/generated/DateParser.g:248:24: ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $second)
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(248,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                        dbg.location(248,40);
                        // com/joestelmach/natty/generated/DateParser.g:248:40: ^( SEEK prefix explicit_relative_month )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        dbg.location(248,42);
                        root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                        dbg.location(248,47);
                        adaptor.addChild(root_3, stream_prefix.nextTree());
                        dbg.location(248,54);
                        adaptor.addChild(root_3, stream_explicit_relative_month.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        dbg.location(248,79);
                        adaptor.addChild(root_2, stream_second.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(248,88);
                        // com/joestelmach/natty/generated/DateParser.g:248:88: ( explicit_time )?
                        if ( stream_explicit_time.hasNext() ) {
                            dbg.location(248,88);
                            adaptor.addChild(root_1, stream_explicit_time.nextTree());

                        }
                        stream_explicit_time.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(249, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "alternative_day_of_month_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "alternative_day_of_month_list"

    public static class alternative_day_of_week_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_day_of_week_list"
    // com/joestelmach/natty/generated/DateParser.g:251:1: alternative_day_of_week_list : day_of_week WHITE_SPACE alternative_direction ( day_of_week_list_separator day_of_week )+ ( date_time_separator explicit_time )? -> ( ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) )+ ;
    public final DateParser.alternative_day_of_week_list_return alternative_day_of_week_list() throws RecognitionException {
        DateParser.alternative_day_of_week_list_return retval = new DateParser.alternative_day_of_week_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE144=null;
        DateParser.day_of_week_return day_of_week143 = null;

        DateParser.alternative_direction_return alternative_direction145 = null;

        DateParser.day_of_week_list_separator_return day_of_week_list_separator146 = null;

        DateParser.day_of_week_return day_of_week147 = null;

        DateParser.date_time_separator_return date_time_separator148 = null;

        DateParser.explicit_time_return explicit_time149 = null;


        Object WHITE_SPACE144_tree=null;
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_date_time_separator=new RewriteRuleSubtreeStream(adaptor,"rule date_time_separator");
        RewriteRuleSubtreeStream stream_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week");
        RewriteRuleSubtreeStream stream_alternative_direction=new RewriteRuleSubtreeStream(adaptor,"rule alternative_direction");
        RewriteRuleSubtreeStream stream_day_of_week_list_separator=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week_list_separator");
        RewriteRuleSubtreeStream stream_explicit_time=new RewriteRuleSubtreeStream(adaptor,"rule explicit_time");
        try { dbg.enterRule(getGrammarFileName(), "alternative_day_of_week_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(251, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:252:3: ( day_of_week WHITE_SPACE alternative_direction ( day_of_week_list_separator day_of_week )+ ( date_time_separator explicit_time )? -> ( ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) )+ )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:252:5: day_of_week WHITE_SPACE alternative_direction ( day_of_week_list_separator day_of_week )+ ( date_time_separator explicit_time )?
            {
            dbg.location(252,5);
            pushFollow(FOLLOW_day_of_week_in_alternative_day_of_week_list3186);
            day_of_week143=day_of_week();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week143.getTree());
            dbg.location(252,17);
            WHITE_SPACE144=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_alternative_day_of_week_list3188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE144);

            dbg.location(252,29);
            pushFollow(FOLLOW_alternative_direction_in_alternative_day_of_week_list3190);
            alternative_direction145=alternative_direction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alternative_direction.add(alternative_direction145.getTree());
            dbg.location(252,51);
            // com/joestelmach/natty/generated/DateParser.g:252:51: ( day_of_week_list_separator day_of_week )+
            int cnt45=0;
            try { dbg.enterSubRule(45);

            loop45:
            do {
                int alt45=2;
                try { dbg.enterDecision(45);

                switch ( input.LA(1) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(2) ) {
                    case OU:
                    case ET:
                        {
                        alt45=1;
                        }
                        break;

                    }

                    }
                    break;
                case COMMA:
                    {
                    switch ( input.LA(2) ) {
                    case WHITE_SPACE:
                        {
                        switch ( input.LA(3) ) {
                        case DIMANCHE:
                        case LUNDI:
                        case MARDI:
                        case MERCREDI:
                        case JEUDI:
                        case VENDREDI:
                        case SAMEDI:
                        case OU:
                        case ET:
                            {
                            alt45=1;
                            }
                            break;

                        }

                        }
                        break;
                    case COMMA:
                        {
                        alt45=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                } finally {dbg.exitDecision(45);}

                switch (alt45) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // com/joestelmach/natty/generated/DateParser.g:252:52: day_of_week_list_separator day_of_week
            	    {
            	    dbg.location(252,52);
            	    pushFollow(FOLLOW_day_of_week_list_separator_in_alternative_day_of_week_list3193);
            	    day_of_week_list_separator146=day_of_week_list_separator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_day_of_week_list_separator.add(day_of_week_list_separator146.getTree());
            	    dbg.location(252,79);
            	    pushFollow(FOLLOW_day_of_week_in_alternative_day_of_week_list3195);
            	    day_of_week147=day_of_week();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week147.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt45++;
            } while (true);
            } finally {dbg.exitSubRule(45);}

            dbg.location(252,93);
            // com/joestelmach/natty/generated/DateParser.g:252:93: ( date_time_separator explicit_time )?
            int alt46=2;
            try { dbg.enterSubRule(46);
            try { dbg.enterDecision(46);

            switch ( input.LA(1) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(2) ) {
                        case A:
                        case MINUIT:
                        case APRES_MIDI:
                        case MATIN:
                        case SOIR:
                        case NUIT:
                        case DANS:
                        case CE:
                        case INT_00:
                        case INT_01:
                        case INT_02:
                        case INT_03:
                        case INT_04:
                        case INT_05:
                        case INT_06:
                        case INT_07:
                        case INT_08:
                        case INT_09:
                        case INT_0:
                        case INT_1:
                        case INT_2:
                        case INT_3:
                        case INT_4:
                        case INT_5:
                        case INT_6:
                        case INT_7:
                        case INT_8:
                        case INT_9:
                        case INT_10:
                        case INT_11:
                        case INT_12:
                        case INT_13:
                        case INT_14:
                        case INT_15:
                        case INT_16:
                        case INT_17:
                        case INT_18:
                        case INT_19:
                        case INT_20:
                        case INT_21:
                        case INT_22:
                        case INT_23:
                            {
                            alt46=1;
                            }
                            break;
                    }

                    }
                    break;
                case COMMA:
                    {
                    alt46=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:252:94: date_time_separator explicit_time
                    {
                    dbg.location(252,94);
                    pushFollow(FOLLOW_date_time_separator_in_alternative_day_of_week_list3200);
                    date_time_separator148=date_time_separator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_date_time_separator.add(date_time_separator148.getTree());
                    dbg.location(252,114);
                    pushFollow(FOLLOW_explicit_time_in_alternative_day_of_week_list3202);
                    explicit_time149=explicit_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time149.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(46);}



            // AST REWRITE
            // elements: alternative_direction, day_of_week, explicit_time
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:7: -> ( ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) )+
            {
                dbg.location(253,10);
                if ( !(stream_alternative_direction.hasNext()||stream_day_of_week.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_alternative_direction.hasNext()||stream_day_of_week.hasNext() ) {
                    dbg.location(253,10);
                    // com/joestelmach/natty/generated/DateParser.g:253:10: ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    dbg.location(253,12);
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DATE_TIME, "DATE_TIME"), root_1);

                    dbg.location(253,22);
                    // com/joestelmach/natty/generated/DateParser.g:253:22: ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    dbg.location(253,24);
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_2);

                    dbg.location(253,38);
                    // com/joestelmach/natty/generated/DateParser.g:253:38: ^( SEEK alternative_direction day_of_week )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    dbg.location(253,40);
                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_3);

                    dbg.location(253,45);
                    adaptor.addChild(root_3, stream_alternative_direction.nextTree());
                    dbg.location(253,67);
                    adaptor.addChild(root_3, stream_day_of_week.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                    adaptor.addChild(root_1, root_2);
                    }
                    dbg.location(253,81);
                    // com/joestelmach/natty/generated/DateParser.g:253:81: ( explicit_time )?
                    if ( stream_explicit_time.hasNext() ) {
                        dbg.location(253,81);
                        adaptor.addChild(root_1, stream_explicit_time.nextTree());

                    }
                    stream_explicit_time.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_alternative_direction.reset();
                stream_day_of_week.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(254, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "alternative_day_of_week_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "alternative_day_of_week_list"

    public static class day_of_week_list_separator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "day_of_week_list_separator"
    // com/joestelmach/natty/generated/DateParser.g:256:1: day_of_week_list_separator : ( COMMA ( WHITE_SPACE | conjunction ) | conjunction );
    public final DateParser.day_of_week_list_separator_return day_of_week_list_separator() throws RecognitionException {
        DateParser.day_of_week_list_separator_return retval = new DateParser.day_of_week_list_separator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA150=null;
        Token WHITE_SPACE151=null;
        DateParser.conjunction_return conjunction152 = null;

        DateParser.conjunction_return conjunction153 = null;


        Object COMMA150_tree=null;
        Object WHITE_SPACE151_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "day_of_week_list_separator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(256, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:257:3: ( COMMA ( WHITE_SPACE | conjunction ) | conjunction )
            int alt48=2;
            try { dbg.enterDecision(48);

            switch ( input.LA(1) ) {
            case COMMA:
                {
                switch ( input.LA(2) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(3) ) {
                    case OU:
                    case ET:
                        {
                        switch ( input.LA(4) ) {
                        case WHITE_SPACE:
                            {
                            alt48=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 48, 5, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case DIMANCHE:
                    case LUNDI:
                    case MARDI:
                    case MERCREDI:
                    case JEUDI:
                    case VENDREDI:
                    case SAMEDI:
                        {
                        alt48=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 48, 3, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                case COMMA:
                    {
                    alt48=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case WHITE_SPACE:
                {
                alt48=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(48);}

            switch (alt48) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:257:5: COMMA ( WHITE_SPACE | conjunction )
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(257,5);
                    COMMA150=(Token)match(input,COMMA,FOLLOW_COMMA_in_day_of_week_list_separator3247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA150_tree = (Object)adaptor.create(COMMA150);
                    adaptor.addChild(root_0, COMMA150_tree);
                    }
                    dbg.location(257,11);
                    // com/joestelmach/natty/generated/DateParser.g:257:11: ( WHITE_SPACE | conjunction )
                    int alt47=2;
                    try { dbg.enterSubRule(47);
                    try { dbg.enterDecision(47);

                    switch ( input.LA(1) ) {
                    case WHITE_SPACE:
                        {
                        switch ( input.LA(2) ) {
                        case OU:
                        case ET:
                            {
                            alt47=2;
                            }
                            break;
                        case DIMANCHE:
                        case LUNDI:
                        case MARDI:
                        case MERCREDI:
                        case JEUDI:
                        case VENDREDI:
                        case SAMEDI:
                            {
                            alt47=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 47, 1, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case COMMA:
                        {
                        alt47=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 47, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(47);}

                    switch (alt47) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:257:12: WHITE_SPACE
                            {
                            dbg.location(257,12);
                            WHITE_SPACE151=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_day_of_week_list_separator3250); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE151_tree = (Object)adaptor.create(WHITE_SPACE151);
                            adaptor.addChild(root_0, WHITE_SPACE151_tree);
                            }

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:257:26: conjunction
                            {
                            dbg.location(257,26);
                            pushFollow(FOLLOW_conjunction_in_day_of_week_list_separator3254);
                            conjunction152=conjunction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction152.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(47);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:257:41: conjunction
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(257,41);
                    pushFollow(FOLLOW_conjunction_in_day_of_week_list_separator3259);
                    conjunction153=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction153.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(258, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "day_of_week_list_separator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "day_of_week_list_separator"

    public static class alternative_direction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_direction"
    // com/joestelmach/natty/generated/DateParser.g:260:1: alternative_direction : ( SUIVANT -> DIRECTION[\">\"] SEEK_BY[\"by_week\"] INT[\"1\"] | DERNIER -> DIRECTION[\"<\"] SEEK_BY[\"by_week\"] INT[\"1\"] | CE -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] | -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] );
    public final DateParser.alternative_direction_return alternative_direction() throws RecognitionException {
        DateParser.alternative_direction_return retval = new DateParser.alternative_direction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SUIVANT154=null;
        Token DERNIER155=null;
        Token CE156=null;

        Object SUIVANT154_tree=null;
        Object DERNIER155_tree=null;
        Object CE156_tree=null;
        RewriteRuleTokenStream stream_CE=new RewriteRuleTokenStream(adaptor,"token CE");
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_SUIVANT=new RewriteRuleTokenStream(adaptor,"token SUIVANT");

        try { dbg.enterRule(getGrammarFileName(), "alternative_direction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(260, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:261:3: ( SUIVANT -> DIRECTION[\">\"] SEEK_BY[\"by_week\"] INT[\"1\"] | DERNIER -> DIRECTION[\"<\"] SEEK_BY[\"by_week\"] INT[\"1\"] | CE -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] | -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] )
            int alt49=4;
            try { dbg.enterDecision(49);

            switch ( input.LA(1) ) {
            case SUIVANT:
                {
                alt49=1;
                }
                break;
            case DERNIER:
                {
                alt49=2;
                }
                break;
            case CE:
                {
                alt49=3;
                }
                break;
            case EOF:
            case WHITE_SPACE:
            case COMMA:
                {
                alt49=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:261:5: SUIVANT
                    {
                    dbg.location(261,5);
                    SUIVANT154=(Token)match(input,SUIVANT,FOLLOW_SUIVANT_in_alternative_direction3274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUIVANT.add(SUIVANT154);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 261:13: -> DIRECTION[\">\"] SEEK_BY[\"by_week\"] INT[\"1\"]
                    {
                        dbg.location(261,16);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(261,31);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(261,50);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:262:5: DERNIER
                    {
                    dbg.location(262,5);
                    DERNIER155=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_alternative_direction3291); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER155);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 262:13: -> DIRECTION[\"<\"] SEEK_BY[\"by_week\"] INT[\"1\"]
                    {
                        dbg.location(262,16);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));
                        dbg.location(262,31);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(262,50);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:263:5: CE
                    {
                    dbg.location(263,5);
                    CE156=(Token)match(input,CE,FOLLOW_CE_in_alternative_direction3308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CE.add(CE156);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 263:8: -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"]
                    {
                        dbg.location(263,11);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(263,26);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(263,44);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "0"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:264:5: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 264:5: -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"]
                    {
                        dbg.location(264,8);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(264,23);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(264,41);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "0"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(265, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "alternative_direction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "alternative_direction"

    public static class global_date_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_date_prefix"
    // com/joestelmach/natty/generated/DateParser.g:267:1: global_date_prefix : ( ( LE WHITE_SPACE )? JOUR WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] | spelled_or_int_optional_prefix WHITE_SPACE JOUR WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_week\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE MOIS WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_month\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE ANNEE WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_year\"] spelled_or_int_optional_prefix | ( LE WHITE_SPACE )? day_of_week WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] day_of_week | spelled_or_int_optional_prefix WHITE_SPACE day_of_week WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix day_of_week );
    public final DateParser.global_date_prefix_return global_date_prefix() throws RecognitionException {
        DateParser.global_date_prefix_return retval = new DateParser.global_date_prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LE157=null;
        Token WHITE_SPACE158=null;
        Token JOUR159=null;
        Token WHITE_SPACE160=null;
        Token WHITE_SPACE163=null;
        Token JOUR164=null;
        Token WHITE_SPACE165=null;
        Token WHITE_SPACE168=null;
        Token SEMAINE169=null;
        Token WHITE_SPACE170=null;
        Token WHITE_SPACE173=null;
        Token MOIS174=null;
        Token WHITE_SPACE175=null;
        Token WHITE_SPACE178=null;
        Token ANNEE179=null;
        Token WHITE_SPACE180=null;
        Token LE182=null;
        Token WHITE_SPACE183=null;
        Token WHITE_SPACE185=null;
        Token WHITE_SPACE188=null;
        Token WHITE_SPACE190=null;
        DateParser.prefix_direction_return prefix_direction161 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix162 = null;

        DateParser.prefix_direction_return prefix_direction166 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix167 = null;

        DateParser.prefix_direction_return prefix_direction171 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix172 = null;

        DateParser.prefix_direction_return prefix_direction176 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix177 = null;

        DateParser.prefix_direction_return prefix_direction181 = null;

        DateParser.day_of_week_return day_of_week184 = null;

        DateParser.prefix_direction_return prefix_direction186 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix187 = null;

        DateParser.day_of_week_return day_of_week189 = null;

        DateParser.prefix_direction_return prefix_direction191 = null;


        Object LE157_tree=null;
        Object WHITE_SPACE158_tree=null;
        Object JOUR159_tree=null;
        Object WHITE_SPACE160_tree=null;
        Object WHITE_SPACE163_tree=null;
        Object JOUR164_tree=null;
        Object WHITE_SPACE165_tree=null;
        Object WHITE_SPACE168_tree=null;
        Object SEMAINE169_tree=null;
        Object WHITE_SPACE170_tree=null;
        Object WHITE_SPACE173_tree=null;
        Object MOIS174_tree=null;
        Object WHITE_SPACE175_tree=null;
        Object WHITE_SPACE178_tree=null;
        Object ANNEE179_tree=null;
        Object WHITE_SPACE180_tree=null;
        Object LE182_tree=null;
        Object WHITE_SPACE183_tree=null;
        Object WHITE_SPACE185_tree=null;
        Object WHITE_SPACE188_tree=null;
        Object WHITE_SPACE190_tree=null;
        RewriteRuleTokenStream stream_SEMAINE=new RewriteRuleTokenStream(adaptor,"token SEMAINE");
        RewriteRuleTokenStream stream_ANNEE=new RewriteRuleTokenStream(adaptor,"token ANNEE");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_JOUR=new RewriteRuleTokenStream(adaptor,"token JOUR");
        RewriteRuleTokenStream stream_MOIS=new RewriteRuleTokenStream(adaptor,"token MOIS");
        RewriteRuleSubtreeStream stream_spelled_or_int_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_optional_prefix");
        RewriteRuleSubtreeStream stream_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week");
        RewriteRuleSubtreeStream stream_prefix_direction=new RewriteRuleSubtreeStream(adaptor,"rule prefix_direction");
        try { dbg.enterRule(getGrammarFileName(), "global_date_prefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(267, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:269:3: ( ( LE WHITE_SPACE )? JOUR WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] | spelled_or_int_optional_prefix WHITE_SPACE JOUR WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_week\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE MOIS WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_month\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE ANNEE WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_year\"] spelled_or_int_optional_prefix | ( LE WHITE_SPACE )? day_of_week WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] day_of_week | spelled_or_int_optional_prefix WHITE_SPACE day_of_week WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix day_of_week )
            int alt52=7;
            try { dbg.enterDecision(52);

            try {
                isCyclicDecision = true;
                alt52 = dfa52.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:269:5: ( LE WHITE_SPACE )? JOUR WHITE_SPACE prefix_direction
                    {
                    dbg.location(269,5);
                    // com/joestelmach/natty/generated/DateParser.g:269:5: ( LE WHITE_SPACE )?
                    int alt50=2;
                    try { dbg.enterSubRule(50);
                    try { dbg.enterDecision(50);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            alt50=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(50);}

                    switch (alt50) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:269:6: LE WHITE_SPACE
                            {
                            dbg.location(269,6);
                            LE157=(Token)match(input,LE,FOLLOW_LE_in_global_date_prefix3353); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE157);

                            dbg.location(269,9);
                            WHITE_SPACE158=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3355); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE158);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(50);}

                    dbg.location(269,23);
                    JOUR159=(Token)match(input,JOUR,FOLLOW_JOUR_in_global_date_prefix3359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JOUR.add(JOUR159);

                    dbg.location(269,28);
                    WHITE_SPACE160=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE160);

                    dbg.location(269,40);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3363);
                    prefix_direction161=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction161.getTree());


                    // AST REWRITE
                    // elements: prefix_direction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 270:7: -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"]
                    {
                        dbg.location(270,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(270,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(270,45);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:273:5: spelled_or_int_optional_prefix WHITE_SPACE JOUR WHITE_SPACE prefix_direction
                    {
                    dbg.location(273,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3391);
                    spelled_or_int_optional_prefix162=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix162.getTree());
                    dbg.location(273,36);
                    WHITE_SPACE163=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE163);

                    dbg.location(273,48);
                    JOUR164=(Token)match(input,JOUR,FOLLOW_JOUR_in_global_date_prefix3395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JOUR.add(JOUR164);

                    dbg.location(273,53);
                    WHITE_SPACE165=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE165);

                    dbg.location(273,65);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3399);
                    prefix_direction166=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction166.getTree());


                    // AST REWRITE
                    // elements: prefix_direction, spelled_or_int_optional_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 274:7: -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix
                    {
                        dbg.location(274,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(274,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(274,45);
                        adaptor.addChild(root_0, stream_spelled_or_int_optional_prefix.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:277:5: spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE prefix_direction
                    {
                    dbg.location(277,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3430);
                    spelled_or_int_optional_prefix167=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix167.getTree());
                    dbg.location(277,36);
                    WHITE_SPACE168=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE168);

                    dbg.location(277,48);
                    SEMAINE169=(Token)match(input,SEMAINE,FOLLOW_SEMAINE_in_global_date_prefix3434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMAINE.add(SEMAINE169);

                    dbg.location(277,56);
                    WHITE_SPACE170=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE170);

                    dbg.location(277,68);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3438);
                    prefix_direction171=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction171.getTree());


                    // AST REWRITE
                    // elements: spelled_or_int_optional_prefix, prefix_direction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 278:7: -> prefix_direction SEEK_BY[\"by_week\"] spelled_or_int_optional_prefix
                    {
                        dbg.location(278,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(278,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(278,46);
                        adaptor.addChild(root_0, stream_spelled_or_int_optional_prefix.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:281:5: spelled_or_int_optional_prefix WHITE_SPACE MOIS WHITE_SPACE prefix_direction
                    {
                    dbg.location(281,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3469);
                    spelled_or_int_optional_prefix172=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix172.getTree());
                    dbg.location(281,36);
                    WHITE_SPACE173=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE173);

                    dbg.location(281,48);
                    MOIS174=(Token)match(input,MOIS,FOLLOW_MOIS_in_global_date_prefix3473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOIS.add(MOIS174);

                    dbg.location(281,53);
                    WHITE_SPACE175=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE175);

                    dbg.location(281,65);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3477);
                    prefix_direction176=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction176.getTree());


                    // AST REWRITE
                    // elements: spelled_or_int_optional_prefix, prefix_direction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 282:7: -> prefix_direction SEEK_BY[\"by_month\"] spelled_or_int_optional_prefix
                    {
                        dbg.location(282,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(282,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_month"));
                        dbg.location(282,47);
                        adaptor.addChild(root_0, stream_spelled_or_int_optional_prefix.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:285:5: spelled_or_int_optional_prefix WHITE_SPACE ANNEE WHITE_SPACE prefix_direction
                    {
                    dbg.location(285,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3504);
                    spelled_or_int_optional_prefix177=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix177.getTree());
                    dbg.location(285,36);
                    WHITE_SPACE178=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE178);

                    dbg.location(285,48);
                    ANNEE179=(Token)match(input,ANNEE,FOLLOW_ANNEE_in_global_date_prefix3508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ANNEE.add(ANNEE179);

                    dbg.location(285,54);
                    WHITE_SPACE180=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE180);

                    dbg.location(285,66);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3512);
                    prefix_direction181=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction181.getTree());


                    // AST REWRITE
                    // elements: spelled_or_int_optional_prefix, prefix_direction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 286:7: -> prefix_direction SEEK_BY[\"by_year\"] spelled_or_int_optional_prefix
                    {
                        dbg.location(286,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(286,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_year"));
                        dbg.location(286,46);
                        adaptor.addChild(root_0, stream_spelled_or_int_optional_prefix.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:289:5: ( LE WHITE_SPACE )? day_of_week WHITE_SPACE prefix_direction
                    {
                    dbg.location(289,5);
                    // com/joestelmach/natty/generated/DateParser.g:289:5: ( LE WHITE_SPACE )?
                    int alt51=2;
                    try { dbg.enterSubRule(51);
                    try { dbg.enterDecision(51);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            alt51=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(51);}

                    switch (alt51) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:289:6: LE WHITE_SPACE
                            {
                            dbg.location(289,6);
                            LE182=(Token)match(input,LE,FOLLOW_LE_in_global_date_prefix3544); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE182);

                            dbg.location(289,9);
                            WHITE_SPACE183=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3546); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE183);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(51);}

                    dbg.location(289,23);
                    pushFollow(FOLLOW_day_of_week_in_global_date_prefix3550);
                    day_of_week184=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week184.getTree());
                    dbg.location(289,35);
                    WHITE_SPACE185=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE185);

                    dbg.location(289,47);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3554);
                    prefix_direction186=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction186.getTree());


                    // AST REWRITE
                    // elements: day_of_week, prefix_direction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 290:7: -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] day_of_week
                    {
                        dbg.location(290,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(290,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(290,45);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));
                        dbg.location(290,54);
                        adaptor.addChild(root_0, stream_day_of_week.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // com/joestelmach/natty/generated/DateParser.g:293:5: spelled_or_int_optional_prefix WHITE_SPACE day_of_week WHITE_SPACE prefix_direction
                    {
                    dbg.location(293,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3584);
                    spelled_or_int_optional_prefix187=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix187.getTree());
                    dbg.location(293,36);
                    WHITE_SPACE188=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE188);

                    dbg.location(293,48);
                    pushFollow(FOLLOW_day_of_week_in_global_date_prefix3588);
                    day_of_week189=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week189.getTree());
                    dbg.location(293,60);
                    WHITE_SPACE190=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_global_date_prefix3590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE190);

                    dbg.location(293,72);
                    pushFollow(FOLLOW_prefix_direction_in_global_date_prefix3592);
                    prefix_direction191=prefix_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix_direction.add(prefix_direction191.getTree());


                    // AST REWRITE
                    // elements: prefix_direction, day_of_week, spelled_or_int_optional_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 294:7: -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix day_of_week
                    {
                        dbg.location(294,10);
                        adaptor.addChild(root_0, stream_prefix_direction.nextTree());
                        dbg.location(294,27);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(294,45);
                        adaptor.addChild(root_0, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(294,76);
                        adaptor.addChild(root_0, stream_day_of_week.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(295, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "global_date_prefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "global_date_prefix"

    public static class prefix_direction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix_direction"
    // com/joestelmach/natty/generated/DateParser.g:297:1: prefix_direction : ( APRES -> DIRECTION[\">\"] | AVANT -> DIRECTION[\"<\"] );
    public final DateParser.prefix_direction_return prefix_direction() throws RecognitionException {
        DateParser.prefix_direction_return retval = new DateParser.prefix_direction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token APRES192=null;
        Token AVANT193=null;

        Object APRES192_tree=null;
        Object AVANT193_tree=null;
        RewriteRuleTokenStream stream_APRES=new RewriteRuleTokenStream(adaptor,"token APRES");
        RewriteRuleTokenStream stream_AVANT=new RewriteRuleTokenStream(adaptor,"token AVANT");

        try { dbg.enterRule(getGrammarFileName(), "prefix_direction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(297, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:298:3: ( APRES -> DIRECTION[\">\"] | AVANT -> DIRECTION[\"<\"] )
            int alt53=2;
            try { dbg.enterDecision(53);

            switch ( input.LA(1) ) {
            case APRES:
                {
                alt53=1;
                }
                break;
            case AVANT:
                {
                alt53=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:298:5: APRES
                    {
                    dbg.location(298,5);
                    APRES192=(Token)match(input,APRES,FOLLOW_APRES_in_prefix_direction3624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APRES.add(APRES192);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 298:12: -> DIRECTION[\">\"]
                    {
                        dbg.location(298,15);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:299:5: AVANT
                    {
                    dbg.location(299,5);
                    AVANT193=(Token)match(input,AVANT,FOLLOW_AVANT_in_prefix_direction3636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVANT.add(AVANT193);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 299:12: -> DIRECTION[\"<\"]
                    {
                        dbg.location(299,15);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(300, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prefix_direction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prefix_direction"

    public static class relaxed_date_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_date"
    // com/joestelmach/natty/generated/DateParser.g:303:1: relaxed_date : ( ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year | ( relaxed_day_of_month_prefix )? ( relaxed_day_of_week )? ( relaxed_day_of_month )? WHITE_SPACE relaxed_month ) -> ^( EXPLICIT_DATE relaxed_month ( relaxed_day_of_month )? ( relaxed_day_of_week )? ( relaxed_year )? ) ;
    public final DateParser.relaxed_date_return relaxed_date() throws RecognitionException {
        DateParser.relaxed_date_return retval = new DateParser.relaxed_date_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE197=null;
        Token WHITE_SPACE199=null;
        Token WHITE_SPACE204=null;
        DateParser.relaxed_day_of_week_return relaxed_day_of_week194 = null;

        DateParser.relaxed_day_of_month_prefix_return relaxed_day_of_month_prefix195 = null;

        DateParser.relaxed_day_of_month_return relaxed_day_of_month196 = null;

        DateParser.relaxed_month_return relaxed_month198 = null;

        DateParser.relaxed_year_return relaxed_year200 = null;

        DateParser.relaxed_day_of_month_prefix_return relaxed_day_of_month_prefix201 = null;

        DateParser.relaxed_day_of_week_return relaxed_day_of_week202 = null;

        DateParser.relaxed_day_of_month_return relaxed_day_of_month203 = null;

        DateParser.relaxed_month_return relaxed_month205 = null;


        Object WHITE_SPACE197_tree=null;
        Object WHITE_SPACE199_tree=null;
        Object WHITE_SPACE204_tree=null;
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_relaxed_day_of_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_month");
        RewriteRuleSubtreeStream stream_relaxed_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_month");
        RewriteRuleSubtreeStream stream_relaxed_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_week");
        RewriteRuleSubtreeStream stream_relaxed_year=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_year");
        RewriteRuleSubtreeStream stream_relaxed_day_of_month_prefix=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_month_prefix");
        try { dbg.enterRule(getGrammarFileName(), "relaxed_date");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(303, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:304:3: ( ( ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year | ( relaxed_day_of_month_prefix )? ( relaxed_day_of_week )? ( relaxed_day_of_month )? WHITE_SPACE relaxed_month ) -> ^( EXPLICIT_DATE relaxed_month ( relaxed_day_of_month )? ( relaxed_day_of_week )? ( relaxed_year )? ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:304:5: ( ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year | ( relaxed_day_of_month_prefix )? ( relaxed_day_of_week )? ( relaxed_day_of_month )? WHITE_SPACE relaxed_month )
            {
            dbg.location(304,5);
            // com/joestelmach/natty/generated/DateParser.g:304:5: ( ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year | ( relaxed_day_of_month_prefix )? ( relaxed_day_of_week )? ( relaxed_day_of_month )? WHITE_SPACE relaxed_month )
            int alt59=2;
            try { dbg.enterSubRule(59);
            try { dbg.enterDecision(59);

            try {
                isCyclicDecision = true;
                alt59 = dfa59.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:306:3: ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year
                    {
                    dbg.location(308,9);
                    // com/joestelmach/natty/generated/DateParser.g:308:9: ( relaxed_day_of_week )?
                    int alt54=2;
                    try { dbg.enterSubRule(54);
                    try { dbg.enterDecision(54);

                    try {
                        isCyclicDecision = true;
                        alt54 = dfa54.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(54);}

                    switch (alt54) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:308:9: relaxed_day_of_week
                            {
                            dbg.location(308,9);
                            pushFollow(FOLLOW_relaxed_day_of_week_in_relaxed_date3703);
                            relaxed_day_of_week194=relaxed_day_of_week();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_week.add(relaxed_day_of_week194.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(54);}

                    dbg.location(308,30);
                    // com/joestelmach/natty/generated/DateParser.g:308:30: ( relaxed_day_of_month_prefix )?
                    int alt55=2;
                    try { dbg.enterSubRule(55);
                    try { dbg.enterDecision(55);

                    switch ( input.LA(1) ) {
                        case LE:
                        case COMMA:
                            {
                            alt55=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(55);}

                    switch (alt55) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:308:30: relaxed_day_of_month_prefix
                            {
                            dbg.location(308,30);
                            pushFollow(FOLLOW_relaxed_day_of_month_prefix_in_relaxed_date3706);
                            relaxed_day_of_month_prefix195=relaxed_day_of_month_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_month_prefix.add(relaxed_day_of_month_prefix195.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(55);}

                    dbg.location(308,59);
                    pushFollow(FOLLOW_relaxed_day_of_month_in_relaxed_date3709);
                    relaxed_day_of_month196=relaxed_day_of_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(relaxed_day_of_month196.getTree());
                    dbg.location(309,13);
                    WHITE_SPACE197=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_date3724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE197);

                    dbg.location(309,25);
                    pushFollow(FOLLOW_relaxed_month_in_relaxed_date3726);
                    relaxed_month198=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month198.getTree());
                    dbg.location(309,39);
                    WHITE_SPACE199=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_date3728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE199);

                    dbg.location(309,51);
                    pushFollow(FOLLOW_relaxed_year_in_relaxed_date3730);
                    relaxed_year200=relaxed_year();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_year.add(relaxed_year200.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:312:9: ( relaxed_day_of_month_prefix )? ( relaxed_day_of_week )? ( relaxed_day_of_month )? WHITE_SPACE relaxed_month
                    {
                    dbg.location(312,9);
                    // com/joestelmach/natty/generated/DateParser.g:312:9: ( relaxed_day_of_month_prefix )?
                    int alt56=2;
                    try { dbg.enterSubRule(56);
                    try { dbg.enterDecision(56);

                    switch ( input.LA(1) ) {
                        case LE:
                        case COMMA:
                            {
                            alt56=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(56);}

                    switch (alt56) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:312:9: relaxed_day_of_month_prefix
                            {
                            dbg.location(312,9);
                            pushFollow(FOLLOW_relaxed_day_of_month_prefix_in_relaxed_date3746);
                            relaxed_day_of_month_prefix201=relaxed_day_of_month_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_month_prefix.add(relaxed_day_of_month_prefix201.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(56);}

                    dbg.location(312,38);
                    // com/joestelmach/natty/generated/DateParser.g:312:38: ( relaxed_day_of_week )?
                    int alt57=2;
                    try { dbg.enterSubRule(57);
                    try { dbg.enterDecision(57);

                    try {
                        isCyclicDecision = true;
                        alt57 = dfa57.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(57);}

                    switch (alt57) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:312:38: relaxed_day_of_week
                            {
                            dbg.location(312,38);
                            pushFollow(FOLLOW_relaxed_day_of_week_in_relaxed_date3749);
                            relaxed_day_of_week202=relaxed_day_of_week();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_week.add(relaxed_day_of_week202.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(57);}

                    dbg.location(312,59);
                    // com/joestelmach/natty/generated/DateParser.g:312:59: ( relaxed_day_of_month )?
                    int alt58=2;
                    try { dbg.enterSubRule(58);
                    try { dbg.enterDecision(58);

                    switch ( input.LA(1) ) {
                        case INT_01:
                        case INT_02:
                        case INT_03:
                        case INT_04:
                        case INT_05:
                        case INT_06:
                        case INT_07:
                        case INT_08:
                        case INT_09:
                        case INT_1:
                        case INT_2:
                        case INT_3:
                        case INT_4:
                        case INT_5:
                        case INT_6:
                        case INT_7:
                        case INT_8:
                        case INT_9:
                        case INT_10:
                        case INT_11:
                        case INT_12:
                        case INT_13:
                        case INT_14:
                        case INT_15:
                        case INT_16:
                        case INT_17:
                        case INT_18:
                        case INT_19:
                        case INT_20:
                        case INT_21:
                        case INT_22:
                        case INT_23:
                        case INT_24:
                        case INT_25:
                        case INT_26:
                        case INT_27:
                        case INT_28:
                        case INT_29:
                        case INT_30:
                        case INT_31:
                        case UN:
                        case DEUX:
                        case TROIS:
                        case QUATRE:
                        case CINQ:
                        case SIX:
                        case SEPT:
                        case HUIT:
                        case NEUF:
                        case DIX:
                        case ONZE:
                        case DOUZE:
                        case TREIZE:
                        case QUATORZE:
                        case QUINZE:
                        case SEIZE:
                        case VINGT:
                        case TRENTE:
                        case PREMIER:
                            {
                            alt58=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(58);}

                    switch (alt58) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:312:59: relaxed_day_of_month
                            {
                            dbg.location(312,59);
                            pushFollow(FOLLOW_relaxed_day_of_month_in_relaxed_date3752);
                            relaxed_day_of_month203=relaxed_day_of_month();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(relaxed_day_of_month203.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(58);}

                    dbg.location(313,13);
                    WHITE_SPACE204=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_date3767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE204);

                    dbg.location(313,25);
                    pushFollow(FOLLOW_relaxed_month_in_relaxed_date3769);
                    relaxed_month205=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month205.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(59);}



            // AST REWRITE
            // elements: relaxed_day_of_month, relaxed_month, relaxed_year, relaxed_day_of_week
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:7: -> ^( EXPLICIT_DATE relaxed_month ( relaxed_day_of_month )? ( relaxed_day_of_week )? ( relaxed_year )? )
            {
                dbg.location(314,10);
                // com/joestelmach/natty/generated/DateParser.g:314:10: ^( EXPLICIT_DATE relaxed_month ( relaxed_day_of_month )? ( relaxed_day_of_week )? ( relaxed_year )? )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(314,12);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_DATE, "EXPLICIT_DATE"), root_1);

                dbg.location(314,26);
                adaptor.addChild(root_1, stream_relaxed_month.nextTree());
                dbg.location(314,40);
                // com/joestelmach/natty/generated/DateParser.g:314:40: ( relaxed_day_of_month )?
                if ( stream_relaxed_day_of_month.hasNext() ) {
                    dbg.location(314,40);
                    adaptor.addChild(root_1, stream_relaxed_day_of_month.nextTree());

                }
                stream_relaxed_day_of_month.reset();
                dbg.location(314,62);
                // com/joestelmach/natty/generated/DateParser.g:314:62: ( relaxed_day_of_week )?
                if ( stream_relaxed_day_of_week.hasNext() ) {
                    dbg.location(314,62);
                    adaptor.addChild(root_1, stream_relaxed_day_of_week.nextTree());

                }
                stream_relaxed_day_of_week.reset();
                dbg.location(314,83);
                // com/joestelmach/natty/generated/DateParser.g:314:83: ( relaxed_year )?
                if ( stream_relaxed_year.hasNext() ) {
                    dbg.location(314,83);
                    adaptor.addChild(root_1, stream_relaxed_year.nextTree());

                }
                stream_relaxed_year.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(315, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_date");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_date"

    public static class relaxed_day_of_week_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_day_of_week"
    // com/joestelmach/natty/generated/DateParser.g:317:1: relaxed_day_of_week : ( prefix WHITE_SPACE )? day_of_week ( COMMA )? ( WHITE_SPACE )? -> day_of_week ;
    public final DateParser.relaxed_day_of_week_return relaxed_day_of_week() throws RecognitionException {
        DateParser.relaxed_day_of_week_return retval = new DateParser.relaxed_day_of_week_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE207=null;
        Token COMMA209=null;
        Token WHITE_SPACE210=null;
        DateParser.prefix_return prefix206 = null;

        DateParser.day_of_week_return day_of_week208 = null;


        Object WHITE_SPACE207_tree=null;
        Object COMMA209_tree=null;
        Object WHITE_SPACE210_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try { dbg.enterRule(getGrammarFileName(), "relaxed_day_of_week");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(317, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:318:3: ( ( prefix WHITE_SPACE )? day_of_week ( COMMA )? ( WHITE_SPACE )? -> day_of_week )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:318:5: ( prefix WHITE_SPACE )? day_of_week ( COMMA )? ( WHITE_SPACE )?
            {
            dbg.location(318,5);
            // com/joestelmach/natty/generated/DateParser.g:318:5: ( prefix WHITE_SPACE )?
            int alt60=2;
            try { dbg.enterSubRule(60);
            try { dbg.enterDecision(60);

            switch ( input.LA(1) ) {
                case PASSE:
                case DANS:
                case CE:
                case SUIVANT:
                case DERNIER:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_1:
                case INT_2:
                case INT_3:
                case INT_4:
                case INT_5:
                case INT_6:
                case INT_7:
                case INT_8:
                case INT_9:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                case UN:
                case DEUX:
                case TROIS:
                case QUATRE:
                case CINQ:
                case SIX:
                case SEPT:
                case HUIT:
                case NEUF:
                case DIX:
                case ONZE:
                case DOUZE:
                case TREIZE:
                case QUATORZE:
                case QUINZE:
                case SEIZE:
                case VINGT:
                case TRENTE:
                case PREMIER:
                    {
                    alt60=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:318:6: prefix WHITE_SPACE
                    {
                    dbg.location(318,6);
                    pushFollow(FOLLOW_prefix_in_relaxed_day_of_week3808);
                    prefix206=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix206.getTree());
                    dbg.location(318,13);
                    WHITE_SPACE207=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_day_of_week3810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE207);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(60);}

            dbg.location(318,27);
            pushFollow(FOLLOW_day_of_week_in_relaxed_day_of_week3814);
            day_of_week208=day_of_week();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week208.getTree());
            dbg.location(318,39);
            // com/joestelmach/natty/generated/DateParser.g:318:39: ( COMMA )?
            int alt61=2;
            try { dbg.enterSubRule(61);
            try { dbg.enterDecision(61);

            switch ( input.LA(1) ) {
                case COMMA:
                    {
                    alt61=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:318:39: COMMA
                    {
                    dbg.location(318,39);
                    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_relaxed_day_of_week3816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA209);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(61);}

            dbg.location(318,46);
            // com/joestelmach/natty/generated/DateParser.g:318:46: ( WHITE_SPACE )?
            int alt62=2;
            try { dbg.enterSubRule(62);
            try { dbg.enterDecision(62);

            try {
                isCyclicDecision = true;
                alt62 = dfa62.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:318:46: WHITE_SPACE
                    {
                    dbg.location(318,46);
                    WHITE_SPACE210=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_day_of_week3819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE210);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(62);}



            // AST REWRITE
            // elements: day_of_week
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:59: -> day_of_week
            {
                dbg.location(318,62);
                adaptor.addChild(root_0, stream_day_of_week.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(319, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_day_of_week");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_day_of_week"

    public static class relaxed_day_of_month_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_day_of_month_prefix"
    // com/joestelmach/natty/generated/DateParser.g:321:1: relaxed_day_of_month_prefix : ( ( LE WHITE_SPACE ) | ( COMMA ( WHITE_SPACE )? ) );
    public final DateParser.relaxed_day_of_month_prefix_return relaxed_day_of_month_prefix() throws RecognitionException {
        DateParser.relaxed_day_of_month_prefix_return retval = new DateParser.relaxed_day_of_month_prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LE211=null;
        Token WHITE_SPACE212=null;
        Token COMMA213=null;
        Token WHITE_SPACE214=null;

        Object LE211_tree=null;
        Object WHITE_SPACE212_tree=null;
        Object COMMA213_tree=null;
        Object WHITE_SPACE214_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "relaxed_day_of_month_prefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:322:3: ( ( LE WHITE_SPACE ) | ( COMMA ( WHITE_SPACE )? ) )
            int alt64=2;
            try { dbg.enterDecision(64);

            switch ( input.LA(1) ) {
            case LE:
                {
                alt64=1;
                }
                break;
            case COMMA:
                {
                alt64=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:322:5: ( LE WHITE_SPACE )
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(322,5);
                    // com/joestelmach/natty/generated/DateParser.g:322:5: ( LE WHITE_SPACE )
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:322:6: LE WHITE_SPACE
                    {
                    dbg.location(322,6);
                    LE211=(Token)match(input,LE,FOLLOW_LE_in_relaxed_day_of_month_prefix3840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LE211_tree = (Object)adaptor.create(LE211);
                    adaptor.addChild(root_0, LE211_tree);
                    }
                    dbg.location(322,9);
                    WHITE_SPACE212=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_day_of_month_prefix3842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHITE_SPACE212_tree = (Object)adaptor.create(WHITE_SPACE212);
                    adaptor.addChild(root_0, WHITE_SPACE212_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:322:24: ( COMMA ( WHITE_SPACE )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(322,24);
                    // com/joestelmach/natty/generated/DateParser.g:322:24: ( COMMA ( WHITE_SPACE )? )
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:322:25: COMMA ( WHITE_SPACE )?
                    {
                    dbg.location(322,25);
                    COMMA213=(Token)match(input,COMMA,FOLLOW_COMMA_in_relaxed_day_of_month_prefix3848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA213_tree = (Object)adaptor.create(COMMA213);
                    adaptor.addChild(root_0, COMMA213_tree);
                    }
                    dbg.location(322,31);
                    // com/joestelmach/natty/generated/DateParser.g:322:31: ( WHITE_SPACE )?
                    int alt63=2;
                    try { dbg.enterSubRule(63);
                    try { dbg.enterDecision(63);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DIMANCHE:
                                case LUNDI:
                                case MARDI:
                                case MERCREDI:
                                case JEUDI:
                                case VENDREDI:
                                case SAMEDI:
                                case PASSE:
                                case DANS:
                                case CE:
                                case SUIVANT:
                                case DERNIER:
                                case WHITE_SPACE:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                case INT_24:
                                case INT_25:
                                case INT_26:
                                case INT_27:
                                case INT_28:
                                case INT_29:
                                case INT_30:
                                case INT_31:
                                case INT_32:
                                case INT_33:
                                case INT_34:
                                case INT_35:
                                case INT_36:
                                case INT_37:
                                case INT_38:
                                case INT_39:
                                case INT_40:
                                case INT_41:
                                case INT_42:
                                case INT_43:
                                case INT_44:
                                case INT_45:
                                case INT_46:
                                case INT_47:
                                case INT_48:
                                case INT_49:
                                case INT_50:
                                case INT_51:
                                case INT_52:
                                case INT_53:
                                case INT_54:
                                case INT_55:
                                case INT_56:
                                case INT_57:
                                case INT_58:
                                case INT_59:
                                case INT_60:
                                case INT_61:
                                case INT_62:
                                case INT_63:
                                case INT_64:
                                case INT_65:
                                case INT_66:
                                case INT_67:
                                case INT_68:
                                case INT_69:
                                case INT_70:
                                case INT_71:
                                case INT_72:
                                case INT_73:
                                case INT_74:
                                case INT_75:
                                case INT_76:
                                case INT_77:
                                case INT_78:
                                case INT_79:
                                case INT_80:
                                case INT_81:
                                case INT_82:
                                case INT_83:
                                case INT_84:
                                case INT_85:
                                case INT_86:
                                case INT_87:
                                case INT_88:
                                case INT_89:
                                case INT_90:
                                case INT_91:
                                case INT_92:
                                case INT_93:
                                case INT_94:
                                case INT_95:
                                case INT_96:
                                case INT_97:
                                case INT_98:
                                case INT_99:
                                case UN:
                                case DEUX:
                                case TROIS:
                                case QUATRE:
                                case CINQ:
                                case SIX:
                                case SEPT:
                                case HUIT:
                                case NEUF:
                                case DIX:
                                case ONZE:
                                case DOUZE:
                                case TREIZE:
                                case QUATORZE:
                                case QUINZE:
                                case SEIZE:
                                case VINGT:
                                case TRENTE:
                                case PREMIER:
                                    {
                                    alt63=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(63);}

                    switch (alt63) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:322:31: WHITE_SPACE
                            {
                            dbg.location(322,31);
                            WHITE_SPACE214=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relaxed_day_of_month_prefix3850); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WHITE_SPACE214_tree = (Object)adaptor.create(WHITE_SPACE214);
                            adaptor.addChild(root_0, WHITE_SPACE214_tree);
                            }

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(63);}


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(323, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_day_of_month_prefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_day_of_month_prefix"

    public static class relaxed_month_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_month"
    // com/joestelmach/natty/generated/DateParser.g:325:1: relaxed_month : ( JANVIER -> ^( MONTH_OF_YEAR INT[\"1\"] ) | FEVRIER -> ^( MONTH_OF_YEAR INT[\"2\"] ) | MARS -> ^( MONTH_OF_YEAR INT[\"3\"] ) | AVRIL -> ^( MONTH_OF_YEAR INT[\"4\"] ) | MAI -> ^( MONTH_OF_YEAR INT[\"5\"] ) | JUIN -> ^( MONTH_OF_YEAR INT[\"6\"] ) | JUILLET -> ^( MONTH_OF_YEAR INT[\"7\"] ) | AOUT -> ^( MONTH_OF_YEAR INT[\"8\"] ) | SEPTEMBRE -> ^( MONTH_OF_YEAR INT[\"9\"] ) | OCTOBRE -> ^( MONTH_OF_YEAR INT[\"10\"] ) | NOVEMBRE -> ^( MONTH_OF_YEAR INT[\"11\"] ) | DECEMBRE -> ^( MONTH_OF_YEAR INT[\"12\"] ) );
    public final DateParser.relaxed_month_return relaxed_month() throws RecognitionException {
        DateParser.relaxed_month_return retval = new DateParser.relaxed_month_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token JANVIER215=null;
        Token FEVRIER216=null;
        Token MARS217=null;
        Token AVRIL218=null;
        Token MAI219=null;
        Token JUIN220=null;
        Token JUILLET221=null;
        Token AOUT222=null;
        Token SEPTEMBRE223=null;
        Token OCTOBRE224=null;
        Token NOVEMBRE225=null;
        Token DECEMBRE226=null;

        Object JANVIER215_tree=null;
        Object FEVRIER216_tree=null;
        Object MARS217_tree=null;
        Object AVRIL218_tree=null;
        Object MAI219_tree=null;
        Object JUIN220_tree=null;
        Object JUILLET221_tree=null;
        Object AOUT222_tree=null;
        Object SEPTEMBRE223_tree=null;
        Object OCTOBRE224_tree=null;
        Object NOVEMBRE225_tree=null;
        Object DECEMBRE226_tree=null;
        RewriteRuleTokenStream stream_AOUT=new RewriteRuleTokenStream(adaptor,"token AOUT");
        RewriteRuleTokenStream stream_NOVEMBRE=new RewriteRuleTokenStream(adaptor,"token NOVEMBRE");
        RewriteRuleTokenStream stream_OCTOBRE=new RewriteRuleTokenStream(adaptor,"token OCTOBRE");
        RewriteRuleTokenStream stream_JUILLET=new RewriteRuleTokenStream(adaptor,"token JUILLET");
        RewriteRuleTokenStream stream_AVRIL=new RewriteRuleTokenStream(adaptor,"token AVRIL");
        RewriteRuleTokenStream stream_JUIN=new RewriteRuleTokenStream(adaptor,"token JUIN");
        RewriteRuleTokenStream stream_MAI=new RewriteRuleTokenStream(adaptor,"token MAI");
        RewriteRuleTokenStream stream_SEPTEMBRE=new RewriteRuleTokenStream(adaptor,"token SEPTEMBRE");
        RewriteRuleTokenStream stream_JANVIER=new RewriteRuleTokenStream(adaptor,"token JANVIER");
        RewriteRuleTokenStream stream_DECEMBRE=new RewriteRuleTokenStream(adaptor,"token DECEMBRE");
        RewriteRuleTokenStream stream_FEVRIER=new RewriteRuleTokenStream(adaptor,"token FEVRIER");
        RewriteRuleTokenStream stream_MARS=new RewriteRuleTokenStream(adaptor,"token MARS");

        try { dbg.enterRule(getGrammarFileName(), "relaxed_month");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(325, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:326:3: ( JANVIER -> ^( MONTH_OF_YEAR INT[\"1\"] ) | FEVRIER -> ^( MONTH_OF_YEAR INT[\"2\"] ) | MARS -> ^( MONTH_OF_YEAR INT[\"3\"] ) | AVRIL -> ^( MONTH_OF_YEAR INT[\"4\"] ) | MAI -> ^( MONTH_OF_YEAR INT[\"5\"] ) | JUIN -> ^( MONTH_OF_YEAR INT[\"6\"] ) | JUILLET -> ^( MONTH_OF_YEAR INT[\"7\"] ) | AOUT -> ^( MONTH_OF_YEAR INT[\"8\"] ) | SEPTEMBRE -> ^( MONTH_OF_YEAR INT[\"9\"] ) | OCTOBRE -> ^( MONTH_OF_YEAR INT[\"10\"] ) | NOVEMBRE -> ^( MONTH_OF_YEAR INT[\"11\"] ) | DECEMBRE -> ^( MONTH_OF_YEAR INT[\"12\"] ) )
            int alt65=12;
            try { dbg.enterDecision(65);

            switch ( input.LA(1) ) {
            case JANVIER:
                {
                alt65=1;
                }
                break;
            case FEVRIER:
                {
                alt65=2;
                }
                break;
            case MARS:
                {
                alt65=3;
                }
                break;
            case AVRIL:
                {
                alt65=4;
                }
                break;
            case MAI:
                {
                alt65=5;
                }
                break;
            case JUIN:
                {
                alt65=6;
                }
                break;
            case JUILLET:
                {
                alt65=7;
                }
                break;
            case AOUT:
                {
                alt65=8;
                }
                break;
            case SEPTEMBRE:
                {
                alt65=9;
                }
                break;
            case OCTOBRE:
                {
                alt65=10;
                }
                break;
            case NOVEMBRE:
                {
                alt65=11;
                }
                break;
            case DECEMBRE:
                {
                alt65=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:326:5: JANVIER
                    {
                    dbg.location(326,5);
                    JANVIER215=(Token)match(input,JANVIER,FOLLOW_JANVIER_in_relaxed_month3867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JANVIER.add(JANVIER215);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 326:15: -> ^( MONTH_OF_YEAR INT[\"1\"] )
                    {
                        dbg.location(326,18);
                        // com/joestelmach/natty/generated/DateParser.g:326:18: ^( MONTH_OF_YEAR INT[\"1\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(326,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(326,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:327:5: FEVRIER
                    {
                    dbg.location(327,5);
                    FEVRIER216=(Token)match(input,FEVRIER,FOLLOW_FEVRIER_in_relaxed_month3884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FEVRIER.add(FEVRIER216);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 327:15: -> ^( MONTH_OF_YEAR INT[\"2\"] )
                    {
                        dbg.location(327,18);
                        // com/joestelmach/natty/generated/DateParser.g:327:18: ^( MONTH_OF_YEAR INT[\"2\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(327,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(327,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "2"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:328:5: MARS
                    {
                    dbg.location(328,5);
                    MARS217=(Token)match(input,MARS,FOLLOW_MARS_in_relaxed_month3901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MARS.add(MARS217);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 328:15: -> ^( MONTH_OF_YEAR INT[\"3\"] )
                    {
                        dbg.location(328,18);
                        // com/joestelmach/natty/generated/DateParser.g:328:18: ^( MONTH_OF_YEAR INT[\"3\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(328,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(328,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "3"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:329:5: AVRIL
                    {
                    dbg.location(329,5);
                    AVRIL218=(Token)match(input,AVRIL,FOLLOW_AVRIL_in_relaxed_month3921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVRIL.add(AVRIL218);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 329:15: -> ^( MONTH_OF_YEAR INT[\"4\"] )
                    {
                        dbg.location(329,18);
                        // com/joestelmach/natty/generated/DateParser.g:329:18: ^( MONTH_OF_YEAR INT[\"4\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(329,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(329,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "4"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:330:5: MAI
                    {
                    dbg.location(330,5);
                    MAI219=(Token)match(input,MAI,FOLLOW_MAI_in_relaxed_month3940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAI.add(MAI219);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 330:15: -> ^( MONTH_OF_YEAR INT[\"5\"] )
                    {
                        dbg.location(330,18);
                        // com/joestelmach/natty/generated/DateParser.g:330:18: ^( MONTH_OF_YEAR INT[\"5\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(330,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(330,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "5"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:331:5: JUIN
                    {
                    dbg.location(331,5);
                    JUIN220=(Token)match(input,JUIN,FOLLOW_JUIN_in_relaxed_month3961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JUIN.add(JUIN220);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 331:15: -> ^( MONTH_OF_YEAR INT[\"6\"] )
                    {
                        dbg.location(331,18);
                        // com/joestelmach/natty/generated/DateParser.g:331:18: ^( MONTH_OF_YEAR INT[\"6\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(331,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(331,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "6"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // com/joestelmach/natty/generated/DateParser.g:332:5: JUILLET
                    {
                    dbg.location(332,5);
                    JUILLET221=(Token)match(input,JUILLET,FOLLOW_JUILLET_in_relaxed_month3981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JUILLET.add(JUILLET221);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 332:15: -> ^( MONTH_OF_YEAR INT[\"7\"] )
                    {
                        dbg.location(332,18);
                        // com/joestelmach/natty/generated/DateParser.g:332:18: ^( MONTH_OF_YEAR INT[\"7\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(332,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(332,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "7"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // com/joestelmach/natty/generated/DateParser.g:333:5: AOUT
                    {
                    dbg.location(333,5);
                    AOUT222=(Token)match(input,AOUT,FOLLOW_AOUT_in_relaxed_month3998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AOUT.add(AOUT222);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 333:15: -> ^( MONTH_OF_YEAR INT[\"8\"] )
                    {
                        dbg.location(333,18);
                        // com/joestelmach/natty/generated/DateParser.g:333:18: ^( MONTH_OF_YEAR INT[\"8\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(333,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(333,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "8"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // com/joestelmach/natty/generated/DateParser.g:334:5: SEPTEMBRE
                    {
                    dbg.location(334,5);
                    SEPTEMBRE223=(Token)match(input,SEPTEMBRE,FOLLOW_SEPTEMBRE_in_relaxed_month4018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPTEMBRE.add(SEPTEMBRE223);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 334:15: -> ^( MONTH_OF_YEAR INT[\"9\"] )
                    {
                        dbg.location(334,18);
                        // com/joestelmach/natty/generated/DateParser.g:334:18: ^( MONTH_OF_YEAR INT[\"9\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(334,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(334,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "9"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // com/joestelmach/natty/generated/DateParser.g:335:5: OCTOBRE
                    {
                    dbg.location(335,5);
                    OCTOBRE224=(Token)match(input,OCTOBRE,FOLLOW_OCTOBRE_in_relaxed_month4033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OCTOBRE.add(OCTOBRE224);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 335:15: -> ^( MONTH_OF_YEAR INT[\"10\"] )
                    {
                        dbg.location(335,18);
                        // com/joestelmach/natty/generated/DateParser.g:335:18: ^( MONTH_OF_YEAR INT[\"10\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(335,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(335,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "10"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // com/joestelmach/natty/generated/DateParser.g:336:5: NOVEMBRE
                    {
                    dbg.location(336,5);
                    NOVEMBRE225=(Token)match(input,NOVEMBRE,FOLLOW_NOVEMBRE_in_relaxed_month4050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOVEMBRE.add(NOVEMBRE225);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 336:15: -> ^( MONTH_OF_YEAR INT[\"11\"] )
                    {
                        dbg.location(336,18);
                        // com/joestelmach/natty/generated/DateParser.g:336:18: ^( MONTH_OF_YEAR INT[\"11\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(336,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(336,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "11"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // com/joestelmach/natty/generated/DateParser.g:337:5: DECEMBRE
                    {
                    dbg.location(337,5);
                    DECEMBRE226=(Token)match(input,DECEMBRE,FOLLOW_DECEMBRE_in_relaxed_month4066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECEMBRE.add(DECEMBRE226);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 337:15: -> ^( MONTH_OF_YEAR INT[\"12\"] )
                    {
                        dbg.location(337,18);
                        // com/joestelmach/natty/generated/DateParser.g:337:18: ^( MONTH_OF_YEAR INT[\"12\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(337,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                        dbg.location(337,34);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "12"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_month");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_month"

    public static class relaxed_day_of_month_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_day_of_month"
    // com/joestelmach/natty/generated/DateParser.g:340:1: relaxed_day_of_month : spelled_or_int_01_to_31_optional_prefix -> ^( DAY_OF_MONTH spelled_or_int_01_to_31_optional_prefix ) ;
    public final DateParser.relaxed_day_of_month_return relaxed_day_of_month() throws RecognitionException {
        DateParser.relaxed_day_of_month_return retval = new DateParser.relaxed_day_of_month_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.spelled_or_int_01_to_31_optional_prefix_return spelled_or_int_01_to_31_optional_prefix227 = null;


        RewriteRuleSubtreeStream stream_spelled_or_int_01_to_31_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_01_to_31_optional_prefix");
        try { dbg.enterRule(getGrammarFileName(), "relaxed_day_of_month");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:341:3: ( spelled_or_int_01_to_31_optional_prefix -> ^( DAY_OF_MONTH spelled_or_int_01_to_31_optional_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:341:5: spelled_or_int_01_to_31_optional_prefix
            {
            dbg.location(341,5);
            pushFollow(FOLLOW_spelled_or_int_01_to_31_optional_prefix_in_relaxed_day_of_month4091);
            spelled_or_int_01_to_31_optional_prefix227=spelled_or_int_01_to_31_optional_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_spelled_or_int_01_to_31_optional_prefix.add(spelled_or_int_01_to_31_optional_prefix227.getTree());


            // AST REWRITE
            // elements: spelled_or_int_01_to_31_optional_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:7: -> ^( DAY_OF_MONTH spelled_or_int_01_to_31_optional_prefix )
            {
                dbg.location(342,10);
                // com/joestelmach/natty/generated/DateParser.g:342:10: ^( DAY_OF_MONTH spelled_or_int_01_to_31_optional_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(342,12);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_1);

                dbg.location(342,25);
                adaptor.addChild(root_1, stream_spelled_or_int_01_to_31_optional_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(343, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_day_of_month");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_day_of_month"

    public static class relaxed_day_of_year_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_day_of_year"
    // com/joestelmach/natty/generated/DateParser.g:345:1: relaxed_day_of_year : spelled_or_int_01_to_31_optional_prefix -> ^( DAY_OF_YEAR spelled_or_int_01_to_31_optional_prefix ) ;
    public final DateParser.relaxed_day_of_year_return relaxed_day_of_year() throws RecognitionException {
        DateParser.relaxed_day_of_year_return retval = new DateParser.relaxed_day_of_year_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.spelled_or_int_01_to_31_optional_prefix_return spelled_or_int_01_to_31_optional_prefix228 = null;


        RewriteRuleSubtreeStream stream_spelled_or_int_01_to_31_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_01_to_31_optional_prefix");
        try { dbg.enterRule(getGrammarFileName(), "relaxed_day_of_year");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(345, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:346:3: ( spelled_or_int_01_to_31_optional_prefix -> ^( DAY_OF_YEAR spelled_or_int_01_to_31_optional_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:346:5: spelled_or_int_01_to_31_optional_prefix
            {
            dbg.location(346,5);
            pushFollow(FOLLOW_spelled_or_int_01_to_31_optional_prefix_in_relaxed_day_of_year4120);
            spelled_or_int_01_to_31_optional_prefix228=spelled_or_int_01_to_31_optional_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_spelled_or_int_01_to_31_optional_prefix.add(spelled_or_int_01_to_31_optional_prefix228.getTree());


            // AST REWRITE
            // elements: spelled_or_int_01_to_31_optional_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:7: -> ^( DAY_OF_YEAR spelled_or_int_01_to_31_optional_prefix )
            {
                dbg.location(347,10);
                // com/joestelmach/natty/generated/DateParser.g:347:10: ^( DAY_OF_YEAR spelled_or_int_01_to_31_optional_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(347,12);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_1);

                dbg.location(347,24);
                adaptor.addChild(root_1, stream_spelled_or_int_01_to_31_optional_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(348, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_day_of_year");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_day_of_year"

    public static class relaxed_year_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relaxed_year"
    // com/joestelmach/natty/generated/DateParser.g:350:1: relaxed_year : int_four_digits -> ^( YEAR_OF int_four_digits ) ;
    public final DateParser.relaxed_year_return relaxed_year() throws RecognitionException {
        DateParser.relaxed_year_return retval = new DateParser.relaxed_year_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_four_digits_return int_four_digits229 = null;


        RewriteRuleSubtreeStream stream_int_four_digits=new RewriteRuleSubtreeStream(adaptor,"rule int_four_digits");
        try { dbg.enterRule(getGrammarFileName(), "relaxed_year");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(350, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:351:3: ( int_four_digits -> ^( YEAR_OF int_four_digits ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:351:5: int_four_digits
            {
            dbg.location(351,5);
            pushFollow(FOLLOW_int_four_digits_in_relaxed_year4149);
            int_four_digits229=int_four_digits();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_four_digits.add(int_four_digits229.getTree());


            // AST REWRITE
            // elements: int_four_digits
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:7: -> ^( YEAR_OF int_four_digits )
            {
                dbg.location(352,10);
                // com/joestelmach/natty/generated/DateParser.g:352:10: ^( YEAR_OF int_four_digits )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(352,12);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YEAR_OF, "YEAR_OF"), root_1);

                dbg.location(352,20);
                adaptor.addChild(root_1, stream_int_four_digits.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(353, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relaxed_year");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relaxed_year"

    public static class formal_date_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_date"
    // com/joestelmach/natty/generated/DateParser.g:357:1: formal_date : ( relaxed_day_of_week )? formal_day_of_month formal_date_separator formal_month_of_year ( formal_date_separator formal_year )? -> ^( EXPLICIT_DATE formal_month_of_year formal_day_of_month ( relaxed_day_of_week )? ( formal_year )? ) ;
    public final DateParser.formal_date_return formal_date() throws RecognitionException {
        DateParser.formal_date_return retval = new DateParser.formal_date_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.relaxed_day_of_week_return relaxed_day_of_week230 = null;

        DateParser.formal_day_of_month_return formal_day_of_month231 = null;

        DateParser.formal_date_separator_return formal_date_separator232 = null;

        DateParser.formal_month_of_year_return formal_month_of_year233 = null;

        DateParser.formal_date_separator_return formal_date_separator234 = null;

        DateParser.formal_year_return formal_year235 = null;


        RewriteRuleSubtreeStream stream_formal_year=new RewriteRuleSubtreeStream(adaptor,"rule formal_year");
        RewriteRuleSubtreeStream stream_relaxed_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_week");
        RewriteRuleSubtreeStream stream_formal_day_of_month=new RewriteRuleSubtreeStream(adaptor,"rule formal_day_of_month");
        RewriteRuleSubtreeStream stream_formal_date_separator=new RewriteRuleSubtreeStream(adaptor,"rule formal_date_separator");
        RewriteRuleSubtreeStream stream_formal_month_of_year=new RewriteRuleSubtreeStream(adaptor,"rule formal_month_of_year");
        try { dbg.enterRule(getGrammarFileName(), "formal_date");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(357, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:359:3: ( ( relaxed_day_of_week )? formal_day_of_month formal_date_separator formal_month_of_year ( formal_date_separator formal_year )? -> ^( EXPLICIT_DATE formal_month_of_year formal_day_of_month ( relaxed_day_of_week )? ( formal_year )? ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:359:5: ( relaxed_day_of_week )? formal_day_of_month formal_date_separator formal_month_of_year ( formal_date_separator formal_year )?
            {
            dbg.location(359,5);
            // com/joestelmach/natty/generated/DateParser.g:359:5: ( relaxed_day_of_week )?
            int alt66=2;
            try { dbg.enterSubRule(66);
            try { dbg.enterDecision(66);

            switch ( input.LA(1) ) {
                case DIMANCHE:
                case LUNDI:
                case MARDI:
                case MERCREDI:
                case JEUDI:
                case VENDREDI:
                case SAMEDI:
                case PASSE:
                case DANS:
                case CE:
                case SUIVANT:
                case DERNIER:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                case UN:
                case DEUX:
                case TROIS:
                case QUATRE:
                case CINQ:
                case SIX:
                case SEPT:
                case HUIT:
                case NEUF:
                case DIX:
                case ONZE:
                case DOUZE:
                case TREIZE:
                case QUATORZE:
                case QUINZE:
                case SEIZE:
                case VINGT:
                case TRENTE:
                case PREMIER:
                    {
                    alt66=1;
                    }
                    break;
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                    {
                    switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                        case INT_01:
                        case INT_02:
                        case INT_03:
                        case INT_04:
                        case INT_05:
                        case INT_06:
                        case INT_07:
                        case INT_08:
                        case INT_09:
                        case INT_1:
                        case INT_2:
                        case INT_3:
                        case INT_4:
                        case INT_5:
                        case INT_6:
                        case INT_7:
                        case INT_8:
                        case INT_9:
                        case INT_10:
                        case INT_11:
                        case INT_12:
                        case INT_13:
                        case INT_14:
                        case INT_15:
                        case INT_16:
                        case INT_17:
                        case INT_18:
                        case INT_19:
                        case INT_20:
                        case INT_21:
                        case INT_22:
                        case INT_23:
                        case INT_24:
                        case INT_25:
                        case INT_26:
                        case INT_27:
                        case INT_28:
                        case INT_29:
                        case INT_30:
                        case INT_31:
                        case INT_32:
                        case INT_33:
                        case INT_34:
                        case INT_35:
                        case INT_36:
                        case INT_37:
                        case INT_38:
                        case INT_39:
                        case INT_40:
                        case INT_41:
                        case INT_42:
                        case INT_43:
                        case INT_44:
                        case INT_45:
                        case INT_46:
                        case INT_47:
                        case INT_48:
                        case INT_49:
                        case INT_50:
                        case INT_51:
                        case INT_52:
                        case INT_53:
                        case INT_54:
                        case INT_55:
                        case INT_56:
                        case INT_57:
                        case INT_58:
                        case INT_59:
                        case INT_60:
                        case INT_61:
                        case INT_62:
                        case INT_63:
                        case INT_64:
                        case INT_65:
                        case INT_66:
                        case INT_67:
                        case INT_68:
                        case INT_69:
                        case INT_70:
                        case INT_71:
                        case INT_72:
                        case INT_73:
                        case INT_74:
                        case INT_75:
                        case INT_76:
                        case INT_77:
                        case INT_78:
                        case INT_79:
                        case INT_80:
                        case INT_81:
                        case INT_82:
                        case INT_83:
                        case INT_84:
                        case INT_85:
                        case INT_86:
                        case INT_87:
                        case INT_88:
                        case INT_89:
                        case INT_90:
                        case INT_91:
                        case INT_92:
                        case INT_93:
                        case INT_94:
                        case INT_95:
                        case INT_96:
                        case INT_97:
                        case INT_98:
                        case INT_99:
                            {
                            alt66=1;
                            }
                            break;
                    }

                    }
                    break;
                case INT_1:
                case INT_2:
                case INT_3:
                case INT_4:
                case INT_5:
                case INT_6:
                case INT_7:
                case INT_8:
                case INT_9:
                    {
                    switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                        case INT_01:
                        case INT_02:
                        case INT_03:
                        case INT_04:
                        case INT_05:
                        case INT_06:
                        case INT_07:
                        case INT_08:
                        case INT_09:
                        case INT_1:
                        case INT_2:
                        case INT_3:
                        case INT_4:
                        case INT_5:
                        case INT_6:
                        case INT_7:
                        case INT_8:
                        case INT_9:
                        case INT_10:
                        case INT_11:
                        case INT_12:
                        case INT_13:
                        case INT_14:
                        case INT_15:
                        case INT_16:
                        case INT_17:
                        case INT_18:
                        case INT_19:
                        case INT_20:
                        case INT_21:
                        case INT_22:
                        case INT_23:
                        case INT_24:
                        case INT_25:
                        case INT_26:
                        case INT_27:
                        case INT_28:
                        case INT_29:
                        case INT_30:
                        case INT_31:
                        case INT_32:
                        case INT_33:
                        case INT_34:
                        case INT_35:
                        case INT_36:
                        case INT_37:
                        case INT_38:
                        case INT_39:
                        case INT_40:
                        case INT_41:
                        case INT_42:
                        case INT_43:
                        case INT_44:
                        case INT_45:
                        case INT_46:
                        case INT_47:
                        case INT_48:
                        case INT_49:
                        case INT_50:
                        case INT_51:
                        case INT_52:
                        case INT_53:
                        case INT_54:
                        case INT_55:
                        case INT_56:
                        case INT_57:
                        case INT_58:
                        case INT_59:
                        case INT_60:
                        case INT_61:
                        case INT_62:
                        case INT_63:
                        case INT_64:
                        case INT_65:
                        case INT_66:
                        case INT_67:
                        case INT_68:
                        case INT_69:
                        case INT_70:
                        case INT_71:
                        case INT_72:
                        case INT_73:
                        case INT_74:
                        case INT_75:
                        case INT_76:
                        case INT_77:
                        case INT_78:
                        case INT_79:
                        case INT_80:
                        case INT_81:
                        case INT_82:
                        case INT_83:
                        case INT_84:
                        case INT_85:
                        case INT_86:
                        case INT_87:
                        case INT_88:
                        case INT_89:
                        case INT_90:
                        case INT_91:
                        case INT_92:
                        case INT_93:
                        case INT_94:
                        case INT_95:
                        case INT_96:
                        case INT_97:
                        case INT_98:
                        case INT_99:
                            {
                            alt66=1;
                            }
                            break;
                    }

                    }
                    break;
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                    {
                    switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                        case INT_01:
                        case INT_02:
                        case INT_03:
                        case INT_04:
                        case INT_05:
                        case INT_06:
                        case INT_07:
                        case INT_08:
                        case INT_09:
                        case INT_1:
                        case INT_2:
                        case INT_3:
                        case INT_4:
                        case INT_5:
                        case INT_6:
                        case INT_7:
                        case INT_8:
                        case INT_9:
                        case INT_10:
                        case INT_11:
                        case INT_12:
                        case INT_13:
                        case INT_14:
                        case INT_15:
                        case INT_16:
                        case INT_17:
                        case INT_18:
                        case INT_19:
                        case INT_20:
                        case INT_21:
                        case INT_22:
                        case INT_23:
                        case INT_24:
                        case INT_25:
                        case INT_26:
                        case INT_27:
                        case INT_28:
                        case INT_29:
                        case INT_30:
                        case INT_31:
                        case INT_32:
                        case INT_33:
                        case INT_34:
                        case INT_35:
                        case INT_36:
                        case INT_37:
                        case INT_38:
                        case INT_39:
                        case INT_40:
                        case INT_41:
                        case INT_42:
                        case INT_43:
                        case INT_44:
                        case INT_45:
                        case INT_46:
                        case INT_47:
                        case INT_48:
                        case INT_49:
                        case INT_50:
                        case INT_51:
                        case INT_52:
                        case INT_53:
                        case INT_54:
                        case INT_55:
                        case INT_56:
                        case INT_57:
                        case INT_58:
                        case INT_59:
                        case INT_60:
                        case INT_61:
                        case INT_62:
                        case INT_63:
                        case INT_64:
                        case INT_65:
                        case INT_66:
                        case INT_67:
                        case INT_68:
                        case INT_69:
                        case INT_70:
                        case INT_71:
                        case INT_72:
                        case INT_73:
                        case INT_74:
                        case INT_75:
                        case INT_76:
                        case INT_77:
                        case INT_78:
                        case INT_79:
                        case INT_80:
                        case INT_81:
                        case INT_82:
                        case INT_83:
                        case INT_84:
                        case INT_85:
                        case INT_86:
                        case INT_87:
                        case INT_88:
                        case INT_89:
                        case INT_90:
                        case INT_91:
                        case INT_92:
                        case INT_93:
                        case INT_94:
                        case INT_95:
                        case INT_96:
                        case INT_97:
                        case INT_98:
                        case INT_99:
                            {
                            alt66=1;
                            }
                            break;
                    }

                    }
                    break;
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                    {
                    switch ( input.LA(2) ) {
                        case WHITE_SPACE:
                        case INT_01:
                        case INT_02:
                        case INT_03:
                        case INT_04:
                        case INT_05:
                        case INT_06:
                        case INT_07:
                        case INT_08:
                        case INT_09:
                        case INT_1:
                        case INT_2:
                        case INT_3:
                        case INT_4:
                        case INT_5:
                        case INT_6:
                        case INT_7:
                        case INT_8:
                        case INT_9:
                        case INT_10:
                        case INT_11:
                        case INT_12:
                        case INT_13:
                        case INT_14:
                        case INT_15:
                        case INT_16:
                        case INT_17:
                        case INT_18:
                        case INT_19:
                        case INT_20:
                        case INT_21:
                        case INT_22:
                        case INT_23:
                        case INT_24:
                        case INT_25:
                        case INT_26:
                        case INT_27:
                        case INT_28:
                        case INT_29:
                        case INT_30:
                        case INT_31:
                        case INT_32:
                        case INT_33:
                        case INT_34:
                        case INT_35:
                        case INT_36:
                        case INT_37:
                        case INT_38:
                        case INT_39:
                        case INT_40:
                        case INT_41:
                        case INT_42:
                        case INT_43:
                        case INT_44:
                        case INT_45:
                        case INT_46:
                        case INT_47:
                        case INT_48:
                        case INT_49:
                        case INT_50:
                        case INT_51:
                        case INT_52:
                        case INT_53:
                        case INT_54:
                        case INT_55:
                        case INT_56:
                        case INT_57:
                        case INT_58:
                        case INT_59:
                        case INT_60:
                        case INT_61:
                        case INT_62:
                        case INT_63:
                        case INT_64:
                        case INT_65:
                        case INT_66:
                        case INT_67:
                        case INT_68:
                        case INT_69:
                        case INT_70:
                        case INT_71:
                        case INT_72:
                        case INT_73:
                        case INT_74:
                        case INT_75:
                        case INT_76:
                        case INT_77:
                        case INT_78:
                        case INT_79:
                        case INT_80:
                        case INT_81:
                        case INT_82:
                        case INT_83:
                        case INT_84:
                        case INT_85:
                        case INT_86:
                        case INT_87:
                        case INT_88:
                        case INT_89:
                        case INT_90:
                        case INT_91:
                        case INT_92:
                        case INT_93:
                        case INT_94:
                        case INT_95:
                        case INT_96:
                        case INT_97:
                        case INT_98:
                        case INT_99:
                            {
                            alt66=1;
                            }
                            break;
                    }

                    }
                    break;
            }

            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:359:5: relaxed_day_of_week
                    {
                    dbg.location(359,5);
                    pushFollow(FOLLOW_relaxed_day_of_week_in_formal_date4185);
                    relaxed_day_of_week230=relaxed_day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_week.add(relaxed_day_of_week230.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(66);}

            dbg.location(359,26);
            pushFollow(FOLLOW_formal_day_of_month_in_formal_date4188);
            formal_day_of_month231=formal_day_of_month();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formal_day_of_month.add(formal_day_of_month231.getTree());
            dbg.location(359,46);
            pushFollow(FOLLOW_formal_date_separator_in_formal_date4190);
            formal_date_separator232=formal_date_separator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formal_date_separator.add(formal_date_separator232.getTree());
            dbg.location(359,68);
            pushFollow(FOLLOW_formal_month_of_year_in_formal_date4192);
            formal_month_of_year233=formal_month_of_year();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formal_month_of_year.add(formal_month_of_year233.getTree());
            dbg.location(359,89);
            // com/joestelmach/natty/generated/DateParser.g:359:89: ( formal_date_separator formal_year )?
            int alt67=2;
            try { dbg.enterSubRule(67);
            try { dbg.enterDecision(67);

            switch ( input.LA(1) ) {
                case DASH:
                case SLASH:
                    {
                    alt67=1;
                    }
                    break;
            }

            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:359:90: formal_date_separator formal_year
                    {
                    dbg.location(359,90);
                    pushFollow(FOLLOW_formal_date_separator_in_formal_date4195);
                    formal_date_separator234=formal_date_separator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formal_date_separator.add(formal_date_separator234.getTree());
                    dbg.location(359,112);
                    pushFollow(FOLLOW_formal_year_in_formal_date4197);
                    formal_year235=formal_year();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formal_year.add(formal_year235.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(67);}



            // AST REWRITE
            // elements: formal_year, formal_month_of_year, relaxed_day_of_week, formal_day_of_month
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:7: -> ^( EXPLICIT_DATE formal_month_of_year formal_day_of_month ( relaxed_day_of_week )? ( formal_year )? )
            {
                dbg.location(360,10);
                // com/joestelmach/natty/generated/DateParser.g:360:10: ^( EXPLICIT_DATE formal_month_of_year formal_day_of_month ( relaxed_day_of_week )? ( formal_year )? )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(360,12);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_DATE, "EXPLICIT_DATE"), root_1);

                dbg.location(360,26);
                adaptor.addChild(root_1, stream_formal_month_of_year.nextTree());
                dbg.location(360,47);
                adaptor.addChild(root_1, stream_formal_day_of_month.nextTree());
                dbg.location(360,67);
                // com/joestelmach/natty/generated/DateParser.g:360:67: ( relaxed_day_of_week )?
                if ( stream_relaxed_day_of_week.hasNext() ) {
                    dbg.location(360,67);
                    adaptor.addChild(root_1, stream_relaxed_day_of_week.nextTree());

                }
                stream_relaxed_day_of_week.reset();
                dbg.location(360,88);
                // com/joestelmach/natty/generated/DateParser.g:360:88: ( formal_year )?
                if ( stream_formal_year.hasNext() ) {
                    dbg.location(360,88);
                    adaptor.addChild(root_1, stream_formal_year.nextTree());

                }
                stream_formal_year.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(361, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "formal_date");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "formal_date"

    public static class formal_month_of_year_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_month_of_year"
    // com/joestelmach/natty/generated/DateParser.g:363:1: formal_month_of_year : int_01_to_12_optional_prefix -> ^( MONTH_OF_YEAR int_01_to_12_optional_prefix ) ;
    public final DateParser.formal_month_of_year_return formal_month_of_year() throws RecognitionException {
        DateParser.formal_month_of_year_return retval = new DateParser.formal_month_of_year_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_01_to_12_optional_prefix_return int_01_to_12_optional_prefix236 = null;


        RewriteRuleSubtreeStream stream_int_01_to_12_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule int_01_to_12_optional_prefix");
        try { dbg.enterRule(getGrammarFileName(), "formal_month_of_year");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(363, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:364:3: ( int_01_to_12_optional_prefix -> ^( MONTH_OF_YEAR int_01_to_12_optional_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:364:5: int_01_to_12_optional_prefix
            {
            dbg.location(364,5);
            pushFollow(FOLLOW_int_01_to_12_optional_prefix_in_formal_month_of_year4236);
            int_01_to_12_optional_prefix236=int_01_to_12_optional_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_01_to_12_optional_prefix.add(int_01_to_12_optional_prefix236.getTree());


            // AST REWRITE
            // elements: int_01_to_12_optional_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:34: -> ^( MONTH_OF_YEAR int_01_to_12_optional_prefix )
            {
                dbg.location(364,37);
                // com/joestelmach/natty/generated/DateParser.g:364:37: ^( MONTH_OF_YEAR int_01_to_12_optional_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(364,39);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MONTH_OF_YEAR, "MONTH_OF_YEAR"), root_1);

                dbg.location(364,53);
                adaptor.addChild(root_1, stream_int_01_to_12_optional_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(365, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "formal_month_of_year");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "formal_month_of_year"

    public static class formal_day_of_month_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_day_of_month"
    // com/joestelmach/natty/generated/DateParser.g:367:1: formal_day_of_month : int_01_to_31_optional_prefix -> ^( DAY_OF_MONTH int_01_to_31_optional_prefix ) ;
    public final DateParser.formal_day_of_month_return formal_day_of_month() throws RecognitionException {
        DateParser.formal_day_of_month_return retval = new DateParser.formal_day_of_month_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_01_to_31_optional_prefix_return int_01_to_31_optional_prefix237 = null;


        RewriteRuleSubtreeStream stream_int_01_to_31_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule int_01_to_31_optional_prefix");
        try { dbg.enterRule(getGrammarFileName(), "formal_day_of_month");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(367, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:368:3: ( int_01_to_31_optional_prefix -> ^( DAY_OF_MONTH int_01_to_31_optional_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:368:5: int_01_to_31_optional_prefix
            {
            dbg.location(368,5);
            pushFollow(FOLLOW_int_01_to_31_optional_prefix_in_formal_day_of_month4259);
            int_01_to_31_optional_prefix237=int_01_to_31_optional_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_01_to_31_optional_prefix.add(int_01_to_31_optional_prefix237.getTree());


            // AST REWRITE
            // elements: int_01_to_31_optional_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:34: -> ^( DAY_OF_MONTH int_01_to_31_optional_prefix )
            {
                dbg.location(368,37);
                // com/joestelmach/natty/generated/DateParser.g:368:37: ^( DAY_OF_MONTH int_01_to_31_optional_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(368,39);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_1);

                dbg.location(368,52);
                adaptor.addChild(root_1, stream_int_01_to_31_optional_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(369, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "formal_day_of_month");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "formal_day_of_month"

    public static class formal_year_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_year"
    // com/joestelmach/natty/generated/DateParser.g:371:1: formal_year : ( formal_year_four_digits | int_00_to_99_mandatory_prefix -> ^( YEAR_OF int_00_to_99_mandatory_prefix ) );
    public final DateParser.formal_year_return formal_year() throws RecognitionException {
        DateParser.formal_year_return retval = new DateParser.formal_year_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.formal_year_four_digits_return formal_year_four_digits238 = null;

        DateParser_NumericRules.int_00_to_99_mandatory_prefix_return int_00_to_99_mandatory_prefix239 = null;


        RewriteRuleSubtreeStream stream_int_00_to_99_mandatory_prefix=new RewriteRuleSubtreeStream(adaptor,"rule int_00_to_99_mandatory_prefix");
        try { dbg.enterRule(getGrammarFileName(), "formal_year");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(371, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:372:3: ( formal_year_four_digits | int_00_to_99_mandatory_prefix -> ^( YEAR_OF int_00_to_99_mandatory_prefix ) )
            int alt68=2;
            try { dbg.enterDecision(68);

            switch ( input.LA(1) ) {
            case INT_00:
                {
                switch ( input.LA(2) ) {
                case INT_00:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                    {
                    alt68=1;
                    }
                    break;
                case EOF:
                case WHITE_SPACE:
                case COMMA:
                    {
                    alt68=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_10:
            case INT_11:
            case INT_12:
                {
                switch ( input.LA(2) ) {
                case INT_00:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                    {
                    alt68=1;
                    }
                    break;
                case EOF:
                case WHITE_SPACE:
                case COMMA:
                    {
                    alt68=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
                {
                switch ( input.LA(2) ) {
                case INT_00:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                    {
                    alt68=1;
                    }
                    break;
                case EOF:
                case WHITE_SPACE:
                case COMMA:
                    {
                    alt68=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case INT_24:
            case INT_25:
            case INT_26:
            case INT_27:
            case INT_28:
            case INT_29:
            case INT_30:
            case INT_31:
                {
                switch ( input.LA(2) ) {
                case INT_00:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                    {
                    alt68=1;
                    }
                    break;
                case EOF:
                case WHITE_SPACE:
                case COMMA:
                    {
                    alt68=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case INT_32:
            case INT_33:
            case INT_34:
            case INT_35:
            case INT_36:
            case INT_37:
            case INT_38:
            case INT_39:
            case INT_40:
            case INT_41:
            case INT_42:
            case INT_43:
            case INT_44:
            case INT_45:
            case INT_46:
            case INT_47:
            case INT_48:
            case INT_49:
            case INT_50:
            case INT_51:
            case INT_52:
            case INT_53:
            case INT_54:
            case INT_55:
            case INT_56:
            case INT_57:
            case INT_58:
            case INT_59:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case WHITE_SPACE:
                case COMMA:
                    {
                    alt68=2;
                    }
                    break;
                case INT_00:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                    {
                    alt68=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 5, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case INT_60:
            case INT_61:
            case INT_62:
            case INT_63:
            case INT_64:
            case INT_65:
            case INT_66:
            case INT_67:
            case INT_68:
            case INT_69:
            case INT_70:
            case INT_71:
            case INT_72:
            case INT_73:
            case INT_74:
            case INT_75:
            case INT_76:
            case INT_77:
            case INT_78:
            case INT_79:
            case INT_80:
            case INT_81:
            case INT_82:
            case INT_83:
            case INT_84:
            case INT_85:
            case INT_86:
            case INT_87:
            case INT_88:
            case INT_89:
            case INT_90:
            case INT_91:
            case INT_92:
            case INT_93:
            case INT_94:
            case INT_95:
            case INT_96:
            case INT_97:
            case INT_98:
            case INT_99:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case WHITE_SPACE:
                case COMMA:
                    {
                    alt68=2;
                    }
                    break;
                case INT_00:
                case INT_01:
                case INT_02:
                case INT_03:
                case INT_04:
                case INT_05:
                case INT_06:
                case INT_07:
                case INT_08:
                case INT_09:
                case INT_10:
                case INT_11:
                case INT_12:
                case INT_13:
                case INT_14:
                case INT_15:
                case INT_16:
                case INT_17:
                case INT_18:
                case INT_19:
                case INT_20:
                case INT_21:
                case INT_22:
                case INT_23:
                case INT_24:
                case INT_25:
                case INT_26:
                case INT_27:
                case INT_28:
                case INT_29:
                case INT_30:
                case INT_31:
                case INT_32:
                case INT_33:
                case INT_34:
                case INT_35:
                case INT_36:
                case INT_37:
                case INT_38:
                case INT_39:
                case INT_40:
                case INT_41:
                case INT_42:
                case INT_43:
                case INT_44:
                case INT_45:
                case INT_46:
                case INT_47:
                case INT_48:
                case INT_49:
                case INT_50:
                case INT_51:
                case INT_52:
                case INT_53:
                case INT_54:
                case INT_55:
                case INT_56:
                case INT_57:
                case INT_58:
                case INT_59:
                case INT_60:
                case INT_61:
                case INT_62:
                case INT_63:
                case INT_64:
                case INT_65:
                case INT_66:
                case INT_67:
                case INT_68:
                case INT_69:
                case INT_70:
                case INT_71:
                case INT_72:
                case INT_73:
                case INT_74:
                case INT_75:
                case INT_76:
                case INT_77:
                case INT_78:
                case INT_79:
                case INT_80:
                case INT_81:
                case INT_82:
                case INT_83:
                case INT_84:
                case INT_85:
                case INT_86:
                case INT_87:
                case INT_88:
                case INT_89:
                case INT_90:
                case INT_91:
                case INT_92:
                case INT_93:
                case INT_94:
                case INT_95:
                case INT_96:
                case INT_97:
                case INT_98:
                case INT_99:
                    {
                    alt68=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 6, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(68);}

            switch (alt68) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:372:5: formal_year_four_digits
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(372,5);
                    pushFollow(FOLLOW_formal_year_four_digits_in_formal_year4282);
                    formal_year_four_digits238=formal_year_four_digits();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_year_four_digits238.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:373:5: int_00_to_99_mandatory_prefix
                    {
                    dbg.location(373,5);
                    pushFollow(FOLLOW_int_00_to_99_mandatory_prefix_in_formal_year4288);
                    int_00_to_99_mandatory_prefix239=int_00_to_99_mandatory_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_int_00_to_99_mandatory_prefix.add(int_00_to_99_mandatory_prefix239.getTree());


                    // AST REWRITE
                    // elements: int_00_to_99_mandatory_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 373:35: -> ^( YEAR_OF int_00_to_99_mandatory_prefix )
                    {
                        dbg.location(373,38);
                        // com/joestelmach/natty/generated/DateParser.g:373:38: ^( YEAR_OF int_00_to_99_mandatory_prefix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(373,40);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YEAR_OF, "YEAR_OF"), root_1);

                        dbg.location(373,48);
                        adaptor.addChild(root_1, stream_int_00_to_99_mandatory_prefix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(374, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "formal_year");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "formal_year"

    public static class formal_year_four_digits_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_year_four_digits"
    // com/joestelmach/natty/generated/DateParser.g:376:1: formal_year_four_digits : int_four_digits -> ^( YEAR_OF int_four_digits ) ;
    public final DateParser.formal_year_four_digits_return formal_year_four_digits() throws RecognitionException {
        DateParser.formal_year_four_digits_return retval = new DateParser.formal_year_four_digits_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_four_digits_return int_four_digits240 = null;


        RewriteRuleSubtreeStream stream_int_four_digits=new RewriteRuleSubtreeStream(adaptor,"rule int_four_digits");
        try { dbg.enterRule(getGrammarFileName(), "formal_year_four_digits");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(376, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:377:3: ( int_four_digits -> ^( YEAR_OF int_four_digits ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:377:5: int_four_digits
            {
            dbg.location(377,5);
            pushFollow(FOLLOW_int_four_digits_in_formal_year_four_digits4311);
            int_four_digits240=int_four_digits();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_four_digits.add(int_four_digits240.getTree());


            // AST REWRITE
            // elements: int_four_digits
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:21: -> ^( YEAR_OF int_four_digits )
            {
                dbg.location(377,24);
                // com/joestelmach/natty/generated/DateParser.g:377:24: ^( YEAR_OF int_four_digits )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(377,26);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YEAR_OF, "YEAR_OF"), root_1);

                dbg.location(377,34);
                adaptor.addChild(root_1, stream_int_four_digits.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(378, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "formal_year_four_digits");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "formal_year_four_digits"

    public static class formal_date_separator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_date_separator"
    // com/joestelmach/natty/generated/DateParser.g:380:1: formal_date_separator : ( DASH | SLASH );
    public final DateParser.formal_date_separator_return formal_date_separator() throws RecognitionException {
        DateParser.formal_date_separator_return retval = new DateParser.formal_date_separator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set241=null;

        Object set241_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "formal_date_separator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(380, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:381:3: ( DASH | SLASH )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(381,3);
            set241=(Token)input.LT(1);
            if ( input.LA(1)==DASH||input.LA(1)==SLASH ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set241));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(383, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "formal_date_separator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "formal_date_separator"

    public static class relative_date_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_date"
    // com/joestelmach/natty/generated/DateParser.g:387:1: relative_date : ( day_of_week WHITE_SPACE relative_date_prefix -> ^( RELATIVE_DATE ^( SEEK relative_date_prefix day_of_week ) ) | day_of_week -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) | relaxed_month -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) ) | spelled_or_int_optional_prefix WHITE_SPACE relative_target WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix relative_target ) ) | relative_date_direction WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_target -> ^( RELATIVE_DATE ^( SEEK relative_date_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_target ) ) | named_relative_date );
    public final DateParser.relative_date_return relative_date() throws RecognitionException {
        DateParser.relative_date_return retval = new DateParser.relative_date_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE243=null;
        Token WHITE_SPACE248=null;
        Token WHITE_SPACE250=null;
        Token WHITE_SPACE253=null;
        Token WHITE_SPACE255=null;
        DateParser.day_of_week_return day_of_week242 = null;

        DateParser.relative_date_prefix_return relative_date_prefix244 = null;

        DateParser.day_of_week_return day_of_week245 = null;

        DateParser.relaxed_month_return relaxed_month246 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix247 = null;

        DateParser.relative_target_return relative_target249 = null;

        DateParser.relative_date_suffix_return relative_date_suffix251 = null;

        DateParser.relative_date_direction_return relative_date_direction252 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix254 = null;

        DateParser.relative_target_return relative_target256 = null;

        DateParser.named_relative_date_return named_relative_date257 = null;


        Object WHITE_SPACE243_tree=null;
        Object WHITE_SPACE248_tree=null;
        Object WHITE_SPACE250_tree=null;
        Object WHITE_SPACE253_tree=null;
        Object WHITE_SPACE255_tree=null;
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_spelled_or_int_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_optional_prefix");
        RewriteRuleSubtreeStream stream_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week");
        RewriteRuleSubtreeStream stream_relative_date_suffix=new RewriteRuleSubtreeStream(adaptor,"rule relative_date_suffix");
        RewriteRuleSubtreeStream stream_relaxed_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_month");
        RewriteRuleSubtreeStream stream_relative_date_prefix=new RewriteRuleSubtreeStream(adaptor,"rule relative_date_prefix");
        RewriteRuleSubtreeStream stream_relative_target=new RewriteRuleSubtreeStream(adaptor,"rule relative_target");
        RewriteRuleSubtreeStream stream_relative_date_direction=new RewriteRuleSubtreeStream(adaptor,"rule relative_date_direction");
        try { dbg.enterRule(getGrammarFileName(), "relative_date");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(387, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:389:3: ( day_of_week WHITE_SPACE relative_date_prefix -> ^( RELATIVE_DATE ^( SEEK relative_date_prefix day_of_week ) ) | day_of_week -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) | relaxed_month -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) ) | spelled_or_int_optional_prefix WHITE_SPACE relative_target WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix relative_target ) ) | relative_date_direction WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_target -> ^( RELATIVE_DATE ^( SEEK relative_date_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_target ) ) | named_relative_date )
            int alt69=6;
            try { dbg.enterDecision(69);

            try {
                isCyclicDecision = true;
                alt69 = dfa69.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:389:5: day_of_week WHITE_SPACE relative_date_prefix
                    {
                    dbg.location(389,5);
                    pushFollow(FOLLOW_day_of_week_in_relative_date4363);
                    day_of_week242=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week242.getTree());
                    dbg.location(389,17);
                    WHITE_SPACE243=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date4365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE243);

                    dbg.location(389,29);
                    pushFollow(FOLLOW_relative_date_prefix_in_relative_date4367);
                    relative_date_prefix244=relative_date_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_date_prefix.add(relative_date_prefix244.getTree());


                    // AST REWRITE
                    // elements: day_of_week, relative_date_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 390:7: -> ^( RELATIVE_DATE ^( SEEK relative_date_prefix day_of_week ) )
                    {
                        dbg.location(390,10);
                        // com/joestelmach/natty/generated/DateParser.g:390:10: ^( RELATIVE_DATE ^( SEEK relative_date_prefix day_of_week ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(390,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(390,26);
                        // com/joestelmach/natty/generated/DateParser.g:390:26: ^( SEEK relative_date_prefix day_of_week )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(390,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(390,33);
                        adaptor.addChild(root_2, stream_relative_date_prefix.nextTree());
                        dbg.location(390,54);
                        adaptor.addChild(root_2, stream_day_of_week.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:393:5: day_of_week
                    {
                    dbg.location(393,5);
                    pushFollow(FOLLOW_day_of_week_in_relative_date4399);
                    day_of_week245=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week245.getTree());


                    // AST REWRITE
                    // elements: day_of_week
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 395:7: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) )
                    {
                        dbg.location(395,10);
                        // com/joestelmach/natty/generated/DateParser.g:395:10: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(395,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(395,26);
                        // com/joestelmach/natty/generated/DateParser.g:395:26: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(395,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(395,33);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(395,48);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(395,66);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));
                        dbg.location(395,75);
                        adaptor.addChild(root_2, stream_day_of_week.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:398:5: relaxed_month
                    {
                    dbg.location(398,5);
                    pushFollow(FOLLOW_relaxed_month_in_relative_date4445);
                    relaxed_month246=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month246.getTree());


                    // AST REWRITE
                    // elements: relaxed_month
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 399:7: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) )
                    {
                        dbg.location(399,10);
                        // com/joestelmach/natty/generated/DateParser.g:399:10: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(399,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(399,26);
                        // com/joestelmach/natty/generated/DateParser.g:399:26: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(399,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(399,33);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(399,48);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(399,66);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));
                        dbg.location(399,75);
                        adaptor.addChild(root_2, stream_relaxed_month.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:402:5: spelled_or_int_optional_prefix WHITE_SPACE relative_target WHITE_SPACE relative_date_suffix
                    {
                    dbg.location(402,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_relative_date4484);
                    spelled_or_int_optional_prefix247=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix247.getTree());
                    dbg.location(402,36);
                    WHITE_SPACE248=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date4486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE248);

                    dbg.location(402,48);
                    pushFollow(FOLLOW_relative_target_in_relative_date4488);
                    relative_target249=relative_target();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_target.add(relative_target249.getTree());
                    dbg.location(402,64);
                    WHITE_SPACE250=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date4490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE250);

                    dbg.location(402,76);
                    pushFollow(FOLLOW_relative_date_suffix_in_relative_date4492);
                    relative_date_suffix251=relative_date_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_date_suffix.add(relative_date_suffix251.getTree());


                    // AST REWRITE
                    // elements: spelled_or_int_optional_prefix, relative_date_suffix, relative_target
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 403:7: -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix relative_target ) )
                    {
                        dbg.location(403,10);
                        // com/joestelmach/natty/generated/DateParser.g:403:10: ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix relative_target ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(403,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(403,26);
                        // com/joestelmach/natty/generated/DateParser.g:403:26: ^( SEEK relative_date_suffix spelled_or_int_optional_prefix relative_target )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(403,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(403,33);
                        adaptor.addChild(root_2, stream_relative_date_suffix.nextTree());
                        dbg.location(403,54);
                        adaptor.addChild(root_2, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(403,85);
                        adaptor.addChild(root_2, stream_relative_target.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:406:5: relative_date_direction WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_target
                    {
                    dbg.location(406,5);
                    pushFollow(FOLLOW_relative_date_direction_in_relative_date4527);
                    relative_date_direction252=relative_date_direction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_date_direction.add(relative_date_direction252.getTree());
                    dbg.location(406,29);
                    WHITE_SPACE253=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date4529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE253);

                    dbg.location(406,41);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_relative_date4531);
                    spelled_or_int_optional_prefix254=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix254.getTree());
                    dbg.location(406,72);
                    WHITE_SPACE255=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date4533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE255);

                    dbg.location(406,84);
                    pushFollow(FOLLOW_relative_target_in_relative_date4535);
                    relative_target256=relative_target();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_target.add(relative_target256.getTree());


                    // AST REWRITE
                    // elements: relative_date_direction, relative_target, spelled_or_int_optional_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 407:7: -> ^( RELATIVE_DATE ^( SEEK relative_date_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_target ) )
                    {
                        dbg.location(407,10);
                        // com/joestelmach/natty/generated/DateParser.g:407:10: ^( RELATIVE_DATE ^( SEEK relative_date_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_target ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(407,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(407,26);
                        // com/joestelmach/natty/generated/DateParser.g:407:26: ^( SEEK relative_date_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_target )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(407,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(407,33);
                        adaptor.addChild(root_2, stream_relative_date_direction.nextTree());
                        dbg.location(407,57);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(407,75);
                        adaptor.addChild(root_2, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(407,106);
                        adaptor.addChild(root_2, stream_relative_target.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:410:5: named_relative_date
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(410,5);
                    pushFollow(FOLLOW_named_relative_date_in_relative_date4573);
                    named_relative_date257=named_relative_date();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, named_relative_date257.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(411, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_date");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_date"

    public static class relative_date_direction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_date_direction"
    // com/joestelmach/natty/generated/DateParser.g:413:1: relative_date_direction : ( DANS -> DIRECTION[\">\"] | IL_Y_A -> DIRECTION[\"<\"] );
    public final DateParser.relative_date_direction_return relative_date_direction() throws RecognitionException {
        DateParser.relative_date_direction_return retval = new DateParser.relative_date_direction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DANS258=null;
        Token IL_Y_A259=null;

        Object DANS258_tree=null;
        Object IL_Y_A259_tree=null;
        RewriteRuleTokenStream stream_IL_Y_A=new RewriteRuleTokenStream(adaptor,"token IL_Y_A");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");

        try { dbg.enterRule(getGrammarFileName(), "relative_date_direction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(413, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:414:3: ( DANS -> DIRECTION[\">\"] | IL_Y_A -> DIRECTION[\"<\"] )
            int alt70=2;
            try { dbg.enterDecision(70);

            switch ( input.LA(1) ) {
            case DANS:
                {
                alt70=1;
                }
                break;
            case IL_Y_A:
                {
                alt70=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:414:5: DANS
                    {
                    dbg.location(414,5);
                    DANS258=(Token)match(input,DANS,FOLLOW_DANS_in_relative_date_direction4586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DANS.add(DANS258);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 414:12: -> DIRECTION[\">\"]
                    {
                        dbg.location(414,15);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:415:5: IL_Y_A
                    {
                    dbg.location(415,5);
                    IL_Y_A259=(Token)match(input,IL_Y_A,FOLLOW_IL_Y_A_in_relative_date_direction4599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IL_Y_A.add(IL_Y_A259);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 415:12: -> DIRECTION[\"<\"]
                    {
                        dbg.location(415,15);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(416, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_date_direction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_date_direction"

    public static class explicit_relative_date_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_relative_date"
    // com/joestelmach/natty/generated/DateParser.g:421:1: explicit_relative_date : ( ( explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE explicit_relative_month WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix explicit_relative_month ) explicit_day_of_month_part ) | ( explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=> explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix -> ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) explicit_day_of_month_part ) | ( explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix )=> explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix -> ^( RELATIVE_DATE ^( SEEK prefix SPAN[\"week\"] ) explicit_day_of_week_part ) | ( explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix SPAN[\"week\"] ) explicit_day_of_week_part ) | ( explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ^( EXPLICIT_SEEK relaxed_year ) ) | explicit_day_of_month_part WHITE_SPACE relaxed_month -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ) | explicit_day_of_year_part WHITE_SPACE relaxed_year -> ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) explicit_day_of_year_part ) );
    public final DateParser.explicit_relative_date_return explicit_relative_date() throws RecognitionException {
        DateParser.explicit_relative_date_return retval = new DateParser.explicit_relative_date_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE261=null;
        Token WHITE_SPACE263=null;
        Token WHITE_SPACE265=null;
        Token WHITE_SPACE268=null;
        Token WHITE_SPACE270=null;
        Token WHITE_SPACE273=null;
        Token SEMAINE274=null;
        Token WHITE_SPACE275=null;
        Token WHITE_SPACE278=null;
        Token WHITE_SPACE280=null;
        Token SEMAINE281=null;
        Token WHITE_SPACE282=null;
        Token WHITE_SPACE285=null;
        Token WHITE_SPACE287=null;
        Token WHITE_SPACE290=null;
        Token WHITE_SPACE293=null;
        DateParser.explicit_day_of_month_part_return explicit_day_of_month_part260 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix262 = null;

        DateParser.explicit_relative_month_return explicit_relative_month264 = null;

        DateParser.relative_date_suffix_return relative_date_suffix266 = null;

        DateParser.explicit_day_of_month_part_return explicit_day_of_month_part267 = null;

        DateParser.explicit_relative_month_return explicit_relative_month269 = null;

        DateParser.prefix_return prefix271 = null;

        DateParser.explicit_day_of_week_part_return explicit_day_of_week_part272 = null;

        DateParser.prefix_return prefix276 = null;

        DateParser.explicit_day_of_week_part_return explicit_day_of_week_part277 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix279 = null;

        DateParser.relative_date_suffix_return relative_date_suffix283 = null;

        DateParser.explicit_day_of_month_part_return explicit_day_of_month_part284 = null;

        DateParser.relaxed_month_return relaxed_month286 = null;

        DateParser.relaxed_year_return relaxed_year288 = null;

        DateParser.explicit_day_of_month_part_return explicit_day_of_month_part289 = null;

        DateParser.relaxed_month_return relaxed_month291 = null;

        DateParser.explicit_day_of_year_part_return explicit_day_of_year_part292 = null;

        DateParser.relaxed_year_return relaxed_year294 = null;


        Object WHITE_SPACE261_tree=null;
        Object WHITE_SPACE263_tree=null;
        Object WHITE_SPACE265_tree=null;
        Object WHITE_SPACE268_tree=null;
        Object WHITE_SPACE270_tree=null;
        Object WHITE_SPACE273_tree=null;
        Object SEMAINE274_tree=null;
        Object WHITE_SPACE275_tree=null;
        Object WHITE_SPACE278_tree=null;
        Object WHITE_SPACE280_tree=null;
        Object SEMAINE281_tree=null;
        Object WHITE_SPACE282_tree=null;
        Object WHITE_SPACE285_tree=null;
        Object WHITE_SPACE287_tree=null;
        Object WHITE_SPACE290_tree=null;
        Object WHITE_SPACE293_tree=null;
        RewriteRuleTokenStream stream_SEMAINE=new RewriteRuleTokenStream(adaptor,"token SEMAINE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_spelled_or_int_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_optional_prefix");
        RewriteRuleSubtreeStream stream_explicit_relative_month=new RewriteRuleSubtreeStream(adaptor,"rule explicit_relative_month");
        RewriteRuleSubtreeStream stream_relative_date_suffix=new RewriteRuleSubtreeStream(adaptor,"rule relative_date_suffix");
        RewriteRuleSubtreeStream stream_relaxed_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_month");
        RewriteRuleSubtreeStream stream_relaxed_year=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_year");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_explicit_day_of_year_part=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_year_part");
        RewriteRuleSubtreeStream stream_explicit_day_of_week_part=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_week_part");
        RewriteRuleSubtreeStream stream_explicit_day_of_month_part=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_month_part");
        try { dbg.enterRule(getGrammarFileName(), "explicit_relative_date");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:423:3: ( ( explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE explicit_relative_month WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix explicit_relative_month ) explicit_day_of_month_part ) | ( explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=> explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix -> ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) explicit_day_of_month_part ) | ( explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix )=> explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix -> ^( RELATIVE_DATE ^( SEEK prefix SPAN[\"week\"] ) explicit_day_of_week_part ) | ( explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix SPAN[\"week\"] ) explicit_day_of_week_part ) | ( explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ^( EXPLICIT_SEEK relaxed_year ) ) | explicit_day_of_month_part WHITE_SPACE relaxed_month -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ) | explicit_day_of_year_part WHITE_SPACE relaxed_year -> ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) explicit_day_of_year_part ) )
            int alt71=7;
            try { dbg.enterDecision(71);

            try {
                isCyclicDecision = true;
                alt71 = dfa71.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:423:5: ( explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE explicit_relative_month WHITE_SPACE relative_date_suffix
                    {
                    dbg.location(424,5);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_explicit_relative_date4638);
                    explicit_day_of_month_part260=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(explicit_day_of_month_part260.getTree());
                    dbg.location(424,32);
                    WHITE_SPACE261=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE261);

                    dbg.location(424,44);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_explicit_relative_date4642);
                    spelled_or_int_optional_prefix262=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix262.getTree());
                    dbg.location(425,9);
                    WHITE_SPACE263=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE263);

                    dbg.location(425,21);
                    pushFollow(FOLLOW_explicit_relative_month_in_explicit_relative_date4655);
                    explicit_relative_month264=explicit_relative_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_relative_month.add(explicit_relative_month264.getTree());
                    dbg.location(425,45);
                    WHITE_SPACE265=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE265);

                    dbg.location(425,57);
                    pushFollow(FOLLOW_relative_date_suffix_in_explicit_relative_date4659);
                    relative_date_suffix266=relative_date_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_date_suffix.add(relative_date_suffix266.getTree());


                    // AST REWRITE
                    // elements: explicit_relative_month, spelled_or_int_optional_prefix, relative_date_suffix, explicit_day_of_month_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 426:7: -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix explicit_relative_month ) explicit_day_of_month_part )
                    {
                        dbg.location(426,10);
                        // com/joestelmach/natty/generated/DateParser.g:426:10: ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix explicit_relative_month ) explicit_day_of_month_part )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(426,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(426,26);
                        // com/joestelmach/natty/generated/DateParser.g:426:26: ^( SEEK relative_date_suffix spelled_or_int_optional_prefix explicit_relative_month )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(426,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(426,33);
                        adaptor.addChild(root_2, stream_relative_date_suffix.nextTree());
                        dbg.location(426,54);
                        adaptor.addChild(root_2, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(426,85);
                        adaptor.addChild(root_2, stream_explicit_relative_month.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(426,110);
                        adaptor.addChild(root_1, stream_explicit_day_of_month_part.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:429:5: ( explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=> explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix
                    {
                    dbg.location(430,5);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_explicit_relative_date4712);
                    explicit_day_of_month_part267=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(explicit_day_of_month_part267.getTree());
                    dbg.location(430,32);
                    WHITE_SPACE268=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE268);

                    dbg.location(430,44);
                    pushFollow(FOLLOW_explicit_relative_month_in_explicit_relative_date4716);
                    explicit_relative_month269=explicit_relative_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_relative_month.add(explicit_relative_month269.getTree());
                    dbg.location(430,68);
                    WHITE_SPACE270=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE270);

                    dbg.location(430,80);
                    pushFollow(FOLLOW_prefix_in_explicit_relative_date4720);
                    prefix271=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix271.getTree());


                    // AST REWRITE
                    // elements: explicit_day_of_month_part, prefix, explicit_relative_month
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 431:7: -> ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) explicit_day_of_month_part )
                    {
                        dbg.location(431,10);
                        // com/joestelmach/natty/generated/DateParser.g:431:10: ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) explicit_day_of_month_part )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(431,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(432,11);
                        // com/joestelmach/natty/generated/DateParser.g:432:11: ^( SEEK prefix explicit_relative_month )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(432,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(432,18);
                        adaptor.addChild(root_2, stream_prefix.nextTree());
                        dbg.location(432,25);
                        adaptor.addChild(root_2, stream_explicit_relative_month.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(433,11);
                        adaptor.addChild(root_1, stream_explicit_day_of_month_part.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:436:5: ( explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix )=> explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix
                    {
                    dbg.location(437,7);
                    pushFollow(FOLLOW_explicit_day_of_week_part_in_explicit_relative_date4794);
                    explicit_day_of_week_part272=explicit_day_of_week_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_week_part.add(explicit_day_of_week_part272.getTree());
                    dbg.location(437,33);
                    WHITE_SPACE273=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE273);

                    dbg.location(437,45);
                    SEMAINE274=(Token)match(input,SEMAINE,FOLLOW_SEMAINE_in_explicit_relative_date4798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMAINE.add(SEMAINE274);

                    dbg.location(437,54);
                    WHITE_SPACE275=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE275);

                    dbg.location(437,66);
                    pushFollow(FOLLOW_prefix_in_explicit_relative_date4803);
                    prefix276=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix276.getTree());


                    // AST REWRITE
                    // elements: prefix, explicit_day_of_week_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 438:7: -> ^( RELATIVE_DATE ^( SEEK prefix SPAN[\"week\"] ) explicit_day_of_week_part )
                    {
                        dbg.location(438,10);
                        // com/joestelmach/natty/generated/DateParser.g:438:10: ^( RELATIVE_DATE ^( SEEK prefix SPAN[\"week\"] ) explicit_day_of_week_part )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(438,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(439,11);
                        // com/joestelmach/natty/generated/DateParser.g:439:11: ^( SEEK prefix SPAN[\"week\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(439,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(439,18);
                        adaptor.addChild(root_2, stream_prefix.nextTree());
                        dbg.location(439,25);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "week"));

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(440,11);
                        adaptor.addChild(root_1, stream_explicit_day_of_week_part.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:443:5: ( explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE relative_date_suffix
                    {
                    dbg.location(444,5);
                    pushFollow(FOLLOW_explicit_day_of_week_part_in_explicit_relative_date4872);
                    explicit_day_of_week_part277=explicit_day_of_week_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_week_part.add(explicit_day_of_week_part277.getTree());
                    dbg.location(444,31);
                    WHITE_SPACE278=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4874); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE278);

                    dbg.location(444,43);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_explicit_relative_date4876);
                    spelled_or_int_optional_prefix279=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix279.getTree());
                    dbg.location(445,9);
                    WHITE_SPACE280=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE280);

                    dbg.location(445,21);
                    SEMAINE281=(Token)match(input,SEMAINE,FOLLOW_SEMAINE_in_explicit_relative_date4889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMAINE.add(SEMAINE281);

                    dbg.location(445,29);
                    WHITE_SPACE282=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE282);

                    dbg.location(445,41);
                    pushFollow(FOLLOW_relative_date_suffix_in_explicit_relative_date4893);
                    relative_date_suffix283=relative_date_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_date_suffix.add(relative_date_suffix283.getTree());


                    // AST REWRITE
                    // elements: relative_date_suffix, spelled_or_int_optional_prefix, explicit_day_of_week_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 446:7: -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix SPAN[\"week\"] ) explicit_day_of_week_part )
                    {
                        dbg.location(446,10);
                        // com/joestelmach/natty/generated/DateParser.g:446:10: ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix SPAN[\"week\"] ) explicit_day_of_week_part )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(446,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(447,11);
                        // com/joestelmach/natty/generated/DateParser.g:447:11: ^( SEEK relative_date_suffix spelled_or_int_optional_prefix SPAN[\"week\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(447,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(447,18);
                        adaptor.addChild(root_2, stream_relative_date_suffix.nextTree());
                        dbg.location(447,39);
                        adaptor.addChild(root_2, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(447,70);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "week"));

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(448,11);
                        adaptor.addChild(root_1, stream_explicit_day_of_week_part.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:451:5: ( explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year
                    {
                    dbg.location(452,7);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_explicit_relative_date4970);
                    explicit_day_of_month_part284=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(explicit_day_of_month_part284.getTree());
                    dbg.location(452,34);
                    WHITE_SPACE285=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE285);

                    dbg.location(452,46);
                    pushFollow(FOLLOW_relaxed_month_in_explicit_relative_date4974);
                    relaxed_month286=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month286.getTree());
                    dbg.location(452,60);
                    WHITE_SPACE287=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date4976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE287);

                    dbg.location(452,72);
                    pushFollow(FOLLOW_relaxed_year_in_explicit_relative_date4978);
                    relaxed_year288=relaxed_year();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_year.add(relaxed_year288.getTree());


                    // AST REWRITE
                    // elements: relaxed_month, explicit_day_of_month_part, relaxed_year
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 453:7: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ^( EXPLICIT_SEEK relaxed_year ) )
                    {
                        dbg.location(453,10);
                        // com/joestelmach/natty/generated/DateParser.g:453:10: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ^( EXPLICIT_SEEK relaxed_year ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(453,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(454,11);
                        // com/joestelmach/natty/generated/DateParser.g:454:11: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(454,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(454,18);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(454,33);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(454,51);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));
                        dbg.location(454,60);
                        adaptor.addChild(root_2, stream_relaxed_month.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(454,75);
                        adaptor.addChild(root_1, stream_explicit_day_of_month_part.nextTree());
                        dbg.location(455,11);
                        // com/joestelmach/natty/generated/DateParser.g:455:11: ^( EXPLICIT_SEEK relaxed_year )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(455,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_2);

                        dbg.location(455,27);
                        adaptor.addChild(root_2, stream_relaxed_year.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:458:5: explicit_day_of_month_part WHITE_SPACE relaxed_month
                    {
                    dbg.location(458,5);
                    pushFollow(FOLLOW_explicit_day_of_month_part_in_explicit_relative_date5046);
                    explicit_day_of_month_part289=explicit_day_of_month_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_part.add(explicit_day_of_month_part289.getTree());
                    dbg.location(458,32);
                    WHITE_SPACE290=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date5048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE290);

                    dbg.location(458,44);
                    pushFollow(FOLLOW_relaxed_month_in_explicit_relative_date5050);
                    relaxed_month291=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_month.add(relaxed_month291.getTree());


                    // AST REWRITE
                    // elements: relaxed_month, explicit_day_of_month_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 459:7: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part )
                    {
                        dbg.location(459,10);
                        // com/joestelmach/natty/generated/DateParser.g:459:10: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(459,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(460,11);
                        // com/joestelmach/natty/generated/DateParser.g:460:11: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(460,13);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(460,18);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(460,33);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(460,51);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));
                        dbg.location(460,60);
                        adaptor.addChild(root_2, stream_relaxed_month.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(461,11);
                        adaptor.addChild(root_1, stream_explicit_day_of_month_part.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // com/joestelmach/natty/generated/DateParser.g:464:5: explicit_day_of_year_part WHITE_SPACE relaxed_year
                    {
                    dbg.location(464,5);
                    pushFollow(FOLLOW_explicit_day_of_year_part_in_explicit_relative_date5112);
                    explicit_day_of_year_part292=explicit_day_of_year_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_year_part.add(explicit_day_of_year_part292.getTree());
                    dbg.location(464,31);
                    WHITE_SPACE293=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_relative_date5114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE293);

                    dbg.location(464,43);
                    pushFollow(FOLLOW_relaxed_year_in_explicit_relative_date5116);
                    relaxed_year294=relaxed_year();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_year.add(relaxed_year294.getTree());


                    // AST REWRITE
                    // elements: explicit_day_of_year_part, relaxed_year
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 465:7: -> ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) explicit_day_of_year_part )
                    {
                        dbg.location(465,10);
                        // com/joestelmach/natty/generated/DateParser.g:465:10: ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) explicit_day_of_year_part )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(465,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(465,26);
                        // com/joestelmach/natty/generated/DateParser.g:465:26: ^( EXPLICIT_SEEK relaxed_year )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(465,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_2);

                        dbg.location(465,42);
                        adaptor.addChild(root_2, stream_relaxed_year.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(465,56);
                        adaptor.addChild(root_1, stream_explicit_day_of_year_part.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(466, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_relative_date");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_relative_date"

    public static class explicit_day_of_month_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_day_of_month_part"
    // com/joestelmach/natty/generated/DateParser.g:468:1: explicit_day_of_month_part : ( ( LE WHITE_SPACE )? relaxed_day_of_month ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_month ) | ( LE WHITE_SPACE )? relative_occurrence_index WHITE_SPACE day_of_week ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> ^( EXPLICIT_SEEK relative_occurrence_index day_of_week ) | ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_month_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_month_bound );
    public final DateParser.explicit_day_of_month_part_return explicit_day_of_month_part() throws RecognitionException {
        DateParser.explicit_day_of_month_part_return retval = new DateParser.explicit_day_of_month_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LE295=null;
        Token WHITE_SPACE296=null;
        Token WHITE_SPACE298=null;
        Token DU299=null;
        Token DE300=null;
        Token WHITE_SPACE301=null;
        Token LA302=null;
        Token LE303=null;
        Token WHITE_SPACE304=null;
        Token WHITE_SPACE306=null;
        Token WHITE_SPACE308=null;
        Token DU309=null;
        Token DE310=null;
        Token WHITE_SPACE311=null;
        Token LA312=null;
        Token DANS313=null;
        Token A314=null;
        Token WHITE_SPACE315=null;
        Token LA316=null;
        Token WHITE_SPACE317=null;
        Token WHITE_SPACE319=null;
        Token DU320=null;
        Token DE321=null;
        Token WHITE_SPACE322=null;
        Token LA323=null;
        DateParser.relaxed_day_of_month_return relaxed_day_of_month297 = null;

        DateParser.relative_occurrence_index_return relative_occurrence_index305 = null;

        DateParser.day_of_week_return day_of_week307 = null;

        DateParser.explicit_day_of_month_bound_return explicit_day_of_month_bound318 = null;


        Object LE295_tree=null;
        Object WHITE_SPACE296_tree=null;
        Object WHITE_SPACE298_tree=null;
        Object DU299_tree=null;
        Object DE300_tree=null;
        Object WHITE_SPACE301_tree=null;
        Object LA302_tree=null;
        Object LE303_tree=null;
        Object WHITE_SPACE304_tree=null;
        Object WHITE_SPACE306_tree=null;
        Object WHITE_SPACE308_tree=null;
        Object DU309_tree=null;
        Object DE310_tree=null;
        Object WHITE_SPACE311_tree=null;
        Object LA312_tree=null;
        Object DANS313_tree=null;
        Object A314_tree=null;
        Object WHITE_SPACE315_tree=null;
        Object LA316_tree=null;
        Object WHITE_SPACE317_tree=null;
        Object WHITE_SPACE319_tree=null;
        Object DU320_tree=null;
        Object DE321_tree=null;
        Object WHITE_SPACE322_tree=null;
        Object LA323_tree=null;
        RewriteRuleTokenStream stream_LA=new RewriteRuleTokenStream(adaptor,"token LA");
        RewriteRuleTokenStream stream_A=new RewriteRuleTokenStream(adaptor,"token A");
        RewriteRuleTokenStream stream_DE=new RewriteRuleTokenStream(adaptor,"token DE");
        RewriteRuleTokenStream stream_DU=new RewriteRuleTokenStream(adaptor,"token DU");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");
        RewriteRuleSubtreeStream stream_explicit_day_of_month_bound=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_month_bound");
        RewriteRuleSubtreeStream stream_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule day_of_week");
        RewriteRuleSubtreeStream stream_relaxed_day_of_month=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_month");
        RewriteRuleSubtreeStream stream_relative_occurrence_index=new RewriteRuleSubtreeStream(adaptor,"rule relative_occurrence_index");
        try { dbg.enterRule(getGrammarFileName(), "explicit_day_of_month_part");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(468, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:470:3: ( ( LE WHITE_SPACE )? relaxed_day_of_month ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_month ) | ( LE WHITE_SPACE )? relative_occurrence_index WHITE_SPACE day_of_week ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> ^( EXPLICIT_SEEK relative_occurrence_index day_of_week ) | ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_month_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_month_bound )
            int alt86=3;
            try { dbg.enterDecision(86);

            try {
                isCyclicDecision = true;
                alt86 = dfa86.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:470:5: ( LE WHITE_SPACE )? relaxed_day_of_month ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    {
                    dbg.location(470,5);
                    // com/joestelmach/natty/generated/DateParser.g:470:5: ( LE WHITE_SPACE )?
                    int alt72=2;
                    try { dbg.enterSubRule(72);
                    try { dbg.enterDecision(72);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            alt72=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(72);}

                    switch (alt72) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:470:6: LE WHITE_SPACE
                            {
                            dbg.location(470,6);
                            LE295=(Token)match(input,LE,FOLLOW_LE_in_explicit_day_of_month_part5155); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE295);

                            dbg.location(470,9);
                            WHITE_SPACE296=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5157); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE296);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(72);}

                    dbg.location(470,23);
                    pushFollow(FOLLOW_relaxed_day_of_month_in_explicit_day_of_month_part5161);
                    relaxed_day_of_month297=relaxed_day_of_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_month.add(relaxed_day_of_month297.getTree());
                    dbg.location(470,44);
                    // com/joestelmach/natty/generated/DateParser.g:470:44: ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    int alt75=2;
                    try { dbg.enterSubRule(75);
                    try { dbg.enterDecision(75);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt75=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(75);}

                    switch (alt75) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:470:45: WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? )
                            {
                            dbg.location(470,45);
                            WHITE_SPACE298=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE298);

                            dbg.location(470,57);
                            // com/joestelmach/natty/generated/DateParser.g:470:57: ( DU | DE ( WHITE_SPACE LA )? )
                            int alt74=2;
                            try { dbg.enterSubRule(74);
                            try { dbg.enterDecision(74);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt74=1;
                                }
                                break;
                            case DE:
                                {
                                alt74=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(74);}

                            switch (alt74) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:470:58: DU
                                    {
                                    dbg.location(470,58);
                                    DU299=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_month_part5167); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU299);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:470:63: DE ( WHITE_SPACE LA )?
                                    {
                                    dbg.location(470,63);
                                    DE300=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_month_part5171); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE300);

                                    dbg.location(470,66);
                                    // com/joestelmach/natty/generated/DateParser.g:470:66: ( WHITE_SPACE LA )?
                                    int alt73=2;
                                    try { dbg.enterSubRule(73);
                                    try { dbg.enterDecision(73);

                                    switch ( input.LA(1) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(2) ) {
                                                case LA:
                                                    {
                                                    alt73=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    } finally {dbg.exitDecision(73);}

                                    switch (alt73) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:470:67: WHITE_SPACE LA
                                            {
                                            dbg.location(470,67);
                                            WHITE_SPACE301=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5174); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE301);

                                            dbg.location(470,79);
                                            LA302=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_month_part5176); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_LA.add(LA302);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(73);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(74);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(75);}



                    // AST REWRITE
                    // elements: relaxed_day_of_month
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 471:7: -> ^( EXPLICIT_SEEK relaxed_day_of_month )
                    {
                        dbg.location(471,10);
                        // com/joestelmach/natty/generated/DateParser.g:471:10: ^( EXPLICIT_SEEK relaxed_day_of_month )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(471,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(471,26);
                        adaptor.addChild(root_1, stream_relaxed_day_of_month.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:474:5: ( LE WHITE_SPACE )? relative_occurrence_index WHITE_SPACE day_of_week ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    {
                    dbg.location(474,5);
                    // com/joestelmach/natty/generated/DateParser.g:474:5: ( LE WHITE_SPACE )?
                    int alt76=2;
                    try { dbg.enterSubRule(76);
                    try { dbg.enterDecision(76);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            alt76=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(76);}

                    switch (alt76) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:474:6: LE WHITE_SPACE
                            {
                            dbg.location(474,6);
                            LE303=(Token)match(input,LE,FOLLOW_LE_in_explicit_day_of_month_part5212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE303);

                            dbg.location(474,9);
                            WHITE_SPACE304=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE304);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(76);}

                    dbg.location(474,23);
                    pushFollow(FOLLOW_relative_occurrence_index_in_explicit_day_of_month_part5218);
                    relative_occurrence_index305=relative_occurrence_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_occurrence_index.add(relative_occurrence_index305.getTree());
                    dbg.location(474,49);
                    WHITE_SPACE306=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE306);

                    dbg.location(474,61);
                    pushFollow(FOLLOW_day_of_week_in_explicit_day_of_month_part5222);
                    day_of_week307=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_of_week.add(day_of_week307.getTree());
                    dbg.location(474,73);
                    // com/joestelmach/natty/generated/DateParser.g:474:73: ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    int alt79=2;
                    try { dbg.enterSubRule(79);
                    try { dbg.enterDecision(79);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt79=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(79);}

                    switch (alt79) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:474:74: WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? )
                            {
                            dbg.location(474,74);
                            WHITE_SPACE308=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5225); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE308);

                            dbg.location(474,86);
                            // com/joestelmach/natty/generated/DateParser.g:474:86: ( DU | DE ( WHITE_SPACE LA )? )
                            int alt78=2;
                            try { dbg.enterSubRule(78);
                            try { dbg.enterDecision(78);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt78=1;
                                }
                                break;
                            case DE:
                                {
                                alt78=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 78, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(78);}

                            switch (alt78) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:474:87: DU
                                    {
                                    dbg.location(474,87);
                                    DU309=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_month_part5228); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU309);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:474:92: DE ( WHITE_SPACE LA )?
                                    {
                                    dbg.location(474,92);
                                    DE310=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_month_part5232); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE310);

                                    dbg.location(474,95);
                                    // com/joestelmach/natty/generated/DateParser.g:474:95: ( WHITE_SPACE LA )?
                                    int alt77=2;
                                    try { dbg.enterSubRule(77);
                                    try { dbg.enterDecision(77);

                                    switch ( input.LA(1) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(2) ) {
                                                case LA:
                                                    {
                                                    alt77=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    } finally {dbg.exitDecision(77);}

                                    switch (alt77) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:474:96: WHITE_SPACE LA
                                            {
                                            dbg.location(474,96);
                                            WHITE_SPACE311=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5235); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE311);

                                            dbg.location(474,108);
                                            LA312=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_month_part5237); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_LA.add(LA312);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(77);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(78);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(79);}



                    // AST REWRITE
                    // elements: relative_occurrence_index, day_of_week
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 475:7: -> ^( EXPLICIT_SEEK relative_occurrence_index day_of_week )
                    {
                        dbg.location(475,10);
                        // com/joestelmach/natty/generated/DateParser.g:475:10: ^( EXPLICIT_SEEK relative_occurrence_index day_of_week )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(475,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(475,26);
                        adaptor.addChild(root_1, stream_relative_occurrence_index.nextTree());
                        dbg.location(475,52);
                        adaptor.addChild(root_1, stream_day_of_week.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:478:5: ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_month_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    {
                    dbg.location(478,5);
                    // com/joestelmach/natty/generated/DateParser.g:478:5: ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )?
                    int alt82=2;
                    try { dbg.enterSubRule(82);
                    try { dbg.enterDecision(82);

                    switch ( input.LA(1) ) {
                        case A:
                        case DANS:
                        case LA:
                            {
                            alt82=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(82);}

                    switch (alt82) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:478:6: ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE
                            {
                            dbg.location(478,6);
                            // com/joestelmach/natty/generated/DateParser.g:478:6: ( ( DANS | A ) WHITE_SPACE )?
                            int alt81=2;
                            try { dbg.enterSubRule(81);
                            try { dbg.enterDecision(81);

                            switch ( input.LA(1) ) {
                                case A:
                                case DANS:
                                    {
                                    alt81=1;
                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(81);}

                            switch (alt81) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:478:7: ( DANS | A ) WHITE_SPACE
                                    {
                                    dbg.location(478,7);
                                    // com/joestelmach/natty/generated/DateParser.g:478:7: ( DANS | A )
                                    int alt80=2;
                                    try { dbg.enterSubRule(80);
                                    try { dbg.enterDecision(80);

                                    switch ( input.LA(1) ) {
                                    case DANS:
                                        {
                                        alt80=1;
                                        }
                                        break;
                                    case A:
                                        {
                                        alt80=2;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 80, 0, input);

                                        dbg.recognitionException(nvae);
                                        throw nvae;
                                    }

                                    } finally {dbg.exitDecision(80);}

                                    switch (alt80) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:478:8: DANS
                                            {
                                            dbg.location(478,8);
                                            DANS313=(Token)match(input,DANS,FOLLOW_DANS_in_explicit_day_of_month_part5277); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_DANS.add(DANS313);


                                            }
                                            break;
                                        case 2 :
                                            dbg.enterAlt(2);

                                            // com/joestelmach/natty/generated/DateParser.g:478:15: A
                                            {
                                            dbg.location(478,15);
                                            A314=(Token)match(input,A,FOLLOW_A_in_explicit_day_of_month_part5281); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_A.add(A314);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(80);}

                                    dbg.location(478,18);
                                    WHITE_SPACE315=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5284); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE315);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(81);}

                            dbg.location(478,32);
                            LA316=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_month_part5288); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LA.add(LA316);

                            dbg.location(478,35);
                            WHITE_SPACE317=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5290); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE317);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(82);}

                    dbg.location(478,49);
                    pushFollow(FOLLOW_explicit_day_of_month_bound_in_explicit_day_of_month_part5294);
                    explicit_day_of_month_bound318=explicit_day_of_month_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_month_bound.add(explicit_day_of_month_bound318.getTree());
                    dbg.location(478,77);
                    // com/joestelmach/natty/generated/DateParser.g:478:77: ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    int alt85=2;
                    try { dbg.enterSubRule(85);
                    try { dbg.enterDecision(85);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt85=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(85);}

                    switch (alt85) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:478:78: WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? )
                            {
                            dbg.location(478,78);
                            WHITE_SPACE319=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5297); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE319);

                            dbg.location(478,90);
                            // com/joestelmach/natty/generated/DateParser.g:478:90: ( DU | DE ( WHITE_SPACE LA )? )
                            int alt84=2;
                            try { dbg.enterSubRule(84);
                            try { dbg.enterDecision(84);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt84=1;
                                }
                                break;
                            case DE:
                                {
                                alt84=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 84, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(84);}

                            switch (alt84) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:478:91: DU
                                    {
                                    dbg.location(478,91);
                                    DU320=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_month_part5300); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU320);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:478:96: DE ( WHITE_SPACE LA )?
                                    {
                                    dbg.location(478,96);
                                    DE321=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_month_part5304); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE321);

                                    dbg.location(478,99);
                                    // com/joestelmach/natty/generated/DateParser.g:478:99: ( WHITE_SPACE LA )?
                                    int alt83=2;
                                    try { dbg.enterSubRule(83);
                                    try { dbg.enterDecision(83);

                                    switch ( input.LA(1) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(2) ) {
                                                case LA:
                                                    {
                                                    alt83=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    } finally {dbg.exitDecision(83);}

                                    switch (alt83) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:478:100: WHITE_SPACE LA
                                            {
                                            dbg.location(478,100);
                                            WHITE_SPACE322=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5307); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE322);

                                            dbg.location(478,112);
                                            LA323=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_month_part5309); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_LA.add(LA323);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(83);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(84);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(85);}



                    // AST REWRITE
                    // elements: explicit_day_of_month_bound
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 479:7: -> explicit_day_of_month_bound
                    {
                        dbg.location(479,10);
                        adaptor.addChild(root_0, stream_explicit_day_of_month_bound.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(480, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_day_of_month_part");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_day_of_month_part"

    public static class explicit_day_of_week_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_day_of_week_part"
    // com/joestelmach/natty/generated/DateParser.g:482:1: explicit_day_of_week_part : ( ( LE WHITE_SPACE )? relaxed_day_of_week ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_week ) | ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_week_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_week_bound );
    public final DateParser.explicit_day_of_week_part_return explicit_day_of_week_part() throws RecognitionException {
        DateParser.explicit_day_of_week_part_return retval = new DateParser.explicit_day_of_week_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LE324=null;
        Token WHITE_SPACE325=null;
        Token WHITE_SPACE327=null;
        Token DU328=null;
        Token DE329=null;
        Token WHITE_SPACE330=null;
        Token LA331=null;
        Token DANS332=null;
        Token A333=null;
        Token WHITE_SPACE334=null;
        Token LA335=null;
        Token WHITE_SPACE336=null;
        Token WHITE_SPACE338=null;
        Token DU339=null;
        Token DE340=null;
        Token WHITE_SPACE341=null;
        Token LA342=null;
        DateParser.relaxed_day_of_week_return relaxed_day_of_week326 = null;

        DateParser.explicit_day_of_week_bound_return explicit_day_of_week_bound337 = null;


        Object LE324_tree=null;
        Object WHITE_SPACE325_tree=null;
        Object WHITE_SPACE327_tree=null;
        Object DU328_tree=null;
        Object DE329_tree=null;
        Object WHITE_SPACE330_tree=null;
        Object LA331_tree=null;
        Object DANS332_tree=null;
        Object A333_tree=null;
        Object WHITE_SPACE334_tree=null;
        Object LA335_tree=null;
        Object WHITE_SPACE336_tree=null;
        Object WHITE_SPACE338_tree=null;
        Object DU339_tree=null;
        Object DE340_tree=null;
        Object WHITE_SPACE341_tree=null;
        Object LA342_tree=null;
        RewriteRuleTokenStream stream_LA=new RewriteRuleTokenStream(adaptor,"token LA");
        RewriteRuleTokenStream stream_A=new RewriteRuleTokenStream(adaptor,"token A");
        RewriteRuleTokenStream stream_DE=new RewriteRuleTokenStream(adaptor,"token DE");
        RewriteRuleTokenStream stream_DU=new RewriteRuleTokenStream(adaptor,"token DU");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");
        RewriteRuleSubtreeStream stream_explicit_day_of_week_bound=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_week_bound");
        RewriteRuleSubtreeStream stream_relaxed_day_of_week=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_week");
        try { dbg.enterRule(getGrammarFileName(), "explicit_day_of_week_part");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(482, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:484:3: ( ( LE WHITE_SPACE )? relaxed_day_of_week ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_week ) | ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_week_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_week_bound )
            int alt96=2;
            try { dbg.enterDecision(96);

            switch ( input.LA(1) ) {
            case DIMANCHE:
            case LUNDI:
            case MARDI:
            case MERCREDI:
            case JEUDI:
            case VENDREDI:
            case SAMEDI:
            case PASSE:
            case LE:
            case CE:
            case SUIVANT:
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_1:
            case INT_2:
            case INT_3:
            case INT_4:
            case INT_5:
            case INT_6:
            case INT_7:
            case INT_8:
            case INT_9:
            case INT_10:
            case INT_11:
            case INT_12:
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
            case INT_24:
            case INT_25:
            case INT_26:
            case INT_27:
            case INT_28:
            case INT_29:
            case INT_30:
            case INT_31:
            case INT_32:
            case INT_33:
            case INT_34:
            case INT_35:
            case INT_36:
            case INT_37:
            case INT_38:
            case INT_39:
            case INT_40:
            case INT_41:
            case INT_42:
            case INT_43:
            case INT_44:
            case INT_45:
            case INT_46:
            case INT_47:
            case INT_48:
            case INT_49:
            case INT_50:
            case INT_51:
            case INT_52:
            case INT_53:
            case INT_54:
            case INT_55:
            case INT_56:
            case INT_57:
            case INT_58:
            case INT_59:
            case INT_60:
            case INT_61:
            case INT_62:
            case INT_63:
            case INT_64:
            case INT_65:
            case INT_66:
            case INT_67:
            case INT_68:
            case INT_69:
            case INT_70:
            case INT_71:
            case INT_72:
            case INT_73:
            case INT_74:
            case INT_75:
            case INT_76:
            case INT_77:
            case INT_78:
            case INT_79:
            case INT_80:
            case INT_81:
            case INT_82:
            case INT_83:
            case INT_84:
            case INT_85:
            case INT_86:
            case INT_87:
            case INT_88:
            case INT_89:
            case INT_90:
            case INT_91:
            case INT_92:
            case INT_93:
            case INT_94:
            case INT_95:
            case INT_96:
            case INT_97:
            case INT_98:
            case INT_99:
            case UN:
            case DEUX:
            case TROIS:
            case QUATRE:
            case CINQ:
            case SIX:
            case SEPT:
            case HUIT:
            case NEUF:
            case DIX:
            case ONZE:
            case DOUZE:
            case TREIZE:
            case QUATORZE:
            case QUINZE:
            case SEIZE:
            case VINGT:
            case TRENTE:
                {
                alt96=1;
                }
                break;
            case DERNIER:
                {
                switch ( input.LA(2) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(3) ) {
                    case JOUR:
                        {
                        alt96=2;
                        }
                        break;
                    case DIMANCHE:
                    case LUNDI:
                    case MARDI:
                    case MERCREDI:
                    case JEUDI:
                    case VENDREDI:
                    case SAMEDI:
                        {
                        alt96=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 6, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case DANS:
                {
                switch ( input.LA(2) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(3) ) {
                    case LA:
                        {
                        alt96=2;
                        }
                        break;
                    case INT_01:
                    case INT_02:
                    case INT_03:
                    case INT_04:
                    case INT_05:
                    case INT_06:
                    case INT_07:
                    case INT_08:
                    case INT_09:
                    case INT_1:
                    case INT_2:
                    case INT_3:
                    case INT_4:
                    case INT_5:
                    case INT_6:
                    case INT_7:
                    case INT_8:
                    case INT_9:
                    case INT_10:
                    case INT_11:
                    case INT_12:
                    case INT_13:
                    case INT_14:
                    case INT_15:
                    case INT_16:
                    case INT_17:
                    case INT_18:
                    case INT_19:
                    case INT_20:
                    case INT_21:
                    case INT_22:
                    case INT_23:
                    case INT_24:
                    case INT_25:
                    case INT_26:
                    case INT_27:
                    case INT_28:
                    case INT_29:
                    case INT_30:
                    case INT_31:
                    case INT_32:
                    case INT_33:
                    case INT_34:
                    case INT_35:
                    case INT_36:
                    case INT_37:
                    case INT_38:
                    case INT_39:
                    case INT_40:
                    case INT_41:
                    case INT_42:
                    case INT_43:
                    case INT_44:
                    case INT_45:
                    case INT_46:
                    case INT_47:
                    case INT_48:
                    case INT_49:
                    case INT_50:
                    case INT_51:
                    case INT_52:
                    case INT_53:
                    case INT_54:
                    case INT_55:
                    case INT_56:
                    case INT_57:
                    case INT_58:
                    case INT_59:
                    case INT_60:
                    case INT_61:
                    case INT_62:
                    case INT_63:
                    case INT_64:
                    case INT_65:
                    case INT_66:
                    case INT_67:
                    case INT_68:
                    case INT_69:
                    case INT_70:
                    case INT_71:
                    case INT_72:
                    case INT_73:
                    case INT_74:
                    case INT_75:
                    case INT_76:
                    case INT_77:
                    case INT_78:
                    case INT_79:
                    case INT_80:
                    case INT_81:
                    case INT_82:
                    case INT_83:
                    case INT_84:
                    case INT_85:
                    case INT_86:
                    case INT_87:
                    case INT_88:
                    case INT_89:
                    case INT_90:
                    case INT_91:
                    case INT_92:
                    case INT_93:
                    case INT_94:
                    case INT_95:
                    case INT_96:
                    case INT_97:
                    case INT_98:
                    case INT_99:
                    case UN:
                    case DEUX:
                    case TROIS:
                    case QUATRE:
                    case CINQ:
                    case SIX:
                    case SEPT:
                    case HUIT:
                    case NEUF:
                    case DIX:
                    case ONZE:
                    case DOUZE:
                    case TREIZE:
                    case QUATORZE:
                    case QUINZE:
                    case SEIZE:
                    case VINGT:
                    case TRENTE:
                    case PREMIER:
                        {
                        alt96=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 7, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case PREMIER:
                {
                switch ( input.LA(2) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(3) ) {
                    case JOUR:
                        {
                        alt96=2;
                        }
                        break;
                    case DIMANCHE:
                    case LUNDI:
                    case MARDI:
                    case MERCREDI:
                    case JEUDI:
                    case VENDREDI:
                    case SAMEDI:
                        {
                        alt96=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 8, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case A:
            case LA:
            case DEBUT:
            case FIN:
                {
                alt96=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:484:5: ( LE WHITE_SPACE )? relaxed_day_of_week ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )?
                    {
                    dbg.location(484,5);
                    // com/joestelmach/natty/generated/DateParser.g:484:5: ( LE WHITE_SPACE )?
                    int alt87=2;
                    try { dbg.enterSubRule(87);
                    try { dbg.enterDecision(87);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            alt87=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(87);}

                    switch (alt87) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:484:6: LE WHITE_SPACE
                            {
                            dbg.location(484,6);
                            LE324=(Token)match(input,LE,FOLLOW_LE_in_explicit_day_of_week_part5343); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE324);

                            dbg.location(484,9);
                            WHITE_SPACE325=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5345); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE325);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(87);}

                    dbg.location(484,23);
                    pushFollow(FOLLOW_relaxed_day_of_week_in_explicit_day_of_week_part5349);
                    relaxed_day_of_week326=relaxed_day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_week.add(relaxed_day_of_week326.getTree());
                    dbg.location(484,43);
                    // com/joestelmach/natty/generated/DateParser.g:484:43: ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )?
                    int alt89=2;
                    try { dbg.enterSubRule(89);
                    try { dbg.enterDecision(89);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt89=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(89);}

                    switch (alt89) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:484:44: WHITE_SPACE ( DU | DE WHITE_SPACE LA )
                            {
                            dbg.location(484,44);
                            WHITE_SPACE327=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5352); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE327);

                            dbg.location(484,56);
                            // com/joestelmach/natty/generated/DateParser.g:484:56: ( DU | DE WHITE_SPACE LA )
                            int alt88=2;
                            try { dbg.enterSubRule(88);
                            try { dbg.enterDecision(88);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt88=1;
                                }
                                break;
                            case DE:
                                {
                                alt88=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 88, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(88);}

                            switch (alt88) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:484:57: DU
                                    {
                                    dbg.location(484,57);
                                    DU328=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_week_part5355); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU328);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:484:62: DE WHITE_SPACE LA
                                    {
                                    dbg.location(484,62);
                                    DE329=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_week_part5359); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE329);

                                    dbg.location(484,65);
                                    WHITE_SPACE330=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5361); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE330);

                                    dbg.location(484,77);
                                    LA331=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_week_part5363); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LA.add(LA331);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(88);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(89);}



                    // AST REWRITE
                    // elements: relaxed_day_of_week
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 485:7: -> ^( EXPLICIT_SEEK relaxed_day_of_week )
                    {
                        dbg.location(485,11);
                        // com/joestelmach/natty/generated/DateParser.g:485:11: ^( EXPLICIT_SEEK relaxed_day_of_week )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(485,13);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(485,27);
                        adaptor.addChild(root_1, stream_relaxed_day_of_week.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:488:5: ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_week_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    {
                    dbg.location(488,5);
                    // com/joestelmach/natty/generated/DateParser.g:488:5: ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )?
                    int alt92=2;
                    try { dbg.enterSubRule(92);
                    try { dbg.enterDecision(92);

                    switch ( input.LA(1) ) {
                        case A:
                        case DANS:
                        case LA:
                            {
                            alt92=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(92);}

                    switch (alt92) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:488:6: ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE
                            {
                            dbg.location(488,6);
                            // com/joestelmach/natty/generated/DateParser.g:488:6: ( ( DANS | A ) WHITE_SPACE )?
                            int alt91=2;
                            try { dbg.enterSubRule(91);
                            try { dbg.enterDecision(91);

                            switch ( input.LA(1) ) {
                                case A:
                                case DANS:
                                    {
                                    alt91=1;
                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(91);}

                            switch (alt91) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:488:7: ( DANS | A ) WHITE_SPACE
                                    {
                                    dbg.location(488,7);
                                    // com/joestelmach/natty/generated/DateParser.g:488:7: ( DANS | A )
                                    int alt90=2;
                                    try { dbg.enterSubRule(90);
                                    try { dbg.enterDecision(90);

                                    switch ( input.LA(1) ) {
                                    case DANS:
                                        {
                                        alt90=1;
                                        }
                                        break;
                                    case A:
                                        {
                                        alt90=2;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 90, 0, input);

                                        dbg.recognitionException(nvae);
                                        throw nvae;
                                    }

                                    } finally {dbg.exitDecision(90);}

                                    switch (alt90) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:488:8: DANS
                                            {
                                            dbg.location(488,8);
                                            DANS332=(Token)match(input,DANS,FOLLOW_DANS_in_explicit_day_of_week_part5400); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_DANS.add(DANS332);


                                            }
                                            break;
                                        case 2 :
                                            dbg.enterAlt(2);

                                            // com/joestelmach/natty/generated/DateParser.g:488:15: A
                                            {
                                            dbg.location(488,15);
                                            A333=(Token)match(input,A,FOLLOW_A_in_explicit_day_of_week_part5404); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_A.add(A333);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(90);}

                                    dbg.location(488,18);
                                    WHITE_SPACE334=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5407); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE334);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(91);}

                            dbg.location(488,32);
                            LA335=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_week_part5411); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LA.add(LA335);

                            dbg.location(488,35);
                            WHITE_SPACE336=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5413); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE336);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(92);}

                    dbg.location(488,49);
                    pushFollow(FOLLOW_explicit_day_of_week_bound_in_explicit_day_of_week_part5417);
                    explicit_day_of_week_bound337=explicit_day_of_week_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_week_bound.add(explicit_day_of_week_bound337.getTree());
                    dbg.location(488,76);
                    // com/joestelmach/natty/generated/DateParser.g:488:76: ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    int alt95=2;
                    try { dbg.enterSubRule(95);
                    try { dbg.enterDecision(95);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt95=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(95);}

                    switch (alt95) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:488:77: WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? )
                            {
                            dbg.location(488,77);
                            WHITE_SPACE338=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5420); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE338);

                            dbg.location(488,89);
                            // com/joestelmach/natty/generated/DateParser.g:488:89: ( DU | DE ( WHITE_SPACE LA )? )
                            int alt94=2;
                            try { dbg.enterSubRule(94);
                            try { dbg.enterDecision(94);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt94=1;
                                }
                                break;
                            case DE:
                                {
                                alt94=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 94, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(94);}

                            switch (alt94) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:488:90: DU
                                    {
                                    dbg.location(488,90);
                                    DU339=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_week_part5423); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU339);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:488:95: DE ( WHITE_SPACE LA )?
                                    {
                                    dbg.location(488,95);
                                    DE340=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_week_part5427); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE340);

                                    dbg.location(488,98);
                                    // com/joestelmach/natty/generated/DateParser.g:488:98: ( WHITE_SPACE LA )?
                                    int alt93=2;
                                    try { dbg.enterSubRule(93);
                                    try { dbg.enterDecision(93);

                                    switch ( input.LA(1) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(2) ) {
                                                case LA:
                                                    {
                                                    alt93=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    } finally {dbg.exitDecision(93);}

                                    switch (alt93) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:488:99: WHITE_SPACE LA
                                            {
                                            dbg.location(488,99);
                                            WHITE_SPACE341=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5430); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE341);

                                            dbg.location(488,111);
                                            LA342=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_week_part5432); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_LA.add(LA342);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(93);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(94);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(95);}



                    // AST REWRITE
                    // elements: explicit_day_of_week_bound
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 489:7: -> explicit_day_of_week_bound
                    {
                        dbg.location(489,10);
                        adaptor.addChild(root_0, stream_explicit_day_of_week_bound.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(490, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_day_of_week_part");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_day_of_week_part"

    public static class explicit_day_of_year_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_day_of_year_part"
    // com/joestelmach/natty/generated/DateParser.g:492:1: explicit_day_of_year_part : ( ( LE WHITE_SPACE )? relaxed_day_of_year ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_year ) | ( ( ( DANS | A ) WHITE_SPACE )? LE WHITE_SPACE )? explicit_day_of_year_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_year_bound );
    public final DateParser.explicit_day_of_year_part_return explicit_day_of_year_part() throws RecognitionException {
        DateParser.explicit_day_of_year_part_return retval = new DateParser.explicit_day_of_year_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LE343=null;
        Token WHITE_SPACE344=null;
        Token WHITE_SPACE346=null;
        Token DU347=null;
        Token DE348=null;
        Token WHITE_SPACE349=null;
        Token LA350=null;
        Token DANS351=null;
        Token A352=null;
        Token WHITE_SPACE353=null;
        Token LE354=null;
        Token WHITE_SPACE355=null;
        Token WHITE_SPACE357=null;
        Token DU358=null;
        Token DE359=null;
        Token WHITE_SPACE360=null;
        Token LA361=null;
        DateParser.relaxed_day_of_year_return relaxed_day_of_year345 = null;

        DateParser.explicit_day_of_year_bound_return explicit_day_of_year_bound356 = null;


        Object LE343_tree=null;
        Object WHITE_SPACE344_tree=null;
        Object WHITE_SPACE346_tree=null;
        Object DU347_tree=null;
        Object DE348_tree=null;
        Object WHITE_SPACE349_tree=null;
        Object LA350_tree=null;
        Object DANS351_tree=null;
        Object A352_tree=null;
        Object WHITE_SPACE353_tree=null;
        Object LE354_tree=null;
        Object WHITE_SPACE355_tree=null;
        Object WHITE_SPACE357_tree=null;
        Object DU358_tree=null;
        Object DE359_tree=null;
        Object WHITE_SPACE360_tree=null;
        Object LA361_tree=null;
        RewriteRuleTokenStream stream_LA=new RewriteRuleTokenStream(adaptor,"token LA");
        RewriteRuleTokenStream stream_A=new RewriteRuleTokenStream(adaptor,"token A");
        RewriteRuleTokenStream stream_DE=new RewriteRuleTokenStream(adaptor,"token DE");
        RewriteRuleTokenStream stream_DU=new RewriteRuleTokenStream(adaptor,"token DU");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");
        RewriteRuleSubtreeStream stream_relaxed_day_of_year=new RewriteRuleSubtreeStream(adaptor,"rule relaxed_day_of_year");
        RewriteRuleSubtreeStream stream_explicit_day_of_year_bound=new RewriteRuleSubtreeStream(adaptor,"rule explicit_day_of_year_bound");
        try { dbg.enterRule(getGrammarFileName(), "explicit_day_of_year_part");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(492, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:494:3: ( ( LE WHITE_SPACE )? relaxed_day_of_year ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_year ) | ( ( ( DANS | A ) WHITE_SPACE )? LE WHITE_SPACE )? explicit_day_of_year_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_year_bound )
            int alt106=2;
            try { dbg.enterDecision(106);

            switch ( input.LA(1) ) {
            case LE:
                {
                switch ( input.LA(2) ) {
                case WHITE_SPACE:
                    {
                    switch ( input.LA(3) ) {
                    case DERNIER:
                    case DEBUT:
                    case FIN:
                        {
                        alt106=2;
                        }
                        break;
                    case INT_01:
                    case INT_02:
                    case INT_03:
                    case INT_04:
                    case INT_05:
                    case INT_06:
                    case INT_07:
                    case INT_08:
                    case INT_09:
                    case INT_1:
                    case INT_2:
                    case INT_3:
                    case INT_4:
                    case INT_5:
                    case INT_6:
                    case INT_7:
                    case INT_8:
                    case INT_9:
                    case INT_10:
                    case INT_11:
                    case INT_12:
                    case INT_13:
                    case INT_14:
                    case INT_15:
                    case INT_16:
                    case INT_17:
                    case INT_18:
                    case INT_19:
                    case INT_20:
                    case INT_21:
                    case INT_22:
                    case INT_23:
                    case INT_24:
                    case INT_25:
                    case INT_26:
                    case INT_27:
                    case INT_28:
                    case INT_29:
                    case INT_30:
                    case INT_31:
                    case UN:
                    case DEUX:
                    case TROIS:
                    case QUATRE:
                    case CINQ:
                    case SIX:
                    case SEPT:
                    case HUIT:
                    case NEUF:
                    case DIX:
                    case ONZE:
                    case DOUZE:
                    case TREIZE:
                    case QUATORZE:
                    case QUINZE:
                    case SEIZE:
                    case VINGT:
                    case TRENTE:
                    case PREMIER:
                        {
                        alt106=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 4, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_1:
            case INT_2:
            case INT_3:
            case INT_4:
            case INT_5:
            case INT_6:
            case INT_7:
            case INT_8:
            case INT_9:
            case INT_10:
            case INT_11:
            case INT_12:
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
            case INT_24:
            case INT_25:
            case INT_26:
            case INT_27:
            case INT_28:
            case INT_29:
            case INT_30:
            case INT_31:
            case UN:
            case DEUX:
            case TROIS:
            case QUATRE:
            case CINQ:
            case SIX:
            case SEPT:
            case HUIT:
            case NEUF:
            case DIX:
            case ONZE:
            case DOUZE:
            case TREIZE:
            case QUATORZE:
            case QUINZE:
            case SEIZE:
            case VINGT:
            case TRENTE:
            case PREMIER:
                {
                alt106=1;
                }
                break;
            case A:
            case DANS:
            case DERNIER:
            case DEBUT:
            case FIN:
                {
                alt106=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:494:5: ( LE WHITE_SPACE )? relaxed_day_of_year ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )?
                    {
                    dbg.location(494,5);
                    // com/joestelmach/natty/generated/DateParser.g:494:5: ( LE WHITE_SPACE )?
                    int alt97=2;
                    try { dbg.enterSubRule(97);
                    try { dbg.enterDecision(97);

                    switch ( input.LA(1) ) {
                        case LE:
                            {
                            alt97=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(97);}

                    switch (alt97) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:494:6: LE WHITE_SPACE
                            {
                            dbg.location(494,6);
                            LE343=(Token)match(input,LE,FOLLOW_LE_in_explicit_day_of_year_part5466); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE343);

                            dbg.location(494,9);
                            WHITE_SPACE344=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5468); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE344);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(97);}

                    dbg.location(494,23);
                    pushFollow(FOLLOW_relaxed_day_of_year_in_explicit_day_of_year_part5472);
                    relaxed_day_of_year345=relaxed_day_of_year();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relaxed_day_of_year.add(relaxed_day_of_year345.getTree());
                    dbg.location(494,43);
                    // com/joestelmach/natty/generated/DateParser.g:494:43: ( WHITE_SPACE ( DU | DE WHITE_SPACE LA ) )?
                    int alt99=2;
                    try { dbg.enterSubRule(99);
                    try { dbg.enterDecision(99);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt99=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(99);}

                    switch (alt99) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:494:44: WHITE_SPACE ( DU | DE WHITE_SPACE LA )
                            {
                            dbg.location(494,44);
                            WHITE_SPACE346=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE346);

                            dbg.location(494,56);
                            // com/joestelmach/natty/generated/DateParser.g:494:56: ( DU | DE WHITE_SPACE LA )
                            int alt98=2;
                            try { dbg.enterSubRule(98);
                            try { dbg.enterDecision(98);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt98=1;
                                }
                                break;
                            case DE:
                                {
                                alt98=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 98, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(98);}

                            switch (alt98) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:494:57: DU
                                    {
                                    dbg.location(494,57);
                                    DU347=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_year_part5478); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU347);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:494:62: DE WHITE_SPACE LA
                                    {
                                    dbg.location(494,62);
                                    DE348=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_year_part5482); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE348);

                                    dbg.location(494,65);
                                    WHITE_SPACE349=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5484); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE349);

                                    dbg.location(494,77);
                                    LA350=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_year_part5486); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LA.add(LA350);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(98);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(99);}



                    // AST REWRITE
                    // elements: relaxed_day_of_year
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 495:7: -> ^( EXPLICIT_SEEK relaxed_day_of_year )
                    {
                        dbg.location(495,10);
                        // com/joestelmach/natty/generated/DateParser.g:495:10: ^( EXPLICIT_SEEK relaxed_day_of_year )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(495,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(495,26);
                        adaptor.addChild(root_1, stream_relaxed_day_of_year.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:498:5: ( ( ( DANS | A ) WHITE_SPACE )? LE WHITE_SPACE )? explicit_day_of_year_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    {
                    dbg.location(498,5);
                    // com/joestelmach/natty/generated/DateParser.g:498:5: ( ( ( DANS | A ) WHITE_SPACE )? LE WHITE_SPACE )?
                    int alt102=2;
                    try { dbg.enterSubRule(102);
                    try { dbg.enterDecision(102);

                    switch ( input.LA(1) ) {
                        case A:
                        case DANS:
                        case LE:
                            {
                            alt102=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(102);}

                    switch (alt102) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:498:6: ( ( DANS | A ) WHITE_SPACE )? LE WHITE_SPACE
                            {
                            dbg.location(498,6);
                            // com/joestelmach/natty/generated/DateParser.g:498:6: ( ( DANS | A ) WHITE_SPACE )?
                            int alt101=2;
                            try { dbg.enterSubRule(101);
                            try { dbg.enterDecision(101);

                            switch ( input.LA(1) ) {
                                case A:
                                case DANS:
                                    {
                                    alt101=1;
                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(101);}

                            switch (alt101) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:498:7: ( DANS | A ) WHITE_SPACE
                                    {
                                    dbg.location(498,7);
                                    // com/joestelmach/natty/generated/DateParser.g:498:7: ( DANS | A )
                                    int alt100=2;
                                    try { dbg.enterSubRule(100);
                                    try { dbg.enterDecision(100);

                                    switch ( input.LA(1) ) {
                                    case DANS:
                                        {
                                        alt100=1;
                                        }
                                        break;
                                    case A:
                                        {
                                        alt100=2;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 100, 0, input);

                                        dbg.recognitionException(nvae);
                                        throw nvae;
                                    }

                                    } finally {dbg.exitDecision(100);}

                                    switch (alt100) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:498:8: DANS
                                            {
                                            dbg.location(498,8);
                                            DANS351=(Token)match(input,DANS,FOLLOW_DANS_in_explicit_day_of_year_part5522); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_DANS.add(DANS351);


                                            }
                                            break;
                                        case 2 :
                                            dbg.enterAlt(2);

                                            // com/joestelmach/natty/generated/DateParser.g:498:15: A
                                            {
                                            dbg.location(498,15);
                                            A352=(Token)match(input,A,FOLLOW_A_in_explicit_day_of_year_part5526); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_A.add(A352);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(100);}

                                    dbg.location(498,18);
                                    WHITE_SPACE353=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5529); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE353);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(101);}

                            dbg.location(498,32);
                            LE354=(Token)match(input,LE,FOLLOW_LE_in_explicit_day_of_year_part5533); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE354);

                            dbg.location(498,35);
                            WHITE_SPACE355=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5535); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE355);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(102);}

                    dbg.location(498,49);
                    pushFollow(FOLLOW_explicit_day_of_year_bound_in_explicit_day_of_year_part5539);
                    explicit_day_of_year_bound356=explicit_day_of_year_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_day_of_year_bound.add(explicit_day_of_year_bound356.getTree());
                    dbg.location(498,76);
                    // com/joestelmach/natty/generated/DateParser.g:498:76: ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )?
                    int alt105=2;
                    try { dbg.enterSubRule(105);
                    try { dbg.enterDecision(105);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case DE:
                                case DU:
                                    {
                                    alt105=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(105);}

                    switch (alt105) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:498:77: WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? )
                            {
                            dbg.location(498,77);
                            WHITE_SPACE357=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5542); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE357);

                            dbg.location(498,89);
                            // com/joestelmach/natty/generated/DateParser.g:498:89: ( DU | DE ( WHITE_SPACE LA )? )
                            int alt104=2;
                            try { dbg.enterSubRule(104);
                            try { dbg.enterDecision(104);

                            switch ( input.LA(1) ) {
                            case DU:
                                {
                                alt104=1;
                                }
                                break;
                            case DE:
                                {
                                alt104=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 104, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(104);}

                            switch (alt104) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:498:90: DU
                                    {
                                    dbg.location(498,90);
                                    DU358=(Token)match(input,DU,FOLLOW_DU_in_explicit_day_of_year_part5545); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DU.add(DU358);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:498:95: DE ( WHITE_SPACE LA )?
                                    {
                                    dbg.location(498,95);
                                    DE359=(Token)match(input,DE,FOLLOW_DE_in_explicit_day_of_year_part5549); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DE.add(DE359);

                                    dbg.location(498,98);
                                    // com/joestelmach/natty/generated/DateParser.g:498:98: ( WHITE_SPACE LA )?
                                    int alt103=2;
                                    try { dbg.enterSubRule(103);
                                    try { dbg.enterDecision(103);

                                    switch ( input.LA(1) ) {
                                        case WHITE_SPACE:
                                            {
                                            switch ( input.LA(2) ) {
                                                case LA:
                                                    {
                                                    alt103=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    } finally {dbg.exitDecision(103);}

                                    switch (alt103) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:498:99: WHITE_SPACE LA
                                            {
                                            dbg.location(498,99);
                                            WHITE_SPACE360=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5552); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE360);

                                            dbg.location(498,111);
                                            LA361=(Token)match(input,LA,FOLLOW_LA_in_explicit_day_of_year_part5554); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_LA.add(LA361);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(103);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(104);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(105);}



                    // AST REWRITE
                    // elements: explicit_day_of_year_bound
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 499:7: -> explicit_day_of_year_bound
                    {
                        dbg.location(499,10);
                        adaptor.addChild(root_0, stream_explicit_day_of_year_bound.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(500, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_day_of_year_part");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_day_of_year_part"

    public static class explicit_day_of_year_bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_day_of_year_bound"
    // com/joestelmach/natty/generated/DateParser.g:503:1: explicit_day_of_year_bound : ( ( DEBUT ) -> ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) | ( FIN | ( DERNIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) );
    public final DateParser.explicit_day_of_year_bound_return explicit_day_of_year_bound() throws RecognitionException {
        DateParser.explicit_day_of_year_bound_return retval = new DateParser.explicit_day_of_year_bound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DEBUT362=null;
        Token FIN363=null;
        Token DERNIER364=null;
        Token WHITE_SPACE365=null;
        Token JOUR366=null;

        Object DEBUT362_tree=null;
        Object FIN363_tree=null;
        Object DERNIER364_tree=null;
        Object WHITE_SPACE365_tree=null;
        Object JOUR366_tree=null;
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_DEBUT=new RewriteRuleTokenStream(adaptor,"token DEBUT");
        RewriteRuleTokenStream stream_FIN=new RewriteRuleTokenStream(adaptor,"token FIN");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_JOUR=new RewriteRuleTokenStream(adaptor,"token JOUR");

        try { dbg.enterRule(getGrammarFileName(), "explicit_day_of_year_bound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(503, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:505:3: ( ( DEBUT ) -> ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) ) | ( FIN | ( DERNIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) ) )
            int alt108=2;
            try { dbg.enterDecision(108);

            switch ( input.LA(1) ) {
            case DEBUT:
                {
                alt108=1;
                }
                break;
            case DERNIER:
            case FIN:
                {
                alt108=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:505:5: ( DEBUT )
                    {
                    dbg.location(505,5);
                    // com/joestelmach/natty/generated/DateParser.g:505:5: ( DEBUT )
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:505:6: DEBUT
                    {
                    dbg.location(505,6);
                    DEBUT362=(Token)match(input,DEBUT,FOLLOW_DEBUT_in_explicit_day_of_year_bound5589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEBUT.add(DEBUT362);


                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 506:7: -> ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) )
                    {
                        dbg.location(506,10);
                        // com/joestelmach/natty/generated/DateParser.g:506:10: ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"1\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(506,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(506,26);
                        // com/joestelmach/natty/generated/DateParser.g:506:26: ^( DAY_OF_YEAR INT[\"1\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(506,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_2);

                        dbg.location(506,40);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:509:5: ( FIN | ( DERNIER WHITE_SPACE JOUR ) )
                    {
                    dbg.location(509,5);
                    // com/joestelmach/natty/generated/DateParser.g:509:5: ( FIN | ( DERNIER WHITE_SPACE JOUR ) )
                    int alt107=2;
                    try { dbg.enterSubRule(107);
                    try { dbg.enterDecision(107);

                    switch ( input.LA(1) ) {
                    case FIN:
                        {
                        alt107=1;
                        }
                        break;
                    case DERNIER:
                        {
                        alt107=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(107);}

                    switch (alt107) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:509:6: FIN
                            {
                            dbg.location(509,6);
                            FIN363=(Token)match(input,FIN,FOLLOW_FIN_in_explicit_day_of_year_bound5622); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_FIN.add(FIN363);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:509:12: ( DERNIER WHITE_SPACE JOUR )
                            {
                            dbg.location(509,12);
                            // com/joestelmach/natty/generated/DateParser.g:509:12: ( DERNIER WHITE_SPACE JOUR )
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:509:13: DERNIER WHITE_SPACE JOUR
                            {
                            dbg.location(509,13);
                            DERNIER364=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_explicit_day_of_year_bound5627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER364);

                            dbg.location(509,21);
                            WHITE_SPACE365=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_year_bound5629); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE365);

                            dbg.location(509,33);
                            JOUR366=(Token)match(input,JOUR,FOLLOW_JOUR_in_explicit_day_of_year_bound5631); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_JOUR.add(JOUR366);


                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(107);}



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:7: -> ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) )
                    {
                        dbg.location(510,10);
                        // com/joestelmach/natty/generated/DateParser.g:510:10: ^( EXPLICIT_SEEK ^( DAY_OF_YEAR INT[\"366\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(510,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(510,26);
                        // com/joestelmach/natty/generated/DateParser.g:510:26: ^( DAY_OF_YEAR INT[\"366\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(510,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_YEAR, "DAY_OF_YEAR"), root_2);

                        dbg.location(510,40);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "366"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(511, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_day_of_year_bound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_day_of_year_bound"

    public static class explicit_day_of_month_bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_day_of_month_bound"
    // com/joestelmach/natty/generated/DateParser.g:514:1: explicit_day_of_month_bound : ( ( DEBUT ) -> ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) | ( FIN | ( DERNIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) );
    public final DateParser.explicit_day_of_month_bound_return explicit_day_of_month_bound() throws RecognitionException {
        DateParser.explicit_day_of_month_bound_return retval = new DateParser.explicit_day_of_month_bound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DEBUT367=null;
        Token FIN368=null;
        Token DERNIER369=null;
        Token WHITE_SPACE370=null;
        Token JOUR371=null;

        Object DEBUT367_tree=null;
        Object FIN368_tree=null;
        Object DERNIER369_tree=null;
        Object WHITE_SPACE370_tree=null;
        Object JOUR371_tree=null;
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_DEBUT=new RewriteRuleTokenStream(adaptor,"token DEBUT");
        RewriteRuleTokenStream stream_FIN=new RewriteRuleTokenStream(adaptor,"token FIN");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_JOUR=new RewriteRuleTokenStream(adaptor,"token JOUR");

        try { dbg.enterRule(getGrammarFileName(), "explicit_day_of_month_bound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:516:3: ( ( DEBUT ) -> ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) | ( FIN | ( DERNIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) )
            int alt110=2;
            try { dbg.enterDecision(110);

            switch ( input.LA(1) ) {
            case DEBUT:
                {
                alt110=1;
                }
                break;
            case DERNIER:
            case FIN:
                {
                alt110=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:516:5: ( DEBUT )
                    {
                    dbg.location(516,5);
                    // com/joestelmach/natty/generated/DateParser.g:516:5: ( DEBUT )
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:516:6: DEBUT
                    {
                    dbg.location(516,6);
                    DEBUT367=(Token)match(input,DEBUT,FOLLOW_DEBUT_in_explicit_day_of_month_bound5672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEBUT.add(DEBUT367);


                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 517:7: -> ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) )
                    {
                        dbg.location(517,10);
                        // com/joestelmach/natty/generated/DateParser.g:517:10: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(517,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(517,26);
                        // com/joestelmach/natty/generated/DateParser.g:517:26: ^( DAY_OF_MONTH INT[\"1\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(517,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_2);

                        dbg.location(517,41);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:520:5: ( FIN | ( DERNIER WHITE_SPACE JOUR ) )
                    {
                    dbg.location(520,5);
                    // com/joestelmach/natty/generated/DateParser.g:520:5: ( FIN | ( DERNIER WHITE_SPACE JOUR ) )
                    int alt109=2;
                    try { dbg.enterSubRule(109);
                    try { dbg.enterDecision(109);

                    switch ( input.LA(1) ) {
                    case FIN:
                        {
                        alt109=1;
                        }
                        break;
                    case DERNIER:
                        {
                        alt109=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(109);}

                    switch (alt109) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:520:6: FIN
                            {
                            dbg.location(520,6);
                            FIN368=(Token)match(input,FIN,FOLLOW_FIN_in_explicit_day_of_month_bound5705); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_FIN.add(FIN368);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:520:12: ( DERNIER WHITE_SPACE JOUR )
                            {
                            dbg.location(520,12);
                            // com/joestelmach/natty/generated/DateParser.g:520:12: ( DERNIER WHITE_SPACE JOUR )
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:520:13: DERNIER WHITE_SPACE JOUR
                            {
                            dbg.location(520,13);
                            DERNIER369=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_explicit_day_of_month_bound5710); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER369);

                            dbg.location(520,21);
                            WHITE_SPACE370=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_month_bound5712); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE370);

                            dbg.location(520,33);
                            JOUR371=(Token)match(input,JOUR,FOLLOW_JOUR_in_explicit_day_of_month_bound5714); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_JOUR.add(JOUR371);


                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(109);}



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 521:7: -> ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) )
                    {
                        dbg.location(521,10);
                        // com/joestelmach/natty/generated/DateParser.g:521:10: ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(521,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(521,26);
                        // com/joestelmach/natty/generated/DateParser.g:521:26: ^( DAY_OF_MONTH INT[\"31\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(521,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_MONTH, "DAY_OF_MONTH"), root_2);

                        dbg.location(521,41);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "31"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(522, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_day_of_month_bound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_day_of_month_bound"

    public static class explicit_day_of_week_bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_day_of_week_bound"
    // com/joestelmach/natty/generated/DateParser.g:525:1: explicit_day_of_week_bound : ( ( DEBUT | ( PREMIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) | ( FIN | ( DERNIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"6\"] ) ) );
    public final DateParser.explicit_day_of_week_bound_return explicit_day_of_week_bound() throws RecognitionException {
        DateParser.explicit_day_of_week_bound_return retval = new DateParser.explicit_day_of_week_bound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DEBUT372=null;
        Token PREMIER373=null;
        Token WHITE_SPACE374=null;
        Token JOUR375=null;
        Token FIN376=null;
        Token DERNIER377=null;
        Token WHITE_SPACE378=null;
        Token JOUR379=null;

        Object DEBUT372_tree=null;
        Object PREMIER373_tree=null;
        Object WHITE_SPACE374_tree=null;
        Object JOUR375_tree=null;
        Object FIN376_tree=null;
        Object DERNIER377_tree=null;
        Object WHITE_SPACE378_tree=null;
        Object JOUR379_tree=null;
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_DEBUT=new RewriteRuleTokenStream(adaptor,"token DEBUT");
        RewriteRuleTokenStream stream_FIN=new RewriteRuleTokenStream(adaptor,"token FIN");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_JOUR=new RewriteRuleTokenStream(adaptor,"token JOUR");
        RewriteRuleTokenStream stream_PREMIER=new RewriteRuleTokenStream(adaptor,"token PREMIER");

        try { dbg.enterRule(getGrammarFileName(), "explicit_day_of_week_bound");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(525, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:527:3: ( ( DEBUT | ( PREMIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) ) | ( FIN | ( DERNIER WHITE_SPACE JOUR ) ) -> ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"6\"] ) ) )
            int alt113=2;
            try { dbg.enterDecision(113);

            switch ( input.LA(1) ) {
            case DEBUT:
            case PREMIER:
                {
                alt113=1;
                }
                break;
            case DERNIER:
            case FIN:
                {
                alt113=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:527:5: ( DEBUT | ( PREMIER WHITE_SPACE JOUR ) )
                    {
                    dbg.location(527,5);
                    // com/joestelmach/natty/generated/DateParser.g:527:5: ( DEBUT | ( PREMIER WHITE_SPACE JOUR ) )
                    int alt111=2;
                    try { dbg.enterSubRule(111);
                    try { dbg.enterDecision(111);

                    switch ( input.LA(1) ) {
                    case DEBUT:
                        {
                        alt111=1;
                        }
                        break;
                    case PREMIER:
                        {
                        alt111=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(111);}

                    switch (alt111) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:527:6: DEBUT
                            {
                            dbg.location(527,6);
                            DEBUT372=(Token)match(input,DEBUT,FOLLOW_DEBUT_in_explicit_day_of_week_bound5755); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DEBUT.add(DEBUT372);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:527:14: ( PREMIER WHITE_SPACE JOUR )
                            {
                            dbg.location(527,14);
                            // com/joestelmach/natty/generated/DateParser.g:527:14: ( PREMIER WHITE_SPACE JOUR )
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:527:15: PREMIER WHITE_SPACE JOUR
                            {
                            dbg.location(527,15);
                            PREMIER373=(Token)match(input,PREMIER,FOLLOW_PREMIER_in_explicit_day_of_week_bound5760); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PREMIER.add(PREMIER373);

                            dbg.location(527,23);
                            WHITE_SPACE374=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_bound5762); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE374);

                            dbg.location(527,35);
                            JOUR375=(Token)match(input,JOUR,FOLLOW_JOUR_in_explicit_day_of_week_bound5764); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_JOUR.add(JOUR375);


                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(111);}



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 528:7: -> ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) )
                    {
                        dbg.location(528,10);
                        // com/joestelmach/natty/generated/DateParser.g:528:10: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"2\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(528,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(528,26);
                        // com/joestelmach/natty/generated/DateParser.g:528:26: ^( DAY_OF_WEEK INT[\"2\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(528,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_2);

                        dbg.location(528,40);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "2"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:531:5: ( FIN | ( DERNIER WHITE_SPACE JOUR ) )
                    {
                    dbg.location(531,5);
                    // com/joestelmach/natty/generated/DateParser.g:531:5: ( FIN | ( DERNIER WHITE_SPACE JOUR ) )
                    int alt112=2;
                    try { dbg.enterSubRule(112);
                    try { dbg.enterDecision(112);

                    switch ( input.LA(1) ) {
                    case FIN:
                        {
                        alt112=1;
                        }
                        break;
                    case DERNIER:
                        {
                        alt112=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 112, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(112);}

                    switch (alt112) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:531:6: FIN
                            {
                            dbg.location(531,6);
                            FIN376=(Token)match(input,FIN,FOLLOW_FIN_in_explicit_day_of_week_bound5798); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_FIN.add(FIN376);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:531:12: ( DERNIER WHITE_SPACE JOUR )
                            {
                            dbg.location(531,12);
                            // com/joestelmach/natty/generated/DateParser.g:531:12: ( DERNIER WHITE_SPACE JOUR )
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:531:13: DERNIER WHITE_SPACE JOUR
                            {
                            dbg.location(531,13);
                            DERNIER377=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_explicit_day_of_week_bound5803); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER377);

                            dbg.location(531,21);
                            WHITE_SPACE378=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_day_of_week_bound5805); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE378);

                            dbg.location(531,33);
                            JOUR379=(Token)match(input,JOUR,FOLLOW_JOUR_in_explicit_day_of_week_bound5807); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_JOUR.add(JOUR379);


                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(112);}



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 532:7: -> ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"6\"] ) )
                    {
                        dbg.location(532,10);
                        // com/joestelmach/natty/generated/DateParser.g:532:10: ^( EXPLICIT_SEEK ^( DAY_OF_WEEK INT[\"6\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(532,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(532,26);
                        // com/joestelmach/natty/generated/DateParser.g:532:26: ^( DAY_OF_WEEK INT[\"6\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(532,28);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_2);

                        dbg.location(532,40);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "6"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(533, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_day_of_week_bound");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_day_of_week_bound"

    public static class explicit_relative_month_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_relative_month"
    // com/joestelmach/natty/generated/DateParser.g:535:1: explicit_relative_month : ( relaxed_month | MOIS -> SPAN[\"month\"] );
    public final DateParser.explicit_relative_month_return explicit_relative_month() throws RecognitionException {
        DateParser.explicit_relative_month_return retval = new DateParser.explicit_relative_month_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token MOIS381=null;
        DateParser.relaxed_month_return relaxed_month380 = null;


        Object MOIS381_tree=null;
        RewriteRuleTokenStream stream_MOIS=new RewriteRuleTokenStream(adaptor,"token MOIS");

        try { dbg.enterRule(getGrammarFileName(), "explicit_relative_month");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(535, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:536:3: ( relaxed_month | MOIS -> SPAN[\"month\"] )
            int alt114=2;
            try { dbg.enterDecision(114);

            switch ( input.LA(1) ) {
            case JANVIER:
            case FEVRIER:
            case MARS:
            case AVRIL:
            case MAI:
            case JUIN:
            case JUILLET:
            case AOUT:
            case SEPTEMBRE:
            case OCTOBRE:
            case NOVEMBRE:
            case DECEMBRE:
                {
                alt114=1;
                }
                break;
            case MOIS:
                {
                alt114=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:536:5: relaxed_month
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(536,5);
                    pushFollow(FOLLOW_relaxed_month_in_explicit_relative_month5843);
                    relaxed_month380=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relaxed_month380.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:537:5: MOIS
                    {
                    dbg.location(537,5);
                    MOIS381=(Token)match(input,MOIS,FOLLOW_MOIS_in_explicit_relative_month5849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOIS.add(MOIS381);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 537:10: -> SPAN[\"month\"]
                    {
                        dbg.location(537,13);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "month"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(538, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_relative_month");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_relative_month"

    public static class relative_occurrence_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_occurrence_index"
    // com/joestelmach/natty/generated/DateParser.g:540:1: relative_occurrence_index : ( PREMIER -> INT[\"1\"] | DEUXIEME -> INT[\"2\"] | TROISIEME -> INT[\"3\"] | QUATRIEME -> INT[\"4\"] | CINQUIEME -> INT[\"5\"] | DERNIER -> INT[\"5\"] );
    public final DateParser.relative_occurrence_index_return relative_occurrence_index() throws RecognitionException {
        DateParser.relative_occurrence_index_return retval = new DateParser.relative_occurrence_index_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PREMIER382=null;
        Token DEUXIEME383=null;
        Token TROISIEME384=null;
        Token QUATRIEME385=null;
        Token CINQUIEME386=null;
        Token DERNIER387=null;

        Object PREMIER382_tree=null;
        Object DEUXIEME383_tree=null;
        Object TROISIEME384_tree=null;
        Object QUATRIEME385_tree=null;
        Object CINQUIEME386_tree=null;
        Object DERNIER387_tree=null;
        RewriteRuleTokenStream stream_CINQUIEME=new RewriteRuleTokenStream(adaptor,"token CINQUIEME");
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_DEUXIEME=new RewriteRuleTokenStream(adaptor,"token DEUXIEME");
        RewriteRuleTokenStream stream_TROISIEME=new RewriteRuleTokenStream(adaptor,"token TROISIEME");
        RewriteRuleTokenStream stream_QUATRIEME=new RewriteRuleTokenStream(adaptor,"token QUATRIEME");
        RewriteRuleTokenStream stream_PREMIER=new RewriteRuleTokenStream(adaptor,"token PREMIER");

        try { dbg.enterRule(getGrammarFileName(), "relative_occurrence_index");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(540, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:541:3: ( PREMIER -> INT[\"1\"] | DEUXIEME -> INT[\"2\"] | TROISIEME -> INT[\"3\"] | QUATRIEME -> INT[\"4\"] | CINQUIEME -> INT[\"5\"] | DERNIER -> INT[\"5\"] )
            int alt115=6;
            try { dbg.enterDecision(115);

            switch ( input.LA(1) ) {
            case PREMIER:
                {
                alt115=1;
                }
                break;
            case DEUXIEME:
                {
                alt115=2;
                }
                break;
            case TROISIEME:
                {
                alt115=3;
                }
                break;
            case QUATRIEME:
                {
                alt115=4;
                }
                break;
            case CINQUIEME:
                {
                alt115=5;
                }
                break;
            case DERNIER:
                {
                alt115=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:541:5: PREMIER
                    {
                    dbg.location(541,5);
                    PREMIER382=(Token)match(input,PREMIER,FOLLOW_PREMIER_in_relative_occurrence_index5869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREMIER.add(PREMIER382);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 541:17: -> INT[\"1\"]
                    {
                        dbg.location(541,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:542:5: DEUXIEME
                    {
                    dbg.location(542,5);
                    DEUXIEME383=(Token)match(input,DEUXIEME,FOLLOW_DEUXIEME_in_relative_occurrence_index5884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEUXIEME.add(DEUXIEME383);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 542:17: -> INT[\"2\"]
                    {
                        dbg.location(542,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "2"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:543:5: TROISIEME
                    {
                    dbg.location(543,5);
                    TROISIEME384=(Token)match(input,TROISIEME,FOLLOW_TROISIEME_in_relative_occurrence_index5898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TROISIEME.add(TROISIEME384);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 543:17: -> INT[\"3\"]
                    {
                        dbg.location(543,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "3"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:544:5: QUATRIEME
                    {
                    dbg.location(544,5);
                    QUATRIEME385=(Token)match(input,QUATRIEME,FOLLOW_QUATRIEME_in_relative_occurrence_index5911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUATRIEME.add(QUATRIEME385);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 544:17: -> INT[\"4\"]
                    {
                        dbg.location(544,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "4"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:545:5: CINQUIEME
                    {
                    dbg.location(545,5);
                    CINQUIEME386=(Token)match(input,CINQUIEME,FOLLOW_CINQUIEME_in_relative_occurrence_index5924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CINQUIEME.add(CINQUIEME386);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 545:17: -> INT[\"5\"]
                    {
                        dbg.location(545,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "5"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:546:5: DERNIER
                    {
                    dbg.location(546,5);
                    DERNIER387=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_relative_occurrence_index5937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER387);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 546:17: -> INT[\"5\"]
                    {
                        dbg.location(546,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "5"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(547, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_occurrence_index");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_occurrence_index"

    public static class relative_target_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_target"
    // com/joestelmach/natty/generated/DateParser.g:549:1: relative_target : ( day_of_week | relaxed_month | relative_date_span );
    public final DateParser.relative_target_return relative_target() throws RecognitionException {
        DateParser.relative_target_return retval = new DateParser.relative_target_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.day_of_week_return day_of_week388 = null;

        DateParser.relaxed_month_return relaxed_month389 = null;

        DateParser.relative_date_span_return relative_date_span390 = null;



        try { dbg.enterRule(getGrammarFileName(), "relative_target");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(549, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:550:3: ( day_of_week | relaxed_month | relative_date_span )
            int alt116=3;
            try { dbg.enterDecision(116);

            switch ( input.LA(1) ) {
            case DIMANCHE:
            case LUNDI:
            case MARDI:
            case MERCREDI:
            case JEUDI:
            case VENDREDI:
            case SAMEDI:
                {
                alt116=1;
                }
                break;
            case JANVIER:
            case FEVRIER:
            case MARS:
            case AVRIL:
            case MAI:
            case JUIN:
            case JUILLET:
            case AOUT:
            case SEPTEMBRE:
            case OCTOBRE:
            case NOVEMBRE:
            case DECEMBRE:
                {
                alt116=2;
                }
                break;
            case JOUR:
            case SEMAINE:
            case MOIS:
            case ANNEE:
                {
                alt116=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(116);}

            switch (alt116) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:550:5: day_of_week
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(550,5);
                    pushFollow(FOLLOW_day_of_week_in_relative_target5961);
                    day_of_week388=day_of_week();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, day_of_week388.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:551:5: relaxed_month
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(551,5);
                    pushFollow(FOLLOW_relaxed_month_in_relative_target5968);
                    relaxed_month389=relaxed_month();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relaxed_month389.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:552:5: relative_date_span
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(552,5);
                    pushFollow(FOLLOW_relative_date_span_in_relative_target5974);
                    relative_date_span390=relative_date_span();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relative_date_span390.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(553, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_target");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_target"

    public static class relative_time_target_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_time_target"
    // com/joestelmach/natty/generated/DateParser.g:555:1: relative_time_target : relative_time_span ;
    public final DateParser.relative_time_target_return relative_time_target() throws RecognitionException {
        DateParser.relative_time_target_return retval = new DateParser.relative_time_target_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.relative_time_span_return relative_time_span391 = null;



        try { dbg.enterRule(getGrammarFileName(), "relative_time_target");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(555, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:556:3: ( relative_time_span )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:556:5: relative_time_span
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(556,5);
            pushFollow(FOLLOW_relative_time_span_in_relative_time_target5989);
            relative_time_span391=relative_time_span();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relative_time_span391.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(557, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_time_target");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_time_target"

    public static class relative_time_span_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_time_span"
    // com/joestelmach/natty/generated/DateParser.g:559:1: relative_time_span : ( HEURE -> SPAN[\"hour\"] | MINUTE -> SPAN[\"minute\"] | SECOND -> SPAN[\"second\"] );
    public final DateParser.relative_time_span_return relative_time_span() throws RecognitionException {
        DateParser.relative_time_span_return retval = new DateParser.relative_time_span_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token HEURE392=null;
        Token MINUTE393=null;
        Token SECOND394=null;

        Object HEURE392_tree=null;
        Object MINUTE393_tree=null;
        Object SECOND394_tree=null;
        RewriteRuleTokenStream stream_SECOND=new RewriteRuleTokenStream(adaptor,"token SECOND");
        RewriteRuleTokenStream stream_MINUTE=new RewriteRuleTokenStream(adaptor,"token MINUTE");
        RewriteRuleTokenStream stream_HEURE=new RewriteRuleTokenStream(adaptor,"token HEURE");

        try { dbg.enterRule(getGrammarFileName(), "relative_time_span");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(559, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:560:3: ( HEURE -> SPAN[\"hour\"] | MINUTE -> SPAN[\"minute\"] | SECOND -> SPAN[\"second\"] )
            int alt117=3;
            try { dbg.enterDecision(117);

            switch ( input.LA(1) ) {
            case HEURE:
                {
                alt117=1;
                }
                break;
            case MINUTE:
                {
                alt117=2;
                }
                break;
            case SECOND:
                {
                alt117=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(117);}

            switch (alt117) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:560:5: HEURE
                    {
                    dbg.location(560,5);
                    HEURE392=(Token)match(input,HEURE,FOLLOW_HEURE_in_relative_time_span6004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HEURE.add(HEURE392);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 560:13: -> SPAN[\"hour\"]
                    {
                        dbg.location(560,16);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "hour"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:561:5: MINUTE
                    {
                    dbg.location(561,5);
                    MINUTE393=(Token)match(input,MINUTE,FOLLOW_MINUTE_in_relative_time_span6017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUTE.add(MINUTE393);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 561:13: -> SPAN[\"minute\"]
                    {
                        dbg.location(561,16);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "minute"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:562:5: SECOND
                    {
                    dbg.location(562,5);
                    SECOND394=(Token)match(input,SECOND,FOLLOW_SECOND_in_relative_time_span6029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SECOND.add(SECOND394);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 562:13: -> SPAN[\"second\"]
                    {
                        dbg.location(562,16);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "second"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(563, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_time_span");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_time_span"

    public static class implicit_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_prefix"
    // com/joestelmach/natty/generated/DateParser.g:565:1: implicit_prefix : CE -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] ;
    public final DateParser.implicit_prefix_return implicit_prefix() throws RecognitionException {
        DateParser.implicit_prefix_return retval = new DateParser.implicit_prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CE395=null;

        Object CE395_tree=null;
        RewriteRuleTokenStream stream_CE=new RewriteRuleTokenStream(adaptor,"token CE");

        try { dbg.enterRule(getGrammarFileName(), "implicit_prefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(565, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:566:3: ( CE -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:566:5: CE
            {
            dbg.location(566,5);
            CE395=(Token)match(input,CE,FOLLOW_CE_in_implicit_prefix6050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CE.add(CE395);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:8: -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"]
            {
                dbg.location(566,11);
                adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                dbg.location(566,26);
                adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                dbg.location(566,44);
                adaptor.addChild(root_0, (Object)adaptor.create(INT, "0"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(567, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "implicit_prefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "implicit_prefix"

    public static class relative_date_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_date_prefix"
    // com/joestelmach/natty/generated/DateParser.g:569:1: relative_date_prefix : ( DERNIER -> DIRECTION[\"<\"] SEEK_BY[\"by_week\"] INT[\"1\"] | SUIVANT -> DIRECTION[\">\"] SEEK_BY[\"by_week\"] INT[\"1\"] | PASSE -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] | ( DANS WHITE_SPACE )? spelled_or_int_optional_prefix -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix );
    public final DateParser.relative_date_prefix_return relative_date_prefix() throws RecognitionException {
        DateParser.relative_date_prefix_return retval = new DateParser.relative_date_prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DERNIER396=null;
        Token SUIVANT397=null;
        Token PASSE398=null;
        Token DANS399=null;
        Token WHITE_SPACE400=null;
        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix401 = null;


        Object DERNIER396_tree=null;
        Object SUIVANT397_tree=null;
        Object PASSE398_tree=null;
        Object DANS399_tree=null;
        Object WHITE_SPACE400_tree=null;
        RewriteRuleTokenStream stream_PASSE=new RewriteRuleTokenStream(adaptor,"token PASSE");
        RewriteRuleTokenStream stream_DERNIER=new RewriteRuleTokenStream(adaptor,"token DERNIER");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_SUIVANT=new RewriteRuleTokenStream(adaptor,"token SUIVANT");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");
        RewriteRuleSubtreeStream stream_spelled_or_int_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_optional_prefix");
        try { dbg.enterRule(getGrammarFileName(), "relative_date_prefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(569, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:570:3: ( DERNIER -> DIRECTION[\"<\"] SEEK_BY[\"by_week\"] INT[\"1\"] | SUIVANT -> DIRECTION[\">\"] SEEK_BY[\"by_week\"] INT[\"1\"] | PASSE -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] | ( DANS WHITE_SPACE )? spelled_or_int_optional_prefix -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix )
            int alt119=4;
            try { dbg.enterDecision(119);

            switch ( input.LA(1) ) {
            case DERNIER:
                {
                alt119=1;
                }
                break;
            case SUIVANT:
                {
                alt119=2;
                }
                break;
            case PASSE:
                {
                alt119=3;
                }
                break;
            case DANS:
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_1:
            case INT_2:
            case INT_3:
            case INT_4:
            case INT_5:
            case INT_6:
            case INT_7:
            case INT_8:
            case INT_9:
            case INT_10:
            case INT_11:
            case INT_12:
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
            case INT_24:
            case INT_25:
            case INT_26:
            case INT_27:
            case INT_28:
            case INT_29:
            case INT_30:
            case INT_31:
            case INT_32:
            case INT_33:
            case INT_34:
            case INT_35:
            case INT_36:
            case INT_37:
            case INT_38:
            case INT_39:
            case INT_40:
            case INT_41:
            case INT_42:
            case INT_43:
            case INT_44:
            case INT_45:
            case INT_46:
            case INT_47:
            case INT_48:
            case INT_49:
            case INT_50:
            case INT_51:
            case INT_52:
            case INT_53:
            case INT_54:
            case INT_55:
            case INT_56:
            case INT_57:
            case INT_58:
            case INT_59:
            case INT_60:
            case INT_61:
            case INT_62:
            case INT_63:
            case INT_64:
            case INT_65:
            case INT_66:
            case INT_67:
            case INT_68:
            case INT_69:
            case INT_70:
            case INT_71:
            case INT_72:
            case INT_73:
            case INT_74:
            case INT_75:
            case INT_76:
            case INT_77:
            case INT_78:
            case INT_79:
            case INT_80:
            case INT_81:
            case INT_82:
            case INT_83:
            case INT_84:
            case INT_85:
            case INT_86:
            case INT_87:
            case INT_88:
            case INT_89:
            case INT_90:
            case INT_91:
            case INT_92:
            case INT_93:
            case INT_94:
            case INT_95:
            case INT_96:
            case INT_97:
            case INT_98:
            case INT_99:
            case UN:
            case DEUX:
            case TROIS:
            case QUATRE:
            case CINQ:
            case SIX:
            case SEPT:
            case HUIT:
            case NEUF:
            case DIX:
            case ONZE:
            case DOUZE:
            case TREIZE:
            case QUATORZE:
            case QUINZE:
            case SEIZE:
            case VINGT:
            case TRENTE:
            case PREMIER:
                {
                alt119=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(119);}

            switch (alt119) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:570:5: DERNIER
                    {
                    dbg.location(570,5);
                    DERNIER396=(Token)match(input,DERNIER,FOLLOW_DERNIER_in_relative_date_prefix6076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DERNIER.add(DERNIER396);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 570:17: -> DIRECTION[\"<\"] SEEK_BY[\"by_week\"] INT[\"1\"]
                    {
                        dbg.location(570,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));
                        dbg.location(570,35);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(570,54);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:571:5: SUIVANT
                    {
                    dbg.location(571,5);
                    SUIVANT397=(Token)match(input,SUIVANT,FOLLOW_SUIVANT_in_relative_date_prefix6097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUIVANT.add(SUIVANT397);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 571:17: -> DIRECTION[\">\"] SEEK_BY[\"by_week\"] INT[\"1\"]
                    {
                        dbg.location(571,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(571,35);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_week"));
                        dbg.location(571,54);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:572:5: PASSE
                    {
                    dbg.location(572,5);
                    PASSE398=(Token)match(input,PASSE,FOLLOW_PASSE_in_relative_date_prefix6118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PASSE.add(PASSE398);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 572:17: -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"]
                    {
                        dbg.location(572,20);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));
                        dbg.location(572,35);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(572,53);
                        adaptor.addChild(root_0, (Object)adaptor.create(INT, "1"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:573:5: ( DANS WHITE_SPACE )? spelled_or_int_optional_prefix
                    {
                    dbg.location(573,5);
                    // com/joestelmach/natty/generated/DateParser.g:573:5: ( DANS WHITE_SPACE )?
                    int alt118=2;
                    try { dbg.enterSubRule(118);
                    try { dbg.enterDecision(118);

                    switch ( input.LA(1) ) {
                        case DANS:
                            {
                            alt118=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(118);}

                    switch (alt118) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:573:6: DANS WHITE_SPACE
                            {
                            dbg.location(573,6);
                            DANS399=(Token)match(input,DANS,FOLLOW_DANS_in_relative_date_prefix6142); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DANS.add(DANS399);

                            dbg.location(573,11);
                            WHITE_SPACE400=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_date_prefix6144); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE400);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(118);}

                    dbg.location(573,25);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_relative_date_prefix6148);
                    spelled_or_int_optional_prefix401=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix401.getTree());


                    // AST REWRITE
                    // elements: spelled_or_int_optional_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 574:7: -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix
                    {
                        dbg.location(574,10);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(574,25);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(574,43);
                        adaptor.addChild(root_0, stream_spelled_or_int_optional_prefix.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(575, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_date_prefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_date_prefix"

    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix"
    // com/joestelmach/natty/generated/DateParser.g:577:1: prefix : ( relative_date_prefix | implicit_prefix );
    public final DateParser.prefix_return prefix() throws RecognitionException {
        DateParser.prefix_return retval = new DateParser.prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.relative_date_prefix_return relative_date_prefix402 = null;

        DateParser.implicit_prefix_return implicit_prefix403 = null;



        try { dbg.enterRule(getGrammarFileName(), "prefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(577, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:578:3: ( relative_date_prefix | implicit_prefix )
            int alt120=2;
            try { dbg.enterDecision(120);

            switch ( input.LA(1) ) {
            case PASSE:
            case DANS:
            case SUIVANT:
            case DERNIER:
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_1:
            case INT_2:
            case INT_3:
            case INT_4:
            case INT_5:
            case INT_6:
            case INT_7:
            case INT_8:
            case INT_9:
            case INT_10:
            case INT_11:
            case INT_12:
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
            case INT_24:
            case INT_25:
            case INT_26:
            case INT_27:
            case INT_28:
            case INT_29:
            case INT_30:
            case INT_31:
            case INT_32:
            case INT_33:
            case INT_34:
            case INT_35:
            case INT_36:
            case INT_37:
            case INT_38:
            case INT_39:
            case INT_40:
            case INT_41:
            case INT_42:
            case INT_43:
            case INT_44:
            case INT_45:
            case INT_46:
            case INT_47:
            case INT_48:
            case INT_49:
            case INT_50:
            case INT_51:
            case INT_52:
            case INT_53:
            case INT_54:
            case INT_55:
            case INT_56:
            case INT_57:
            case INT_58:
            case INT_59:
            case INT_60:
            case INT_61:
            case INT_62:
            case INT_63:
            case INT_64:
            case INT_65:
            case INT_66:
            case INT_67:
            case INT_68:
            case INT_69:
            case INT_70:
            case INT_71:
            case INT_72:
            case INT_73:
            case INT_74:
            case INT_75:
            case INT_76:
            case INT_77:
            case INT_78:
            case INT_79:
            case INT_80:
            case INT_81:
            case INT_82:
            case INT_83:
            case INT_84:
            case INT_85:
            case INT_86:
            case INT_87:
            case INT_88:
            case INT_89:
            case INT_90:
            case INT_91:
            case INT_92:
            case INT_93:
            case INT_94:
            case INT_95:
            case INT_96:
            case INT_97:
            case INT_98:
            case INT_99:
            case UN:
            case DEUX:
            case TROIS:
            case QUATRE:
            case CINQ:
            case SIX:
            case SEPT:
            case HUIT:
            case NEUF:
            case DIX:
            case ONZE:
            case DOUZE:
            case TREIZE:
            case QUATORZE:
            case QUINZE:
            case SEIZE:
            case VINGT:
            case TRENTE:
            case PREMIER:
                {
                alt120=1;
                }
                break;
            case CE:
                {
                alt120=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(120);}

            switch (alt120) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:578:5: relative_date_prefix
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(578,5);
                    pushFollow(FOLLOW_relative_date_prefix_in_prefix6180);
                    relative_date_prefix402=relative_date_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relative_date_prefix402.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:579:5: implicit_prefix
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(579,5);
                    pushFollow(FOLLOW_implicit_prefix_in_prefix6186);
                    implicit_prefix403=implicit_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_prefix403.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(580, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prefix"

    public static class relative_date_suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_date_suffix"
    // com/joestelmach/natty/generated/DateParser.g:582:1: relative_date_suffix : AVANT -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] ;
    public final DateParser.relative_date_suffix_return relative_date_suffix() throws RecognitionException {
        DateParser.relative_date_suffix_return retval = new DateParser.relative_date_suffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AVANT404=null;

        Object AVANT404_tree=null;
        RewriteRuleTokenStream stream_AVANT=new RewriteRuleTokenStream(adaptor,"token AVANT");

        try { dbg.enterRule(getGrammarFileName(), "relative_date_suffix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(582, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:584:3: ( AVANT -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:584:5: AVANT
            {
            dbg.location(584,5);
            AVANT404=(Token)match(input,AVANT,FOLLOW_AVANT_in_relative_date_suffix6204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AVANT.add(AVANT404);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:11: -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"]
            {
                dbg.location(584,14);
                adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));
                dbg.location(584,29);
                adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(585, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_date_suffix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_date_suffix"

    public static class relative_time_suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_time_suffix"
    // com/joestelmach/natty/generated/DateParser.g:587:1: relative_time_suffix : ( APRES ( WHITE_SPACE relative_time_suffix_anchor )? -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] relative_time_suffix_anchor | AVANT ( WHITE_SPACE relative_time_suffix_anchor )? -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] ( relative_time_suffix_anchor )? );
    public final DateParser.relative_time_suffix_return relative_time_suffix() throws RecognitionException {
        DateParser.relative_time_suffix_return retval = new DateParser.relative_time_suffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token APRES405=null;
        Token WHITE_SPACE406=null;
        Token AVANT408=null;
        Token WHITE_SPACE409=null;
        DateParser.relative_time_suffix_anchor_return relative_time_suffix_anchor407 = null;

        DateParser.relative_time_suffix_anchor_return relative_time_suffix_anchor410 = null;


        Object APRES405_tree=null;
        Object WHITE_SPACE406_tree=null;
        Object AVANT408_tree=null;
        Object WHITE_SPACE409_tree=null;
        RewriteRuleTokenStream stream_APRES=new RewriteRuleTokenStream(adaptor,"token APRES");
        RewriteRuleTokenStream stream_AVANT=new RewriteRuleTokenStream(adaptor,"token AVANT");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_relative_time_suffix_anchor=new RewriteRuleSubtreeStream(adaptor,"rule relative_time_suffix_anchor");
        try { dbg.enterRule(getGrammarFileName(), "relative_time_suffix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(587, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:589:3: ( APRES ( WHITE_SPACE relative_time_suffix_anchor )? -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] relative_time_suffix_anchor | AVANT ( WHITE_SPACE relative_time_suffix_anchor )? -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] ( relative_time_suffix_anchor )? )
            int alt123=2;
            try { dbg.enterDecision(123);

            switch ( input.LA(1) ) {
            case APRES:
                {
                alt123=1;
                }
                break;
            case AVANT:
                {
                alt123=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(123);}

            switch (alt123) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:589:5: APRES ( WHITE_SPACE relative_time_suffix_anchor )?
                    {
                    dbg.location(589,5);
                    APRES405=(Token)match(input,APRES,FOLLOW_APRES_in_relative_time_suffix6230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APRES.add(APRES405);

                    dbg.location(589,11);
                    // com/joestelmach/natty/generated/DateParser.g:589:11: ( WHITE_SPACE relative_time_suffix_anchor )?
                    int alt121=2;
                    try { dbg.enterSubRule(121);
                    try { dbg.enterDecision(121);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case MAINTENANT:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt121=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(121);}

                    switch (alt121) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:589:12: WHITE_SPACE relative_time_suffix_anchor
                            {
                            dbg.location(589,12);
                            WHITE_SPACE406=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time_suffix6233); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE406);

                            dbg.location(589,24);
                            pushFollow(FOLLOW_relative_time_suffix_anchor_in_relative_time_suffix6235);
                            relative_time_suffix_anchor407=relative_time_suffix_anchor();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relative_time_suffix_anchor.add(relative_time_suffix_anchor407.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(121);}



                    // AST REWRITE
                    // elements: relative_time_suffix_anchor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 590:7: -> DIRECTION[\">\"] SEEK_BY[\"by_day\"] relative_time_suffix_anchor
                    {
                        dbg.location(590,10);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(590,25);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(590,43);
                        adaptor.addChild(root_0, stream_relative_time_suffix_anchor.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:593:5: AVANT ( WHITE_SPACE relative_time_suffix_anchor )?
                    {
                    dbg.location(593,5);
                    AVANT408=(Token)match(input,AVANT,FOLLOW_AVANT_in_relative_time_suffix6265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVANT.add(AVANT408);

                    dbg.location(593,11);
                    // com/joestelmach/natty/generated/DateParser.g:593:11: ( WHITE_SPACE relative_time_suffix_anchor )?
                    int alt122=2;
                    try { dbg.enterSubRule(122);
                    try { dbg.enterDecision(122);

                    switch ( input.LA(1) ) {
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case A:
                                case MINUIT:
                                case APRES_MIDI:
                                case MATIN:
                                case SOIR:
                                case NUIT:
                                case DANS:
                                case CE:
                                case MAINTENANT:
                                case INT_00:
                                case INT_01:
                                case INT_02:
                                case INT_03:
                                case INT_04:
                                case INT_05:
                                case INT_06:
                                case INT_07:
                                case INT_08:
                                case INT_09:
                                case INT_0:
                                case INT_1:
                                case INT_2:
                                case INT_3:
                                case INT_4:
                                case INT_5:
                                case INT_6:
                                case INT_7:
                                case INT_8:
                                case INT_9:
                                case INT_10:
                                case INT_11:
                                case INT_12:
                                case INT_13:
                                case INT_14:
                                case INT_15:
                                case INT_16:
                                case INT_17:
                                case INT_18:
                                case INT_19:
                                case INT_20:
                                case INT_21:
                                case INT_22:
                                case INT_23:
                                    {
                                    alt122=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(122);}

                    switch (alt122) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:593:12: WHITE_SPACE relative_time_suffix_anchor
                            {
                            dbg.location(593,12);
                            WHITE_SPACE409=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time_suffix6268); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE409);

                            dbg.location(593,24);
                            pushFollow(FOLLOW_relative_time_suffix_anchor_in_relative_time_suffix6270);
                            relative_time_suffix_anchor410=relative_time_suffix_anchor();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_relative_time_suffix_anchor.add(relative_time_suffix_anchor410.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(122);}



                    // AST REWRITE
                    // elements: relative_time_suffix_anchor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 594:7: -> DIRECTION[\"<\"] SEEK_BY[\"by_day\"] ( relative_time_suffix_anchor )?
                    {
                        dbg.location(594,10);
                        adaptor.addChild(root_0, (Object)adaptor.create(DIRECTION, "<"));
                        dbg.location(594,25);
                        adaptor.addChild(root_0, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(594,43);
                        // com/joestelmach/natty/generated/DateParser.g:594:43: ( relative_time_suffix_anchor )?
                        if ( stream_relative_time_suffix_anchor.hasNext() ) {
                            dbg.location(594,43);
                            adaptor.addChild(root_0, stream_relative_time_suffix_anchor.nextTree());

                        }
                        stream_relative_time_suffix_anchor.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(595, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_time_suffix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_time_suffix"

    public static class relative_time_suffix_anchor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_time_suffix_anchor"
    // com/joestelmach/natty/generated/DateParser.g:597:1: relative_time_suffix_anchor : ( named_relative_time | explicit_time -> ^( EXPLICIT_SEEK explicit_time ) );
    public final DateParser.relative_time_suffix_anchor_return relative_time_suffix_anchor() throws RecognitionException {
        DateParser.relative_time_suffix_anchor_return retval = new DateParser.relative_time_suffix_anchor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser.named_relative_time_return named_relative_time411 = null;

        DateParser.explicit_time_return explicit_time412 = null;


        RewriteRuleSubtreeStream stream_explicit_time=new RewriteRuleSubtreeStream(adaptor,"rule explicit_time");
        try { dbg.enterRule(getGrammarFileName(), "relative_time_suffix_anchor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(597, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:598:3: ( named_relative_time | explicit_time -> ^( EXPLICIT_SEEK explicit_time ) )
            int alt124=2;
            try { dbg.enterDecision(124);

            switch ( input.LA(1) ) {
            case MAINTENANT:
                {
                alt124=1;
                }
                break;
            case A:
            case MINUIT:
            case APRES_MIDI:
            case MATIN:
            case SOIR:
            case NUIT:
            case DANS:
            case CE:
            case INT_00:
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_0:
            case INT_1:
            case INT_2:
            case INT_3:
            case INT_4:
            case INT_5:
            case INT_6:
            case INT_7:
            case INT_8:
            case INT_9:
            case INT_10:
            case INT_11:
            case INT_12:
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
                {
                alt124=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(124);}

            switch (alt124) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:598:5: named_relative_time
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(598,5);
                    pushFollow(FOLLOW_named_relative_time_in_relative_time_suffix_anchor6304);
                    named_relative_time411=named_relative_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, named_relative_time411.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:599:5: explicit_time
                    {
                    dbg.location(599,5);
                    pushFollow(FOLLOW_explicit_time_in_relative_time_suffix_anchor6311);
                    explicit_time412=explicit_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_time.add(explicit_time412.getTree());


                    // AST REWRITE
                    // elements: explicit_time
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 600:5: -> ^( EXPLICIT_SEEK explicit_time )
                    {
                        dbg.location(600,8);
                        // com/joestelmach/natty/generated/DateParser.g:600:8: ^( EXPLICIT_SEEK explicit_time )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(600,10);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_SEEK, "EXPLICIT_SEEK"), root_1);

                        dbg.location(600,24);
                        adaptor.addChild(root_1, stream_explicit_time.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(601, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_time_suffix_anchor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_time_suffix_anchor"

    public static class relative_date_span_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_date_span"
    // com/joestelmach/natty/generated/DateParser.g:603:1: relative_date_span : ( JOUR -> SPAN[\"day\"] | SEMAINE -> SPAN[\"week\"] | MOIS -> SPAN[\"month\"] | ANNEE -> SPAN[\"year\"] );
    public final DateParser.relative_date_span_return relative_date_span() throws RecognitionException {
        DateParser.relative_date_span_return retval = new DateParser.relative_date_span_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token JOUR413=null;
        Token SEMAINE414=null;
        Token MOIS415=null;
        Token ANNEE416=null;

        Object JOUR413_tree=null;
        Object SEMAINE414_tree=null;
        Object MOIS415_tree=null;
        Object ANNEE416_tree=null;
        RewriteRuleTokenStream stream_SEMAINE=new RewriteRuleTokenStream(adaptor,"token SEMAINE");
        RewriteRuleTokenStream stream_ANNEE=new RewriteRuleTokenStream(adaptor,"token ANNEE");
        RewriteRuleTokenStream stream_JOUR=new RewriteRuleTokenStream(adaptor,"token JOUR");
        RewriteRuleTokenStream stream_MOIS=new RewriteRuleTokenStream(adaptor,"token MOIS");

        try { dbg.enterRule(getGrammarFileName(), "relative_date_span");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(603, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:604:3: ( JOUR -> SPAN[\"day\"] | SEMAINE -> SPAN[\"week\"] | MOIS -> SPAN[\"month\"] | ANNEE -> SPAN[\"year\"] )
            int alt125=4;
            try { dbg.enterDecision(125);

            switch ( input.LA(1) ) {
            case JOUR:
                {
                alt125=1;
                }
                break;
            case SEMAINE:
                {
                alt125=2;
                }
                break;
            case MOIS:
                {
                alt125=3;
                }
                break;
            case ANNEE:
                {
                alt125=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(125);}

            switch (alt125) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:604:5: JOUR
                    {
                    dbg.location(604,5);
                    JOUR413=(Token)match(input,JOUR,FOLLOW_JOUR_in_relative_date_span6338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JOUR.add(JOUR413);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 604:14: -> SPAN[\"day\"]
                    {
                        dbg.location(604,17);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "day"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:605:5: SEMAINE
                    {
                    dbg.location(605,5);
                    SEMAINE414=(Token)match(input,SEMAINE,FOLLOW_SEMAINE_in_relative_date_span6353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMAINE.add(SEMAINE414);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 605:14: -> SPAN[\"week\"]
                    {
                        dbg.location(605,17);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "week"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:606:5: MOIS
                    {
                    dbg.location(606,5);
                    MOIS415=(Token)match(input,MOIS,FOLLOW_MOIS_in_relative_date_span6365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOIS.add(MOIS415);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 606:14: -> SPAN[\"month\"]
                    {
                        dbg.location(606,17);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "month"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:607:5: ANNEE
                    {
                    dbg.location(607,5);
                    ANNEE416=(Token)match(input,ANNEE,FOLLOW_ANNEE_in_relative_date_span6380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ANNEE.add(ANNEE416);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 607:14: -> SPAN[\"year\"]
                    {
                        dbg.location(607,17);
                        adaptor.addChild(root_0, (Object)adaptor.create(SPAN, "year"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(608, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_date_span");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_date_span"

    public static class day_of_week_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "day_of_week"
    // com/joestelmach/natty/generated/DateParser.g:610:1: day_of_week : ( DIMANCHE -> ^( DAY_OF_WEEK INT[\"1\"] ) | LUNDI -> ^( DAY_OF_WEEK INT[\"2\"] ) | MARDI -> ^( DAY_OF_WEEK INT[\"3\"] ) | MERCREDI -> ^( DAY_OF_WEEK INT[\"4\"] ) | JEUDI -> ^( DAY_OF_WEEK INT[\"5\"] ) | VENDREDI -> ^( DAY_OF_WEEK INT[\"6\"] ) | SAMEDI -> ^( DAY_OF_WEEK INT[\"7\"] ) );
    public final DateParser.day_of_week_return day_of_week() throws RecognitionException {
        DateParser.day_of_week_return retval = new DateParser.day_of_week_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DIMANCHE417=null;
        Token LUNDI418=null;
        Token MARDI419=null;
        Token MERCREDI420=null;
        Token JEUDI421=null;
        Token VENDREDI422=null;
        Token SAMEDI423=null;

        Object DIMANCHE417_tree=null;
        Object LUNDI418_tree=null;
        Object MARDI419_tree=null;
        Object MERCREDI420_tree=null;
        Object JEUDI421_tree=null;
        Object VENDREDI422_tree=null;
        Object SAMEDI423_tree=null;
        RewriteRuleTokenStream stream_MERCREDI=new RewriteRuleTokenStream(adaptor,"token MERCREDI");
        RewriteRuleTokenStream stream_SAMEDI=new RewriteRuleTokenStream(adaptor,"token SAMEDI");
        RewriteRuleTokenStream stream_VENDREDI=new RewriteRuleTokenStream(adaptor,"token VENDREDI");
        RewriteRuleTokenStream stream_JEUDI=new RewriteRuleTokenStream(adaptor,"token JEUDI");
        RewriteRuleTokenStream stream_MARDI=new RewriteRuleTokenStream(adaptor,"token MARDI");
        RewriteRuleTokenStream stream_LUNDI=new RewriteRuleTokenStream(adaptor,"token LUNDI");
        RewriteRuleTokenStream stream_DIMANCHE=new RewriteRuleTokenStream(adaptor,"token DIMANCHE");

        try { dbg.enterRule(getGrammarFileName(), "day_of_week");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(610, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:611:3: ( DIMANCHE -> ^( DAY_OF_WEEK INT[\"1\"] ) | LUNDI -> ^( DAY_OF_WEEK INT[\"2\"] ) | MARDI -> ^( DAY_OF_WEEK INT[\"3\"] ) | MERCREDI -> ^( DAY_OF_WEEK INT[\"4\"] ) | JEUDI -> ^( DAY_OF_WEEK INT[\"5\"] ) | VENDREDI -> ^( DAY_OF_WEEK INT[\"6\"] ) | SAMEDI -> ^( DAY_OF_WEEK INT[\"7\"] ) )
            int alt126=7;
            try { dbg.enterDecision(126);

            switch ( input.LA(1) ) {
            case DIMANCHE:
                {
                alt126=1;
                }
                break;
            case LUNDI:
                {
                alt126=2;
                }
                break;
            case MARDI:
                {
                alt126=3;
                }
                break;
            case MERCREDI:
                {
                alt126=4;
                }
                break;
            case JEUDI:
                {
                alt126=5;
                }
                break;
            case VENDREDI:
                {
                alt126=6;
                }
                break;
            case SAMEDI:
                {
                alt126=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(126);}

            switch (alt126) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:611:5: DIMANCHE
                    {
                    dbg.location(611,5);
                    DIMANCHE417=(Token)match(input,DIMANCHE,FOLLOW_DIMANCHE_in_day_of_week6403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIMANCHE.add(DIMANCHE417);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 611:15: -> ^( DAY_OF_WEEK INT[\"1\"] )
                    {
                        dbg.location(611,18);
                        // com/joestelmach/natty/generated/DateParser.g:611:18: ^( DAY_OF_WEEK INT[\"1\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(611,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(611,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "1"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:612:5: LUNDI
                    {
                    dbg.location(612,5);
                    LUNDI418=(Token)match(input,LUNDI,FOLLOW_LUNDI_in_day_of_week6419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LUNDI.add(LUNDI418);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 612:15: -> ^( DAY_OF_WEEK INT[\"2\"] )
                    {
                        dbg.location(612,18);
                        // com/joestelmach/natty/generated/DateParser.g:612:18: ^( DAY_OF_WEEK INT[\"2\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(612,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(612,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "2"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:613:5: MARDI
                    {
                    dbg.location(613,5);
                    MARDI419=(Token)match(input,MARDI,FOLLOW_MARDI_in_day_of_week6438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MARDI.add(MARDI419);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 613:15: -> ^( DAY_OF_WEEK INT[\"3\"] )
                    {
                        dbg.location(613,18);
                        // com/joestelmach/natty/generated/DateParser.g:613:18: ^( DAY_OF_WEEK INT[\"3\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(613,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(613,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "3"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:614:5: MERCREDI
                    {
                    dbg.location(614,5);
                    MERCREDI420=(Token)match(input,MERCREDI,FOLLOW_MERCREDI_in_day_of_week6457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERCREDI.add(MERCREDI420);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 614:15: -> ^( DAY_OF_WEEK INT[\"4\"] )
                    {
                        dbg.location(614,18);
                        // com/joestelmach/natty/generated/DateParser.g:614:18: ^( DAY_OF_WEEK INT[\"4\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(614,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(614,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "4"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:615:5: JEUDI
                    {
                    dbg.location(615,5);
                    JEUDI421=(Token)match(input,JEUDI,FOLLOW_JEUDI_in_day_of_week6473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JEUDI.add(JEUDI421);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 615:15: -> ^( DAY_OF_WEEK INT[\"5\"] )
                    {
                        dbg.location(615,18);
                        // com/joestelmach/natty/generated/DateParser.g:615:18: ^( DAY_OF_WEEK INT[\"5\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(615,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(615,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "5"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // com/joestelmach/natty/generated/DateParser.g:616:5: VENDREDI
                    {
                    dbg.location(616,5);
                    VENDREDI422=(Token)match(input,VENDREDI,FOLLOW_VENDREDI_in_day_of_week6492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VENDREDI.add(VENDREDI422);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 616:15: -> ^( DAY_OF_WEEK INT[\"6\"] )
                    {
                        dbg.location(616,18);
                        // com/joestelmach/natty/generated/DateParser.g:616:18: ^( DAY_OF_WEEK INT[\"6\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(616,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(616,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "6"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // com/joestelmach/natty/generated/DateParser.g:617:5: SAMEDI
                    {
                    dbg.location(617,5);
                    SAMEDI423=(Token)match(input,SAMEDI,FOLLOW_SAMEDI_in_day_of_week6508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMEDI.add(SAMEDI423);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 617:15: -> ^( DAY_OF_WEEK INT[\"7\"] )
                    {
                        dbg.location(617,18);
                        // com/joestelmach/natty/generated/DateParser.g:617:18: ^( DAY_OF_WEEK INT[\"7\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(617,20);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DAY_OF_WEEK, "DAY_OF_WEEK"), root_1);

                        dbg.location(617,32);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "7"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(618, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "day_of_week");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "day_of_week"

    public static class named_relative_date_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_relative_date"
    // com/joestelmach/natty/generated/DateParser.g:620:1: named_relative_date : ( ( AUJOURD_HUI | MAINTENANT ) -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) | DEMAIN -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) ) | APRES_DEMAIN -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) ) | HIER -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) ) | AVANT_HIER -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) ) );
    public final DateParser.named_relative_date_return named_relative_date() throws RecognitionException {
        DateParser.named_relative_date_return retval = new DateParser.named_relative_date_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AUJOURD_HUI424=null;
        Token MAINTENANT425=null;
        Token DEMAIN426=null;
        Token APRES_DEMAIN427=null;
        Token HIER428=null;
        Token AVANT_HIER429=null;

        Object AUJOURD_HUI424_tree=null;
        Object MAINTENANT425_tree=null;
        Object DEMAIN426_tree=null;
        Object APRES_DEMAIN427_tree=null;
        Object HIER428_tree=null;
        Object AVANT_HIER429_tree=null;
        RewriteRuleTokenStream stream_MAINTENANT=new RewriteRuleTokenStream(adaptor,"token MAINTENANT");
        RewriteRuleTokenStream stream_DEMAIN=new RewriteRuleTokenStream(adaptor,"token DEMAIN");
        RewriteRuleTokenStream stream_AVANT_HIER=new RewriteRuleTokenStream(adaptor,"token AVANT_HIER");
        RewriteRuleTokenStream stream_HIER=new RewriteRuleTokenStream(adaptor,"token HIER");
        RewriteRuleTokenStream stream_APRES_DEMAIN=new RewriteRuleTokenStream(adaptor,"token APRES_DEMAIN");
        RewriteRuleTokenStream stream_AUJOURD_HUI=new RewriteRuleTokenStream(adaptor,"token AUJOURD_HUI");

        try { dbg.enterRule(getGrammarFileName(), "named_relative_date");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(620, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:621:3: ( ( AUJOURD_HUI | MAINTENANT ) -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) | DEMAIN -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) ) | APRES_DEMAIN -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) ) | HIER -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) ) | AVANT_HIER -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) ) )
            int alt128=5;
            try { dbg.enterDecision(128);

            switch ( input.LA(1) ) {
            case AUJOURD_HUI:
            case MAINTENANT:
                {
                alt128=1;
                }
                break;
            case DEMAIN:
                {
                alt128=2;
                }
                break;
            case APRES_DEMAIN:
                {
                alt128=3;
                }
                break;
            case HIER:
                {
                alt128=4;
                }
                break;
            case AVANT_HIER:
                {
                alt128=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(128);}

            switch (alt128) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:621:5: ( AUJOURD_HUI | MAINTENANT )
                    {
                    dbg.location(621,5);
                    // com/joestelmach/natty/generated/DateParser.g:621:5: ( AUJOURD_HUI | MAINTENANT )
                    int alt127=2;
                    try { dbg.enterSubRule(127);
                    try { dbg.enterDecision(127);

                    switch ( input.LA(1) ) {
                    case AUJOURD_HUI:
                        {
                        alt127=1;
                        }
                        break;
                    case MAINTENANT:
                        {
                        alt127=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(127);}

                    switch (alt127) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:621:6: AUJOURD_HUI
                            {
                            dbg.location(621,6);
                            AUJOURD_HUI424=(Token)match(input,AUJOURD_HUI,FOLLOW_AUJOURD_HUI_in_named_relative_date6536); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AUJOURD_HUI.add(AUJOURD_HUI424);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:621:20: MAINTENANT
                            {
                            dbg.location(621,20);
                            MAINTENANT425=(Token)match(input,MAINTENANT,FOLLOW_MAINTENANT_in_named_relative_date6540); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_MAINTENANT.add(MAINTENANT425);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(127);}



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 621:33: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                    {
                        dbg.location(621,36);
                        // com/joestelmach/natty/generated/DateParser.g:621:36: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(621,38);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(621,52);
                        // com/joestelmach/natty/generated/DateParser.g:621:52: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(621,54);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(621,59);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(621,74);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(621,92);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));
                        dbg.location(621,101);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "day"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:622:5: DEMAIN
                    {
                    dbg.location(622,5);
                    DEMAIN426=(Token)match(input,DEMAIN,FOLLOW_DEMAIN_in_named_relative_date6570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEMAIN.add(DEMAIN426);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 622:33: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) )
                    {
                        dbg.location(622,36);
                        // com/joestelmach/natty/generated/DateParser.g:622:36: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(622,38);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(622,52);
                        // com/joestelmach/natty/generated/DateParser.g:622:52: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(622,54);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(622,59);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(622,74);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(622,92);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "1"));
                        dbg.location(622,101);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "day"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:623:5: APRES_DEMAIN
                    {
                    dbg.location(623,5);
                    APRES_DEMAIN427=(Token)match(input,APRES_DEMAIN,FOLLOW_APRES_DEMAIN_in_named_relative_date6619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APRES_DEMAIN.add(APRES_DEMAIN427);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 623:33: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) )
                    {
                        dbg.location(623,36);
                        // com/joestelmach/natty/generated/DateParser.g:623:36: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(623,38);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(623,52);
                        // com/joestelmach/natty/generated/DateParser.g:623:52: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(623,54);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(623,59);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(623,74);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(623,92);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "2"));
                        dbg.location(623,101);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "day"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:624:5: HIER
                    {
                    dbg.location(624,5);
                    HIER428=(Token)match(input,HIER,FOLLOW_HIER_in_named_relative_date6662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HIER.add(HIER428);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 624:33: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) )
                    {
                        dbg.location(624,36);
                        // com/joestelmach/natty/generated/DateParser.g:624:36: ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(624,38);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(624,52);
                        // com/joestelmach/natty/generated/DateParser.g:624:52: ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"1\"] SPAN[\"day\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(624,54);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(624,59);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, "<"));
                        dbg.location(624,74);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(624,92);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "1"));
                        dbg.location(624,101);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "day"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:625:5: AVANT_HIER
                    {
                    dbg.location(625,5);
                    AVANT_HIER429=(Token)match(input,AVANT_HIER,FOLLOW_AVANT_HIER_in_named_relative_date6713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVANT_HIER.add(AVANT_HIER429);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 625:33: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) )
                    {
                        dbg.location(625,36);
                        // com/joestelmach/natty/generated/DateParser.g:625:36: ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(625,38);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                        dbg.location(625,52);
                        // com/joestelmach/natty/generated/DateParser.g:625:52: ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"2\"] SPAN[\"day\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(625,54);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(625,59);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, "<"));
                        dbg.location(625,74);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(625,92);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "2"));
                        dbg.location(625,101);
                        adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "day"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(626, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "named_relative_date");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "named_relative_date"

    public static class named_relative_time_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_relative_time"
    // com/joestelmach/natty/generated/DateParser.g:628:1: named_relative_time : MAINTENANT -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ;
    public final DateParser.named_relative_time_return named_relative_time() throws RecognitionException {
        DateParser.named_relative_time_return retval = new DateParser.named_relative_time_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token MAINTENANT430=null;

        Object MAINTENANT430_tree=null;
        RewriteRuleTokenStream stream_MAINTENANT=new RewriteRuleTokenStream(adaptor,"token MAINTENANT");

        try { dbg.enterRule(getGrammarFileName(), "named_relative_time");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(628, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:629:3: ( MAINTENANT -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:629:5: MAINTENANT
            {
            dbg.location(629,5);
            MAINTENANT430=(Token)match(input,MAINTENANT,FOLLOW_MAINTENANT_in_named_relative_time6767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MAINTENANT.add(MAINTENANT430);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 629:16: -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
            {
                dbg.location(629,19);
                // com/joestelmach/natty/generated/DateParser.g:629:19: ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(629,21);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_DATE, "RELATIVE_DATE"), root_1);

                dbg.location(629,35);
                // com/joestelmach/natty/generated/DateParser.g:629:35: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] )
                {
                Object root_2 = (Object)adaptor.nil();
                dbg.location(629,37);
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                dbg.location(629,42);
                adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                dbg.location(629,57);
                adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                dbg.location(629,75);
                adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));
                dbg.location(629,84);
                adaptor.addChild(root_2, (Object)adaptor.create(SPAN, "day"));

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(630, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "named_relative_time");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "named_relative_time"

    public static class relative_time_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relative_time"
    // com/joestelmach/natty/generated/DateParser.g:634:1: relative_time : ( spelled_or_int_optional_prefix WHITE_SPACE relative_time_target WHITE_SPACE relative_time_suffix -> ^( RELATIVE_TIME ^( SEEK relative_time_suffix spelled_or_int_optional_prefix relative_time_target ) ) | DANS WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_time_target -> ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_target ) ) | relative_time_target WHITE_SPACE prefix -> ^( RELATIVE_TIME ^( SEEK prefix relative_time_target ) ) );
    public final DateParser.relative_time_return relative_time() throws RecognitionException {
        DateParser.relative_time_return retval = new DateParser.relative_time_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHITE_SPACE432=null;
        Token WHITE_SPACE434=null;
        Token DANS436=null;
        Token WHITE_SPACE437=null;
        Token WHITE_SPACE439=null;
        Token WHITE_SPACE442=null;
        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix431 = null;

        DateParser.relative_time_target_return relative_time_target433 = null;

        DateParser.relative_time_suffix_return relative_time_suffix435 = null;

        DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix438 = null;

        DateParser.relative_time_target_return relative_time_target440 = null;

        DateParser.relative_time_target_return relative_time_target441 = null;

        DateParser.prefix_return prefix443 = null;


        Object WHITE_SPACE432_tree=null;
        Object WHITE_SPACE434_tree=null;
        Object DANS436_tree=null;
        Object WHITE_SPACE437_tree=null;
        Object WHITE_SPACE439_tree=null;
        Object WHITE_SPACE442_tree=null;
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");
        RewriteRuleSubtreeStream stream_spelled_or_int_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule spelled_or_int_optional_prefix");
        RewriteRuleSubtreeStream stream_relative_time_target=new RewriteRuleSubtreeStream(adaptor,"rule relative_time_target");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_relative_time_suffix=new RewriteRuleSubtreeStream(adaptor,"rule relative_time_suffix");
        try { dbg.enterRule(getGrammarFileName(), "relative_time");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(634, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:636:3: ( spelled_or_int_optional_prefix WHITE_SPACE relative_time_target WHITE_SPACE relative_time_suffix -> ^( RELATIVE_TIME ^( SEEK relative_time_suffix spelled_or_int_optional_prefix relative_time_target ) ) | DANS WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_time_target -> ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_target ) ) | relative_time_target WHITE_SPACE prefix -> ^( RELATIVE_TIME ^( SEEK prefix relative_time_target ) ) )
            int alt129=3;
            try { dbg.enterDecision(129);

            switch ( input.LA(1) ) {
            case INT_01:
            case INT_02:
            case INT_03:
            case INT_04:
            case INT_05:
            case INT_06:
            case INT_07:
            case INT_08:
            case INT_09:
            case INT_1:
            case INT_2:
            case INT_3:
            case INT_4:
            case INT_5:
            case INT_6:
            case INT_7:
            case INT_8:
            case INT_9:
            case INT_10:
            case INT_11:
            case INT_12:
            case INT_13:
            case INT_14:
            case INT_15:
            case INT_16:
            case INT_17:
            case INT_18:
            case INT_19:
            case INT_20:
            case INT_21:
            case INT_22:
            case INT_23:
            case INT_24:
            case INT_25:
            case INT_26:
            case INT_27:
            case INT_28:
            case INT_29:
            case INT_30:
            case INT_31:
            case INT_32:
            case INT_33:
            case INT_34:
            case INT_35:
            case INT_36:
            case INT_37:
            case INT_38:
            case INT_39:
            case INT_40:
            case INT_41:
            case INT_42:
            case INT_43:
            case INT_44:
            case INT_45:
            case INT_46:
            case INT_47:
            case INT_48:
            case INT_49:
            case INT_50:
            case INT_51:
            case INT_52:
            case INT_53:
            case INT_54:
            case INT_55:
            case INT_56:
            case INT_57:
            case INT_58:
            case INT_59:
            case INT_60:
            case INT_61:
            case INT_62:
            case INT_63:
            case INT_64:
            case INT_65:
            case INT_66:
            case INT_67:
            case INT_68:
            case INT_69:
            case INT_70:
            case INT_71:
            case INT_72:
            case INT_73:
            case INT_74:
            case INT_75:
            case INT_76:
            case INT_77:
            case INT_78:
            case INT_79:
            case INT_80:
            case INT_81:
            case INT_82:
            case INT_83:
            case INT_84:
            case INT_85:
            case INT_86:
            case INT_87:
            case INT_88:
            case INT_89:
            case INT_90:
            case INT_91:
            case INT_92:
            case INT_93:
            case INT_94:
            case INT_95:
            case INT_96:
            case INT_97:
            case INT_98:
            case INT_99:
            case UN:
            case DEUX:
            case TROIS:
            case QUATRE:
            case CINQ:
            case SIX:
            case SEPT:
            case HUIT:
            case NEUF:
            case DIX:
            case ONZE:
            case DOUZE:
            case TREIZE:
            case QUATORZE:
            case QUINZE:
            case SEIZE:
            case VINGT:
            case TRENTE:
            case PREMIER:
                {
                alt129=1;
                }
                break;
            case DANS:
                {
                alt129=2;
                }
                break;
            case HEURE:
            case MINUTE:
            case SECOND:
                {
                alt129=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(129);}

            switch (alt129) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:636:5: spelled_or_int_optional_prefix WHITE_SPACE relative_time_target WHITE_SPACE relative_time_suffix
                    {
                    dbg.location(636,5);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_relative_time6809);
                    spelled_or_int_optional_prefix431=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix431.getTree());
                    dbg.location(636,36);
                    WHITE_SPACE432=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time6811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE432);

                    dbg.location(636,48);
                    pushFollow(FOLLOW_relative_time_target_in_relative_time6813);
                    relative_time_target433=relative_time_target();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_time_target.add(relative_time_target433.getTree());
                    dbg.location(636,69);
                    WHITE_SPACE434=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time6815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE434);

                    dbg.location(636,81);
                    pushFollow(FOLLOW_relative_time_suffix_in_relative_time6817);
                    relative_time_suffix435=relative_time_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_time_suffix.add(relative_time_suffix435.getTree());


                    // AST REWRITE
                    // elements: relative_time_suffix, relative_time_target, spelled_or_int_optional_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 637:5: -> ^( RELATIVE_TIME ^( SEEK relative_time_suffix spelled_or_int_optional_prefix relative_time_target ) )
                    {
                        dbg.location(637,8);
                        // com/joestelmach/natty/generated/DateParser.g:637:8: ^( RELATIVE_TIME ^( SEEK relative_time_suffix spelled_or_int_optional_prefix relative_time_target ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(637,10);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_1);

                        dbg.location(637,24);
                        // com/joestelmach/natty/generated/DateParser.g:637:24: ^( SEEK relative_time_suffix spelled_or_int_optional_prefix relative_time_target )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(637,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(637,31);
                        adaptor.addChild(root_2, stream_relative_time_suffix.nextTree());
                        dbg.location(637,52);
                        adaptor.addChild(root_2, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(637,83);
                        adaptor.addChild(root_2, stream_relative_time_target.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:640:5: DANS WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_time_target
                    {
                    dbg.location(640,5);
                    DANS436=(Token)match(input,DANS,FOLLOW_DANS_in_relative_time6852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DANS.add(DANS436);

                    dbg.location(640,10);
                    WHITE_SPACE437=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time6854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE437);

                    dbg.location(640,22);
                    pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_relative_time6856);
                    spelled_or_int_optional_prefix438=spelled_or_int_optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_spelled_or_int_optional_prefix.add(spelled_or_int_optional_prefix438.getTree());
                    dbg.location(640,53);
                    WHITE_SPACE439=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time6858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE439);

                    dbg.location(640,65);
                    pushFollow(FOLLOW_relative_time_target_in_relative_time6860);
                    relative_time_target440=relative_time_target();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_time_target.add(relative_time_target440.getTree());


                    // AST REWRITE
                    // elements: relative_time_target, spelled_or_int_optional_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 641:5: -> ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_target ) )
                    {
                        dbg.location(641,8);
                        // com/joestelmach/natty/generated/DateParser.g:641:8: ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_target ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(641,10);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_1);

                        dbg.location(641,24);
                        // com/joestelmach/natty/generated/DateParser.g:641:24: ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_target )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(641,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(641,31);
                        adaptor.addChild(root_2, (Object)adaptor.create(DIRECTION, ">"));
                        dbg.location(641,46);
                        adaptor.addChild(root_2, (Object)adaptor.create(SEEK_BY, "by_day"));
                        dbg.location(641,64);
                        adaptor.addChild(root_2, stream_spelled_or_int_optional_prefix.nextTree());
                        dbg.location(641,95);
                        adaptor.addChild(root_2, stream_relative_time_target.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:644:5: relative_time_target WHITE_SPACE prefix
                    {
                    dbg.location(644,5);
                    pushFollow(FOLLOW_relative_time_target_in_relative_time6898);
                    relative_time_target441=relative_time_target();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relative_time_target.add(relative_time_target441.getTree());
                    dbg.location(644,26);
                    WHITE_SPACE442=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_relative_time6900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE442);

                    dbg.location(644,38);
                    pushFollow(FOLLOW_prefix_in_relative_time6902);
                    prefix443=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix443.getTree());


                    // AST REWRITE
                    // elements: relative_time_target, prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 645:5: -> ^( RELATIVE_TIME ^( SEEK prefix relative_time_target ) )
                    {
                        dbg.location(645,8);
                        // com/joestelmach/natty/generated/DateParser.g:645:8: ^( RELATIVE_TIME ^( SEEK prefix relative_time_target ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(645,10);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RELATIVE_TIME, "RELATIVE_TIME"), root_1);

                        dbg.location(645,24);
                        // com/joestelmach/natty/generated/DateParser.g:645:24: ^( SEEK prefix relative_time_target )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(645,26);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SEEK, "SEEK"), root_2);

                        dbg.location(645,31);
                        adaptor.addChild(root_2, stream_prefix.nextTree());
                        dbg.location(645,38);
                        adaptor.addChild(root_2, stream_relative_time_target.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(646, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relative_time");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relative_time"

    public static class explicit_time_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_time"
    // com/joestelmach/natty/generated/DateParser.g:649:1: explicit_time : ( hours ( COLON | HEURE_SHORT | ( ( WHITE_SPACE )? HEURE WHITE_SPACE ) ) minutes ( ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) ) seconds )? -> ^( EXPLICIT_TIME hours minutes ( seconds )? ) | hours ( HEURE_SHORT | ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? ) ) -> ^( EXPLICIT_TIME hours ^( MINUTES_OF_HOUR INT[\"0\"] ) ) | ( CE WHITE_SPACE )? named_time -> ^( EXPLICIT_TIME named_time ) );
    public final DateParser.explicit_time_return explicit_time() throws RecognitionException {
        DateParser.explicit_time_return retval = new DateParser.explicit_time_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON445=null;
        Token HEURE_SHORT446=null;
        Token WHITE_SPACE447=null;
        Token HEURE448=null;
        Token WHITE_SPACE449=null;
        Token COLON451=null;
        Token WHITE_SPACE452=null;
        Token MINUTE453=null;
        Token WHITE_SPACE454=null;
        Token HEURE_SHORT457=null;
        Token WHITE_SPACE458=null;
        Token HEURE459=null;
        Token WHITE_SPACE460=null;
        Token CE461=null;
        Token WHITE_SPACE462=null;
        DateParser.hours_return hours444 = null;

        DateParser.minutes_return minutes450 = null;

        DateParser.seconds_return seconds455 = null;

        DateParser.hours_return hours456 = null;

        DateParser.named_time_return named_time463 = null;


        Object COLON445_tree=null;
        Object HEURE_SHORT446_tree=null;
        Object WHITE_SPACE447_tree=null;
        Object HEURE448_tree=null;
        Object WHITE_SPACE449_tree=null;
        Object COLON451_tree=null;
        Object WHITE_SPACE452_tree=null;
        Object MINUTE453_tree=null;
        Object WHITE_SPACE454_tree=null;
        Object HEURE_SHORT457_tree=null;
        Object WHITE_SPACE458_tree=null;
        Object HEURE459_tree=null;
        Object WHITE_SPACE460_tree=null;
        Object CE461_tree=null;
        Object WHITE_SPACE462_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_CE=new RewriteRuleTokenStream(adaptor,"token CE");
        RewriteRuleTokenStream stream_HEURE_SHORT=new RewriteRuleTokenStream(adaptor,"token HEURE_SHORT");
        RewriteRuleTokenStream stream_MINUTE=new RewriteRuleTokenStream(adaptor,"token MINUTE");
        RewriteRuleTokenStream stream_HEURE=new RewriteRuleTokenStream(adaptor,"token HEURE");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleSubtreeStream stream_minutes=new RewriteRuleSubtreeStream(adaptor,"rule minutes");
        RewriteRuleSubtreeStream stream_seconds=new RewriteRuleSubtreeStream(adaptor,"rule seconds");
        RewriteRuleSubtreeStream stream_named_time=new RewriteRuleSubtreeStream(adaptor,"rule named_time");
        RewriteRuleSubtreeStream stream_hours=new RewriteRuleSubtreeStream(adaptor,"rule hours");
        try { dbg.enterRule(getGrammarFileName(), "explicit_time");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(649, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:650:3: ( hours ( COLON | HEURE_SHORT | ( ( WHITE_SPACE )? HEURE WHITE_SPACE ) ) minutes ( ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) ) seconds )? -> ^( EXPLICIT_TIME hours minutes ( seconds )? ) | hours ( HEURE_SHORT | ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? ) ) -> ^( EXPLICIT_TIME hours ^( MINUTES_OF_HOUR INT[\"0\"] ) ) | ( CE WHITE_SPACE )? named_time -> ^( EXPLICIT_TIME named_time ) )
            int alt139=3;
            try { dbg.enterDecision(139);

            try {
                isCyclicDecision = true;
                alt139 = dfa139.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:650:5: hours ( COLON | HEURE_SHORT | ( ( WHITE_SPACE )? HEURE WHITE_SPACE ) ) minutes ( ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) ) seconds )?
                    {
                    dbg.location(650,5);
                    pushFollow(FOLLOW_hours_in_explicit_time6936);
                    hours444=hours();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hours.add(hours444.getTree());
                    dbg.location(650,11);
                    // com/joestelmach/natty/generated/DateParser.g:650:11: ( COLON | HEURE_SHORT | ( ( WHITE_SPACE )? HEURE WHITE_SPACE ) )
                    int alt131=3;
                    try { dbg.enterSubRule(131);
                    try { dbg.enterDecision(131);

                    switch ( input.LA(1) ) {
                    case COLON:
                        {
                        alt131=1;
                        }
                        break;
                    case HEURE_SHORT:
                        {
                        alt131=2;
                        }
                        break;
                    case HEURE:
                    case WHITE_SPACE:
                        {
                        alt131=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(131);}

                    switch (alt131) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:650:12: COLON
                            {
                            dbg.location(650,12);
                            COLON445=(Token)match(input,COLON,FOLLOW_COLON_in_explicit_time6939); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON445);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:650:20: HEURE_SHORT
                            {
                            dbg.location(650,20);
                            HEURE_SHORT446=(Token)match(input,HEURE_SHORT,FOLLOW_HEURE_SHORT_in_explicit_time6943); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_HEURE_SHORT.add(HEURE_SHORT446);


                            }
                            break;
                        case 3 :
                            dbg.enterAlt(3);

                            // com/joestelmach/natty/generated/DateParser.g:650:34: ( ( WHITE_SPACE )? HEURE WHITE_SPACE )
                            {
                            dbg.location(650,34);
                            // com/joestelmach/natty/generated/DateParser.g:650:34: ( ( WHITE_SPACE )? HEURE WHITE_SPACE )
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:650:35: ( WHITE_SPACE )? HEURE WHITE_SPACE
                            {
                            dbg.location(650,35);
                            // com/joestelmach/natty/generated/DateParser.g:650:35: ( WHITE_SPACE )?
                            int alt130=2;
                            try { dbg.enterSubRule(130);
                            try { dbg.enterDecision(130);

                            switch ( input.LA(1) ) {
                                case WHITE_SPACE:
                                    {
                                    alt130=1;
                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(130);}

                            switch (alt130) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:650:35: WHITE_SPACE
                                    {
                                    dbg.location(650,35);
                                    WHITE_SPACE447=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time6948); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE447);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(130);}

                            dbg.location(650,48);
                            HEURE448=(Token)match(input,HEURE,FOLLOW_HEURE_in_explicit_time6951); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_HEURE.add(HEURE448);

                            dbg.location(650,54);
                            WHITE_SPACE449=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time6953); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE449);


                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(131);}

                    dbg.location(650,68);
                    pushFollow(FOLLOW_minutes_in_explicit_time6957);
                    minutes450=minutes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutes.add(minutes450.getTree());
                    dbg.location(650,76);
                    // com/joestelmach/natty/generated/DateParser.g:650:76: ( ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) ) seconds )?
                    int alt134=2;
                    try { dbg.enterSubRule(134);
                    try { dbg.enterDecision(134);

                    switch ( input.LA(1) ) {
                        case MINUTE:
                        case COLON:
                            {
                            alt134=1;
                            }
                            break;
                        case WHITE_SPACE:
                            {
                            switch ( input.LA(2) ) {
                                case MINUTE:
                                    {
                                    alt134=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(134);}

                    switch (alt134) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:650:77: ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) ) seconds
                            {
                            dbg.location(650,77);
                            // com/joestelmach/natty/generated/DateParser.g:650:77: ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) )
                            int alt133=2;
                            try { dbg.enterSubRule(133);
                            try { dbg.enterDecision(133);

                            switch ( input.LA(1) ) {
                            case COLON:
                                {
                                alt133=1;
                                }
                                break;
                            case MINUTE:
                            case WHITE_SPACE:
                                {
                                alt133=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 133, 0, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }

                            } finally {dbg.exitDecision(133);}

                            switch (alt133) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:650:78: COLON
                                    {
                                    dbg.location(650,78);
                                    COLON451=(Token)match(input,COLON,FOLLOW_COLON_in_explicit_time6961); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON451);


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // com/joestelmach/natty/generated/DateParser.g:650:86: ( ( WHITE_SPACE )? MINUTE WHITE_SPACE )
                                    {
                                    dbg.location(650,86);
                                    // com/joestelmach/natty/generated/DateParser.g:650:86: ( ( WHITE_SPACE )? MINUTE WHITE_SPACE )
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:650:87: ( WHITE_SPACE )? MINUTE WHITE_SPACE
                                    {
                                    dbg.location(650,87);
                                    // com/joestelmach/natty/generated/DateParser.g:650:87: ( WHITE_SPACE )?
                                    int alt132=2;
                                    try { dbg.enterSubRule(132);
                                    try { dbg.enterDecision(132);

                                    switch ( input.LA(1) ) {
                                        case WHITE_SPACE:
                                            {
                                            alt132=1;
                                            }
                                            break;
                                    }

                                    } finally {dbg.exitDecision(132);}

                                    switch (alt132) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // com/joestelmach/natty/generated/DateParser.g:650:87: WHITE_SPACE
                                            {
                                            dbg.location(650,87);
                                            WHITE_SPACE452=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time6966); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE452);


                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(132);}

                                    dbg.location(650,100);
                                    MINUTE453=(Token)match(input,MINUTE,FOLLOW_MINUTE_in_explicit_time6969); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_MINUTE.add(MINUTE453);

                                    dbg.location(650,107);
                                    WHITE_SPACE454=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time6971); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE454);


                                    }


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(133);}

                            dbg.location(650,121);
                            pushFollow(FOLLOW_seconds_in_explicit_time6975);
                            seconds455=seconds();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_seconds.add(seconds455.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(134);}



                    // AST REWRITE
                    // elements: minutes, seconds, hours
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 651:7: -> ^( EXPLICIT_TIME hours minutes ( seconds )? )
                    {
                        dbg.location(651,10);
                        // com/joestelmach/natty/generated/DateParser.g:651:10: ^( EXPLICIT_TIME hours minutes ( seconds )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(651,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_TIME, "EXPLICIT_TIME"), root_1);

                        dbg.location(651,26);
                        adaptor.addChild(root_1, stream_hours.nextTree());
                        dbg.location(651,32);
                        adaptor.addChild(root_1, stream_minutes.nextTree());
                        dbg.location(651,40);
                        // com/joestelmach/natty/generated/DateParser.g:651:40: ( seconds )?
                        if ( stream_seconds.hasNext() ) {
                            dbg.location(651,40);
                            adaptor.addChild(root_1, stream_seconds.nextTree());

                        }
                        stream_seconds.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:653:5: hours ( HEURE_SHORT | ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? ) )
                    {
                    dbg.location(653,5);
                    pushFollow(FOLLOW_hours_in_explicit_time7005);
                    hours456=hours();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hours.add(hours456.getTree());
                    dbg.location(653,11);
                    // com/joestelmach/natty/generated/DateParser.g:653:11: ( HEURE_SHORT | ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? ) )
                    int alt137=2;
                    try { dbg.enterSubRule(137);
                    try { dbg.enterDecision(137);

                    switch ( input.LA(1) ) {
                    case HEURE_SHORT:
                        {
                        alt137=1;
                        }
                        break;
                    case HEURE:
                    case WHITE_SPACE:
                        {
                        alt137=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(137);}

                    switch (alt137) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:653:12: HEURE_SHORT
                            {
                            dbg.location(653,12);
                            HEURE_SHORT457=(Token)match(input,HEURE_SHORT,FOLLOW_HEURE_SHORT_in_explicit_time7008); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_HEURE_SHORT.add(HEURE_SHORT457);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // com/joestelmach/natty/generated/DateParser.g:653:26: ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? )
                            {
                            dbg.location(653,26);
                            // com/joestelmach/natty/generated/DateParser.g:653:26: ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? )
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:653:27: ( WHITE_SPACE )? HEURE ( WHITE_SPACE )?
                            {
                            dbg.location(653,27);
                            // com/joestelmach/natty/generated/DateParser.g:653:27: ( WHITE_SPACE )?
                            int alt135=2;
                            try { dbg.enterSubRule(135);
                            try { dbg.enterDecision(135);

                            switch ( input.LA(1) ) {
                                case WHITE_SPACE:
                                    {
                                    alt135=1;
                                    }
                                    break;
                            }

                            } finally {dbg.exitDecision(135);}

                            switch (alt135) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:653:27: WHITE_SPACE
                                    {
                                    dbg.location(653,27);
                                    WHITE_SPACE458=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time7013); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE458);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(135);}

                            dbg.location(653,40);
                            HEURE459=(Token)match(input,HEURE,FOLLOW_HEURE_in_explicit_time7016); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_HEURE.add(HEURE459);

                            dbg.location(653,46);
                            // com/joestelmach/natty/generated/DateParser.g:653:46: ( WHITE_SPACE )?
                            int alt136=2;
                            try { dbg.enterSubRule(136);
                            try { dbg.enterDecision(136);

                            try {
                                isCyclicDecision = true;
                                alt136 = dfa136.predict(input);
                            }
                            catch (NoViableAltException nvae) {
                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            } finally {dbg.exitDecision(136);}

                            switch (alt136) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // com/joestelmach/natty/generated/DateParser.g:653:46: WHITE_SPACE
                                    {
                                    dbg.location(653,46);
                                    WHITE_SPACE460=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time7018); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE460);


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(136);}


                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(137);}



                    // AST REWRITE
                    // elements: hours
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 654:7: -> ^( EXPLICIT_TIME hours ^( MINUTES_OF_HOUR INT[\"0\"] ) )
                    {
                        dbg.location(654,10);
                        // com/joestelmach/natty/generated/DateParser.g:654:10: ^( EXPLICIT_TIME hours ^( MINUTES_OF_HOUR INT[\"0\"] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(654,12);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_TIME, "EXPLICIT_TIME"), root_1);

                        dbg.location(654,26);
                        adaptor.addChild(root_1, stream_hours.nextTree());
                        dbg.location(654,32);
                        // com/joestelmach/natty/generated/DateParser.g:654:32: ^( MINUTES_OF_HOUR INT[\"0\"] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        dbg.location(654,34);
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_2);

                        dbg.location(654,50);
                        adaptor.addChild(root_2, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:656:5: ( CE WHITE_SPACE )? named_time
                    {
                    dbg.location(656,5);
                    // com/joestelmach/natty/generated/DateParser.g:656:5: ( CE WHITE_SPACE )?
                    int alt138=2;
                    try { dbg.enterSubRule(138);
                    try { dbg.enterDecision(138);

                    switch ( input.LA(1) ) {
                        case CE:
                            {
                            alt138=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(138);}

                    switch (alt138) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:656:6: CE WHITE_SPACE
                            {
                            dbg.location(656,6);
                            CE461=(Token)match(input,CE,FOLLOW_CE_in_explicit_time7052); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CE.add(CE461);

                            dbg.location(656,9);
                            WHITE_SPACE462=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_explicit_time7054); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE462);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(138);}

                    dbg.location(656,23);
                    pushFollow(FOLLOW_named_time_in_explicit_time7058);
                    named_time463=named_time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_named_time.add(named_time463.getTree());


                    // AST REWRITE
                    // elements: named_time
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 657:8: -> ^( EXPLICIT_TIME named_time )
                    {
                        dbg.location(657,11);
                        // com/joestelmach/natty/generated/DateParser.g:657:11: ^( EXPLICIT_TIME named_time )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(657,13);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPLICIT_TIME, "EXPLICIT_TIME"), root_1);

                        dbg.location(657,27);
                        adaptor.addChild(root_1, stream_named_time.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(658, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "explicit_time");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "explicit_time"

    public static class hours_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hours"
    // com/joestelmach/natty/generated/DateParser.g:660:1: hours : int_00_to_23_optional_prefix -> ^( HOURS_OF_DAY int_00_to_23_optional_prefix ) ;
    public final DateParser.hours_return hours() throws RecognitionException {
        DateParser.hours_return retval = new DateParser.hours_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_00_to_23_optional_prefix_return int_00_to_23_optional_prefix464 = null;


        RewriteRuleSubtreeStream stream_int_00_to_23_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule int_00_to_23_optional_prefix");
        try { dbg.enterRule(getGrammarFileName(), "hours");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(660, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:661:3: ( int_00_to_23_optional_prefix -> ^( HOURS_OF_DAY int_00_to_23_optional_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:661:5: int_00_to_23_optional_prefix
            {
            dbg.location(661,5);
            pushFollow(FOLLOW_int_00_to_23_optional_prefix_in_hours7088);
            int_00_to_23_optional_prefix464=int_00_to_23_optional_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_00_to_23_optional_prefix.add(int_00_to_23_optional_prefix464.getTree());


            // AST REWRITE
            // elements: int_00_to_23_optional_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 661:34: -> ^( HOURS_OF_DAY int_00_to_23_optional_prefix )
            {
                dbg.location(661,37);
                // com/joestelmach/natty/generated/DateParser.g:661:37: ^( HOURS_OF_DAY int_00_to_23_optional_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(661,39);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HOURS_OF_DAY, "HOURS_OF_DAY"), root_1);

                dbg.location(661,52);
                adaptor.addChild(root_1, stream_int_00_to_23_optional_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(662, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hours");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "hours"

    public static class minutes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutes"
    // com/joestelmach/natty/generated/DateParser.g:664:1: minutes : int_00_to_59_mandatory_prefix -> ^( MINUTES_OF_HOUR int_00_to_59_mandatory_prefix ) ;
    public final DateParser.minutes_return minutes() throws RecognitionException {
        DateParser.minutes_return retval = new DateParser.minutes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_00_to_59_mandatory_prefix_return int_00_to_59_mandatory_prefix465 = null;


        RewriteRuleSubtreeStream stream_int_00_to_59_mandatory_prefix=new RewriteRuleSubtreeStream(adaptor,"rule int_00_to_59_mandatory_prefix");
        try { dbg.enterRule(getGrammarFileName(), "minutes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(664, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:665:3: ( int_00_to_59_mandatory_prefix -> ^( MINUTES_OF_HOUR int_00_to_59_mandatory_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:665:5: int_00_to_59_mandatory_prefix
            {
            dbg.location(665,5);
            pushFollow(FOLLOW_int_00_to_59_mandatory_prefix_in_minutes7111);
            int_00_to_59_mandatory_prefix465=int_00_to_59_mandatory_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_00_to_59_mandatory_prefix.add(int_00_to_59_mandatory_prefix465.getTree());


            // AST REWRITE
            // elements: int_00_to_59_mandatory_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 665:35: -> ^( MINUTES_OF_HOUR int_00_to_59_mandatory_prefix )
            {
                dbg.location(665,38);
                // com/joestelmach/natty/generated/DateParser.g:665:38: ^( MINUTES_OF_HOUR int_00_to_59_mandatory_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(665,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_1);

                dbg.location(665,56);
                adaptor.addChild(root_1, stream_int_00_to_59_mandatory_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(666, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "minutes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "minutes"

    public static class seconds_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "seconds"
    // com/joestelmach/natty/generated/DateParser.g:668:1: seconds : int_00_to_59_mandatory_prefix -> ^( SECONDS_OF_MINUTE int_00_to_59_mandatory_prefix ) ;
    public final DateParser.seconds_return seconds() throws RecognitionException {
        DateParser.seconds_return retval = new DateParser.seconds_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DateParser_NumericRules.int_00_to_59_mandatory_prefix_return int_00_to_59_mandatory_prefix466 = null;


        RewriteRuleSubtreeStream stream_int_00_to_59_mandatory_prefix=new RewriteRuleSubtreeStream(adaptor,"rule int_00_to_59_mandatory_prefix");
        try { dbg.enterRule(getGrammarFileName(), "seconds");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(668, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:669:3: ( int_00_to_59_mandatory_prefix -> ^( SECONDS_OF_MINUTE int_00_to_59_mandatory_prefix ) )
            dbg.enterAlt(1);

            // com/joestelmach/natty/generated/DateParser.g:669:5: int_00_to_59_mandatory_prefix
            {
            dbg.location(669,5);
            pushFollow(FOLLOW_int_00_to_59_mandatory_prefix_in_seconds7134);
            int_00_to_59_mandatory_prefix466=int_00_to_59_mandatory_prefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_int_00_to_59_mandatory_prefix.add(int_00_to_59_mandatory_prefix466.getTree());


            // AST REWRITE
            // elements: int_00_to_59_mandatory_prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:35: -> ^( SECONDS_OF_MINUTE int_00_to_59_mandatory_prefix )
            {
                dbg.location(669,38);
                // com/joestelmach/natty/generated/DateParser.g:669:38: ^( SECONDS_OF_MINUTE int_00_to_59_mandatory_prefix )
                {
                Object root_1 = (Object)adaptor.nil();
                dbg.location(669,40);
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SECONDS_OF_MINUTE, "SECONDS_OF_MINUTE"), root_1);

                dbg.location(669,58);
                adaptor.addChild(root_1, stream_int_00_to_59_mandatory_prefix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(670, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "seconds");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "seconds"

    public static class named_time_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_time"
    // com/joestelmach/natty/generated/DateParser.g:672:1: named_time : ( ( DANS WHITE_SPACE LE WHITE_SPACE )? APRES_MIDI -> ^( HOURS_OF_DAY INT[\"12\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? MATIN -> ^( HOURS_OF_DAY INT[\"8\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? NUIT -> ^( HOURS_OF_DAY INT[\"20\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( A WHITE_SPACE )? MINUIT -> ^( HOURS_OF_DAY INT[\"0\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? SOIR -> ^( HOURS_OF_DAY INT[\"19\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) );
    public final DateParser.named_time_return named_time() throws RecognitionException {
        DateParser.named_time_return retval = new DateParser.named_time_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DANS467=null;
        Token WHITE_SPACE468=null;
        Token LE469=null;
        Token WHITE_SPACE470=null;
        Token APRES_MIDI471=null;
        Token DANS472=null;
        Token WHITE_SPACE473=null;
        Token LA474=null;
        Token WHITE_SPACE475=null;
        Token MATIN476=null;
        Token DANS477=null;
        Token WHITE_SPACE478=null;
        Token LA479=null;
        Token WHITE_SPACE480=null;
        Token NUIT481=null;
        Token A482=null;
        Token WHITE_SPACE483=null;
        Token MINUIT484=null;
        Token DANS485=null;
        Token WHITE_SPACE486=null;
        Token LA487=null;
        Token WHITE_SPACE488=null;
        Token SOIR489=null;

        Object DANS467_tree=null;
        Object WHITE_SPACE468_tree=null;
        Object LE469_tree=null;
        Object WHITE_SPACE470_tree=null;
        Object APRES_MIDI471_tree=null;
        Object DANS472_tree=null;
        Object WHITE_SPACE473_tree=null;
        Object LA474_tree=null;
        Object WHITE_SPACE475_tree=null;
        Object MATIN476_tree=null;
        Object DANS477_tree=null;
        Object WHITE_SPACE478_tree=null;
        Object LA479_tree=null;
        Object WHITE_SPACE480_tree=null;
        Object NUIT481_tree=null;
        Object A482_tree=null;
        Object WHITE_SPACE483_tree=null;
        Object MINUIT484_tree=null;
        Object DANS485_tree=null;
        Object WHITE_SPACE486_tree=null;
        Object LA487_tree=null;
        Object WHITE_SPACE488_tree=null;
        Object SOIR489_tree=null;
        RewriteRuleTokenStream stream_LA=new RewriteRuleTokenStream(adaptor,"token LA");
        RewriteRuleTokenStream stream_NUIT=new RewriteRuleTokenStream(adaptor,"token NUIT");
        RewriteRuleTokenStream stream_APRES_MIDI=new RewriteRuleTokenStream(adaptor,"token APRES_MIDI");
        RewriteRuleTokenStream stream_A=new RewriteRuleTokenStream(adaptor,"token A");
        RewriteRuleTokenStream stream_MATIN=new RewriteRuleTokenStream(adaptor,"token MATIN");
        RewriteRuleTokenStream stream_SOIR=new RewriteRuleTokenStream(adaptor,"token SOIR");
        RewriteRuleTokenStream stream_MINUIT=new RewriteRuleTokenStream(adaptor,"token MINUIT");
        RewriteRuleTokenStream stream_WHITE_SPACE=new RewriteRuleTokenStream(adaptor,"token WHITE_SPACE");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_DANS=new RewriteRuleTokenStream(adaptor,"token DANS");

        try { dbg.enterRule(getGrammarFileName(), "named_time");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(672, 1);

        try {
            // com/joestelmach/natty/generated/DateParser.g:673:3: ( ( DANS WHITE_SPACE LE WHITE_SPACE )? APRES_MIDI -> ^( HOURS_OF_DAY INT[\"12\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? MATIN -> ^( HOURS_OF_DAY INT[\"8\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? NUIT -> ^( HOURS_OF_DAY INT[\"20\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( A WHITE_SPACE )? MINUIT -> ^( HOURS_OF_DAY INT[\"0\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? SOIR -> ^( HOURS_OF_DAY INT[\"19\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) )
            int alt145=5;
            try { dbg.enterDecision(145);

            try {
                isCyclicDecision = true;
                alt145 = dfa145.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(145);}

            switch (alt145) {
                case 1 :
                    dbg.enterAlt(1);

                    // com/joestelmach/natty/generated/DateParser.g:673:5: ( DANS WHITE_SPACE LE WHITE_SPACE )? APRES_MIDI
                    {
                    dbg.location(673,5);
                    // com/joestelmach/natty/generated/DateParser.g:673:5: ( DANS WHITE_SPACE LE WHITE_SPACE )?
                    int alt140=2;
                    try { dbg.enterSubRule(140);
                    try { dbg.enterDecision(140);

                    switch ( input.LA(1) ) {
                        case DANS:
                            {
                            alt140=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(140);}

                    switch (alt140) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:673:6: DANS WHITE_SPACE LE WHITE_SPACE
                            {
                            dbg.location(673,6);
                            DANS467=(Token)match(input,DANS,FOLLOW_DANS_in_named_time7158); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DANS.add(DANS467);

                            dbg.location(673,11);
                            WHITE_SPACE468=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7160); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE468);

                            dbg.location(673,23);
                            LE469=(Token)match(input,LE,FOLLOW_LE_in_named_time7162); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LE.add(LE469);

                            dbg.location(673,26);
                            WHITE_SPACE470=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE470);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(140);}

                    dbg.location(673,40);
                    APRES_MIDI471=(Token)match(input,APRES_MIDI,FOLLOW_APRES_MIDI_in_named_time7168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APRES_MIDI.add(APRES_MIDI471);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 673:52: -> ^( HOURS_OF_DAY INT[\"12\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] )
                    {
                        dbg.location(673,55);
                        // com/joestelmach/natty/generated/DateParser.g:673:55: ^( HOURS_OF_DAY INT[\"12\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(673,57);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HOURS_OF_DAY, "HOURS_OF_DAY"), root_1);

                        dbg.location(673,70);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "12"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(673,81);
                        // com/joestelmach/natty/generated/DateParser.g:673:81: ^( MINUTES_OF_HOUR INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(673,83);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_1);

                        dbg.location(673,99);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(673,109);
                        // com/joestelmach/natty/generated/DateParser.g:673:109: ^( SECONDS_OF_MINUTE INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(673,111);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SECONDS_OF_MINUTE, "SECONDS_OF_MINUTE"), root_1);

                        dbg.location(673,129);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // com/joestelmach/natty/generated/DateParser.g:674:5: ( DANS WHITE_SPACE LA WHITE_SPACE )? MATIN
                    {
                    dbg.location(674,5);
                    // com/joestelmach/natty/generated/DateParser.g:674:5: ( DANS WHITE_SPACE LA WHITE_SPACE )?
                    int alt141=2;
                    try { dbg.enterSubRule(141);
                    try { dbg.enterDecision(141);

                    switch ( input.LA(1) ) {
                        case DANS:
                            {
                            alt141=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(141);}

                    switch (alt141) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:674:6: DANS WHITE_SPACE LA WHITE_SPACE
                            {
                            dbg.location(674,6);
                            DANS472=(Token)match(input,DANS,FOLLOW_DANS_in_named_time7199); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DANS.add(DANS472);

                            dbg.location(674,11);
                            WHITE_SPACE473=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7201); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE473);

                            dbg.location(674,23);
                            LA474=(Token)match(input,LA,FOLLOW_LA_in_named_time7203); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LA.add(LA474);

                            dbg.location(674,26);
                            WHITE_SPACE475=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7205); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE475);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(141);}

                    dbg.location(674,40);
                    MATIN476=(Token)match(input,MATIN,FOLLOW_MATIN_in_named_time7209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MATIN.add(MATIN476);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 674:52: -> ^( HOURS_OF_DAY INT[\"8\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] )
                    {
                        dbg.location(674,55);
                        // com/joestelmach/natty/generated/DateParser.g:674:55: ^( HOURS_OF_DAY INT[\"8\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(674,57);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HOURS_OF_DAY, "HOURS_OF_DAY"), root_1);

                        dbg.location(674,70);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "8"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(674,80);
                        // com/joestelmach/natty/generated/DateParser.g:674:80: ^( MINUTES_OF_HOUR INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(674,82);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_1);

                        dbg.location(674,98);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(674,108);
                        // com/joestelmach/natty/generated/DateParser.g:674:108: ^( SECONDS_OF_MINUTE INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(674,110);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SECONDS_OF_MINUTE, "SECONDS_OF_MINUTE"), root_1);

                        dbg.location(674,128);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // com/joestelmach/natty/generated/DateParser.g:675:5: ( DANS WHITE_SPACE LA WHITE_SPACE )? NUIT
                    {
                    dbg.location(675,5);
                    // com/joestelmach/natty/generated/DateParser.g:675:5: ( DANS WHITE_SPACE LA WHITE_SPACE )?
                    int alt142=2;
                    try { dbg.enterSubRule(142);
                    try { dbg.enterDecision(142);

                    switch ( input.LA(1) ) {
                        case DANS:
                            {
                            alt142=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(142);}

                    switch (alt142) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:675:6: DANS WHITE_SPACE LA WHITE_SPACE
                            {
                            dbg.location(675,6);
                            DANS477=(Token)match(input,DANS,FOLLOW_DANS_in_named_time7245); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DANS.add(DANS477);

                            dbg.location(675,11);
                            WHITE_SPACE478=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7247); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE478);

                            dbg.location(675,23);
                            LA479=(Token)match(input,LA,FOLLOW_LA_in_named_time7249); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LA.add(LA479);

                            dbg.location(675,26);
                            WHITE_SPACE480=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7251); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE480);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(142);}

                    dbg.location(675,40);
                    NUIT481=(Token)match(input,NUIT,FOLLOW_NUIT_in_named_time7255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUIT.add(NUIT481);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 675:52: -> ^( HOURS_OF_DAY INT[\"20\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] )
                    {
                        dbg.location(675,55);
                        // com/joestelmach/natty/generated/DateParser.g:675:55: ^( HOURS_OF_DAY INT[\"20\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(675,57);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HOURS_OF_DAY, "HOURS_OF_DAY"), root_1);

                        dbg.location(675,70);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "20"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(675,81);
                        // com/joestelmach/natty/generated/DateParser.g:675:81: ^( MINUTES_OF_HOUR INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(675,83);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_1);

                        dbg.location(675,99);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(675,109);
                        // com/joestelmach/natty/generated/DateParser.g:675:109: ^( SECONDS_OF_MINUTE INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(675,111);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SECONDS_OF_MINUTE, "SECONDS_OF_MINUTE"), root_1);

                        dbg.location(675,129);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // com/joestelmach/natty/generated/DateParser.g:676:5: ( A WHITE_SPACE )? MINUIT
                    {
                    dbg.location(676,5);
                    // com/joestelmach/natty/generated/DateParser.g:676:5: ( A WHITE_SPACE )?
                    int alt143=2;
                    try { dbg.enterSubRule(143);
                    try { dbg.enterDecision(143);

                    switch ( input.LA(1) ) {
                        case A:
                            {
                            alt143=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(143);}

                    switch (alt143) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:676:6: A WHITE_SPACE
                            {
                            dbg.location(676,6);
                            A482=(Token)match(input,A,FOLLOW_A_in_named_time7292); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_A.add(A482);

                            dbg.location(676,8);
                            WHITE_SPACE483=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7294); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE483);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(143);}

                    dbg.location(676,22);
                    MINUIT484=(Token)match(input,MINUIT,FOLLOW_MINUIT_in_named_time7298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUIT.add(MINUIT484);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:52: -> ^( HOURS_OF_DAY INT[\"0\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] )
                    {
                        dbg.location(676,55);
                        // com/joestelmach/natty/generated/DateParser.g:676:55: ^( HOURS_OF_DAY INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(676,57);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HOURS_OF_DAY, "HOURS_OF_DAY"), root_1);

                        dbg.location(676,70);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(676,80);
                        // com/joestelmach/natty/generated/DateParser.g:676:80: ^( MINUTES_OF_HOUR INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(676,82);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_1);

                        dbg.location(676,98);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(676,108);
                        // com/joestelmach/natty/generated/DateParser.g:676:108: ^( SECONDS_OF_MINUTE INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(676,110);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SECONDS_OF_MINUTE, "SECONDS_OF_MINUTE"), root_1);

                        dbg.location(676,128);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // com/joestelmach/natty/generated/DateParser.g:677:5: ( DANS WHITE_SPACE LA WHITE_SPACE )? SOIR
                    {
                    dbg.location(677,5);
                    // com/joestelmach/natty/generated/DateParser.g:677:5: ( DANS WHITE_SPACE LA WHITE_SPACE )?
                    int alt144=2;
                    try { dbg.enterSubRule(144);
                    try { dbg.enterDecision(144);

                    switch ( input.LA(1) ) {
                        case DANS:
                            {
                            alt144=1;
                            }
                            break;
                    }

                    } finally {dbg.exitDecision(144);}

                    switch (alt144) {
                        case 1 :
                            dbg.enterAlt(1);

                            // com/joestelmach/natty/generated/DateParser.g:677:6: DANS WHITE_SPACE LA WHITE_SPACE
                            {
                            dbg.location(677,6);
                            DANS485=(Token)match(input,DANS,FOLLOW_DANS_in_named_time7351); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DANS.add(DANS485);

                            dbg.location(677,11);
                            WHITE_SPACE486=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7353); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE486);

                            dbg.location(677,23);
                            LA487=(Token)match(input,LA,FOLLOW_LA_in_named_time7355); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LA.add(LA487);

                            dbg.location(677,26);
                            WHITE_SPACE488=(Token)match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_named_time7357); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHITE_SPACE.add(WHITE_SPACE488);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(144);}

                    dbg.location(677,40);
                    SOIR489=(Token)match(input,SOIR,FOLLOW_SOIR_in_named_time7361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SOIR.add(SOIR489);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 677:52: -> ^( HOURS_OF_DAY INT[\"19\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] )
                    {
                        dbg.location(677,55);
                        // com/joestelmach/natty/generated/DateParser.g:677:55: ^( HOURS_OF_DAY INT[\"19\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(677,57);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(HOURS_OF_DAY, "HOURS_OF_DAY"), root_1);

                        dbg.location(677,70);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "19"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(677,81);
                        // com/joestelmach/natty/generated/DateParser.g:677:81: ^( MINUTES_OF_HOUR INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(677,83);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MINUTES_OF_HOUR, "MINUTES_OF_HOUR"), root_1);

                        dbg.location(677,99);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(677,109);
                        // com/joestelmach/natty/generated/DateParser.g:677:109: ^( SECONDS_OF_MINUTE INT[\"0\"] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        dbg.location(677,111);
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SECONDS_OF_MINUTE, "SECONDS_OF_MINUTE"), root_1);

                        dbg.location(677,129);
                        adaptor.addChild(root_1, (Object)adaptor.create(INT, "0"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(678, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "named_time");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "named_time"

    // $ANTLR start synpred1_DateParser
    public final void synpred1_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:53:12: ( recurrence )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:53:13: recurrence
        {
        dbg.location(53,13);
        pushFollow(FOLLOW_recurrence_in_synpred1_DateParser185);
        recurrence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_DateParser

    // $ANTLR start synpred2_DateParser
    public final void synpred2_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:67:7: ( date )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:67:8: date
        {
        dbg.location(67,8);
        pushFollow(FOLLOW_date_in_synpred2_DateParser277);
        date();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_DateParser

    // $ANTLR start synpred3_DateParser
    public final void synpred3_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:99:5: ( relaxed_month WHITE_SPACE ( relaxed_year | SUIVANT ) )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:99:6: relaxed_month WHITE_SPACE ( relaxed_year | SUIVANT )
        {
        dbg.location(99,6);
        pushFollow(FOLLOW_relaxed_month_in_synpred3_DateParser532);
        relaxed_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(99,20);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred3_DateParser534); if (state.failed) return ;
        dbg.location(99,32);
        // com/joestelmach/natty/generated/DateParser.g:99:32: ( relaxed_year | SUIVANT )
        int alt146=2;
        try { dbg.enterSubRule(146);
        try { dbg.enterDecision(146);

        switch ( input.LA(1) ) {
        case INT_00:
        case INT_01:
        case INT_02:
        case INT_03:
        case INT_04:
        case INT_05:
        case INT_06:
        case INT_07:
        case INT_08:
        case INT_09:
        case INT_10:
        case INT_11:
        case INT_12:
        case INT_13:
        case INT_14:
        case INT_15:
        case INT_16:
        case INT_17:
        case INT_18:
        case INT_19:
        case INT_20:
        case INT_21:
        case INT_22:
        case INT_23:
        case INT_24:
        case INT_25:
        case INT_26:
        case INT_27:
        case INT_28:
        case INT_29:
        case INT_30:
        case INT_31:
        case INT_32:
        case INT_33:
        case INT_34:
        case INT_35:
        case INT_36:
        case INT_37:
        case INT_38:
        case INT_39:
        case INT_40:
        case INT_41:
        case INT_42:
        case INT_43:
        case INT_44:
        case INT_45:
        case INT_46:
        case INT_47:
        case INT_48:
        case INT_49:
        case INT_50:
        case INT_51:
        case INT_52:
        case INT_53:
        case INT_54:
        case INT_55:
        case INT_56:
        case INT_57:
        case INT_58:
        case INT_59:
        case INT_60:
        case INT_61:
        case INT_62:
        case INT_63:
        case INT_64:
        case INT_65:
        case INT_66:
        case INT_67:
        case INT_68:
        case INT_69:
        case INT_70:
        case INT_71:
        case INT_72:
        case INT_73:
        case INT_74:
        case INT_75:
        case INT_76:
        case INT_77:
        case INT_78:
        case INT_79:
        case INT_80:
        case INT_81:
        case INT_82:
        case INT_83:
        case INT_84:
        case INT_85:
        case INT_86:
        case INT_87:
        case INT_88:
        case INT_89:
        case INT_90:
        case INT_91:
        case INT_92:
        case INT_93:
        case INT_94:
        case INT_95:
        case INT_96:
        case INT_97:
        case INT_98:
        case INT_99:
            {
            alt146=1;
            }
            break;
        case SUIVANT:
            {
            alt146=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 146, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }

        } finally {dbg.exitDecision(146);}

        switch (alt146) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:99:33: relaxed_year
                {
                dbg.location(99,33);
                pushFollow(FOLLOW_relaxed_year_in_synpred3_DateParser537);
                relaxed_year();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // com/joestelmach/natty/generated/DateParser.g:99:48: SUIVANT
                {
                dbg.location(99,48);
                match(input,SUIVANT,FOLLOW_SUIVANT_in_synpred3_DateParser541); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(146);}


        }
    }
    // $ANTLR end synpred3_DateParser

    // $ANTLR start synpred4_DateParser
    public final void synpred4_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:121:5: ( date ( conjunction | interval_conjunction ) global_date_prefix )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:121:6: date ( conjunction | interval_conjunction ) global_date_prefix
        {
        dbg.location(121,6);
        pushFollow(FOLLOW_date_in_synpred4_DateParser953);
        date();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(121,11);
        // com/joestelmach/natty/generated/DateParser.g:121:11: ( conjunction | interval_conjunction )
        int alt147=2;
        try { dbg.enterSubRule(147);
        try { dbg.enterDecision(147);

        switch ( input.LA(1) ) {
        case COMMA:
            {
            switch ( input.LA(2) ) {
            case WHITE_SPACE:
                {
                switch ( input.LA(3) ) {
                case OU:
                case ET:
                    {
                    alt147=1;
                    }
                    break;
                case DASH:
                case AU:
                    {
                    alt147=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 1, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        case WHITE_SPACE:
            {
            switch ( input.LA(2) ) {
            case OU:
            case ET:
                {
                alt147=1;
                }
                break;
            case DASH:
            case AU:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 2, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 147, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }

        } finally {dbg.exitDecision(147);}

        switch (alt147) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:121:12: conjunction
                {
                dbg.location(121,12);
                pushFollow(FOLLOW_conjunction_in_synpred4_DateParser956);
                conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // com/joestelmach/natty/generated/DateParser.g:121:26: interval_conjunction
                {
                dbg.location(121,26);
                pushFollow(FOLLOW_interval_conjunction_in_synpred4_DateParser960);
                interval_conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(147);}

        dbg.location(121,48);
        pushFollow(FOLLOW_global_date_prefix_in_synpred4_DateParser963);
        global_date_prefix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_DateParser

    // $ANTLR start synpred5_DateParser
    public final void synpred5_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:126:5: ( alternative_day_of_week_list )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:126:6: alternative_day_of_week_list
        {
        dbg.location(126,6);
        pushFollow(FOLLOW_alternative_day_of_week_list_in_synpred5_DateParser1048);
        alternative_day_of_week_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_DateParser

    // $ANTLR start synpred6_DateParser
    public final void synpred6_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:130:5: ( alternative_day_of_month_list )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:130:6: alternative_day_of_month_list
        {
        dbg.location(130,6);
        pushFollow(FOLLOW_alternative_day_of_month_list_in_synpred6_DateParser1079);
        alternative_day_of_month_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_DateParser

    // $ANTLR start synpred7_DateParser
    public final void synpred7_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:134:5: ( ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:134:6: ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction
        {
        dbg.location(134,6);
        // com/joestelmach/natty/generated/DateParser.g:134:6: ( CE WHITE_SPACE )?
        int alt148=2;
        try { dbg.enterSubRule(148);
        try { dbg.enterDecision(148);

        switch ( input.LA(1) ) {
            case CE:
                {
                alt148=1;
                }
                break;
        }

        } finally {dbg.exitDecision(148);}

        switch (alt148) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:134:7: CE WHITE_SPACE
                {
                dbg.location(134,7);
                match(input,CE,FOLLOW_CE_in_synpred7_DateParser1111); if (state.failed) return ;
                dbg.location(134,10);
                match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred7_DateParser1113); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(148);}

        dbg.location(134,24);
        pushFollow(FOLLOW_day_of_week_in_synpred7_DateParser1117);
        day_of_week();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(134,36);
        // com/joestelmach/natty/generated/DateParser.g:134:36: ( conjunction | interval_conjunction )
        int alt149=2;
        try { dbg.enterSubRule(149);
        try { dbg.enterDecision(149);

        switch ( input.LA(1) ) {
        case COMMA:
            {
            switch ( input.LA(2) ) {
            case WHITE_SPACE:
                {
                switch ( input.LA(3) ) {
                case OU:
                case ET:
                    {
                    alt149=1;
                    }
                    break;
                case DASH:
                case AU:
                    {
                    alt149=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 1, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        case WHITE_SPACE:
            {
            switch ( input.LA(2) ) {
            case OU:
            case ET:
                {
                alt149=1;
                }
                break;
            case DASH:
            case AU:
                {
                alt149=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 2, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 149, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }

        } finally {dbg.exitDecision(149);}

        switch (alt149) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:134:37: conjunction
                {
                dbg.location(134,37);
                pushFollow(FOLLOW_conjunction_in_synpred7_DateParser1120);
                conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // com/joestelmach/natty/generated/DateParser.g:134:51: interval_conjunction
                {
                dbg.location(134,51);
                pushFollow(FOLLOW_interval_conjunction_in_synpred7_DateParser1124);
                interval_conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(149);}

        dbg.location(134,73);
        pushFollow(FOLLOW_alternative_direction_in_synpred7_DateParser1127);
        alternative_direction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_DateParser

    // $ANTLR start synpred8_DateParser
    public final void synpred8_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:142:5: ( explicit_day_of_year_part ( conjunction | interval_conjunction ) explicit_day_of_year_part WHITE_SPACE relaxed_year )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:142:6: explicit_day_of_year_part ( conjunction | interval_conjunction ) explicit_day_of_year_part WHITE_SPACE relaxed_year
        {
        dbg.location(142,6);
        pushFollow(FOLLOW_explicit_day_of_year_part_in_synpred8_DateParser1270);
        explicit_day_of_year_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(142,32);
        // com/joestelmach/natty/generated/DateParser.g:142:32: ( conjunction | interval_conjunction )
        int alt150=2;
        try { dbg.enterSubRule(150);
        try { dbg.enterDecision(150);

        switch ( input.LA(1) ) {
        case COMMA:
            {
            switch ( input.LA(2) ) {
            case WHITE_SPACE:
                {
                switch ( input.LA(3) ) {
                case OU:
                case ET:
                    {
                    alt150=1;
                    }
                    break;
                case DASH:
                case AU:
                    {
                    alt150=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 150, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 1, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        case WHITE_SPACE:
            {
            switch ( input.LA(2) ) {
            case OU:
            case ET:
                {
                alt150=1;
                }
                break;
            case DASH:
            case AU:
                {
                alt150=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 2, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 150, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }

        } finally {dbg.exitDecision(150);}

        switch (alt150) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:142:33: conjunction
                {
                dbg.location(142,33);
                pushFollow(FOLLOW_conjunction_in_synpred8_DateParser1273);
                conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // com/joestelmach/natty/generated/DateParser.g:142:47: interval_conjunction
                {
                dbg.location(142,47);
                pushFollow(FOLLOW_interval_conjunction_in_synpred8_DateParser1277);
                interval_conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(150);}

        dbg.location(142,69);
        pushFollow(FOLLOW_explicit_day_of_year_part_in_synpred8_DateParser1280);
        explicit_day_of_year_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(142,95);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred8_DateParser1282); if (state.failed) return ;
        dbg.location(142,107);
        pushFollow(FOLLOW_relaxed_year_in_synpred8_DateParser1284);
        relaxed_year();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_DateParser

    // $ANTLR start synpred9_DateParser
    public final void synpred9_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:150:5: ( PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:150:6: PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE
        {
        dbg.location(150,6);
        match(input,PENDANT,FOLLOW_PENDANT_in_synpred9_DateParser1415); if (state.failed) return ;
        dbg.location(150,14);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred9_DateParser1417); if (state.failed) return ;
        dbg.location(150,26);
        pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_synpred9_DateParser1419);
        spelled_or_int_optional_prefix();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(150,57);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred9_DateParser1421); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_DateParser

    // $ANTLR start synpred10_DateParser
    public final void synpred10_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:163:5: ( spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:163:6: spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE
        {
        dbg.location(163,6);
        pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_synpred10_DateParser1641);
        spelled_or_int_optional_prefix();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(163,37);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred10_DateParser1643); if (state.failed) return ;
        dbg.location(163,49);
        if ( input.LA(1)==PASSE||input.LA(1)==DERNIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }

        dbg.location(163,67);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred10_DateParser1653); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_DateParser

    // $ANTLR start synpred11_DateParser
    public final void synpred11_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:176:5: ( ( relaxed_day_of_week )? relaxed_day_of_month interval_conjunction relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:176:6: ( relaxed_day_of_week )? relaxed_day_of_month interval_conjunction relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )?
        {
        dbg.location(176,6);
        // com/joestelmach/natty/generated/DateParser.g:176:6: ( relaxed_day_of_week )?
        int alt151=2;
        try { dbg.enterSubRule(151);
        try { dbg.enterDecision(151);

        try {
            isCyclicDecision = true;
            alt151 = dfa151.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(151);}

        switch (alt151) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:176:6: relaxed_day_of_week
                {
                dbg.location(176,6);
                pushFollow(FOLLOW_relaxed_day_of_week_in_synpred11_DateParser1874);
                relaxed_day_of_week();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(151);}

        dbg.location(176,27);
        pushFollow(FOLLOW_relaxed_day_of_month_in_synpred11_DateParser1877);
        relaxed_day_of_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(176,48);
        pushFollow(FOLLOW_interval_conjunction_in_synpred11_DateParser1879);
        interval_conjunction();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(176,69);
        pushFollow(FOLLOW_relaxed_day_of_month_in_synpred11_DateParser1881);
        relaxed_day_of_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(176,90);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred11_DateParser1883); if (state.failed) return ;
        dbg.location(176,102);
        pushFollow(FOLLOW_relaxed_month_in_synpred11_DateParser1885);
        relaxed_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(176,116);
        // com/joestelmach/natty/generated/DateParser.g:176:116: ( WHITE_SPACE relaxed_year )?
        int alt152=2;
        try { dbg.enterSubRule(152);
        try { dbg.enterDecision(152);

        switch ( input.LA(1) ) {
            case WHITE_SPACE:
                {
                alt152=1;
                }
                break;
        }

        } finally {dbg.exitDecision(152);}

        switch (alt152) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:176:117: WHITE_SPACE relaxed_year
                {
                dbg.location(176,117);
                match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred11_DateParser1888); if (state.failed) return ;
                dbg.location(176,129);
                pushFollow(FOLLOW_relaxed_year_in_synpred11_DateParser1890);
                relaxed_year();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(152);}


        }
    }
    // $ANTLR end synpred11_DateParser

    // $ANTLR start synpred12_DateParser
    public final void synpred12_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:184:5: ( date_time ( conjunction | interval_conjunction ) date_time )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:184:6: date_time ( conjunction | interval_conjunction ) date_time
        {
        dbg.location(184,6);
        pushFollow(FOLLOW_date_time_in_synpred12_DateParser2010);
        date_time();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(184,16);
        // com/joestelmach/natty/generated/DateParser.g:184:16: ( conjunction | interval_conjunction )
        int alt153=2;
        try { dbg.enterSubRule(153);
        try { dbg.enterDecision(153);

        switch ( input.LA(1) ) {
        case COMMA:
            {
            switch ( input.LA(2) ) {
            case WHITE_SPACE:
                {
                switch ( input.LA(3) ) {
                case OU:
                case ET:
                    {
                    alt153=1;
                    }
                    break;
                case DASH:
                case AU:
                    {
                    alt153=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 1, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        case WHITE_SPACE:
            {
            switch ( input.LA(2) ) {
            case OU:
            case ET:
                {
                alt153=1;
                }
                break;
            case DASH:
            case AU:
                {
                alt153=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 2, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 153, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }

        } finally {dbg.exitDecision(153);}

        switch (alt153) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:184:17: conjunction
                {
                dbg.location(184,17);
                pushFollow(FOLLOW_conjunction_in_synpred12_DateParser2013);
                conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // com/joestelmach/natty/generated/DateParser.g:184:31: interval_conjunction
                {
                dbg.location(184,31);
                pushFollow(FOLLOW_interval_conjunction_in_synpred12_DateParser2017);
                interval_conjunction();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(153);}

        dbg.location(184,53);
        pushFollow(FOLLOW_date_time_in_synpred12_DateParser2020);
        date_time();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_DateParser

    // $ANTLR start synpred13_DateParser
    public final void synpred13_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:239:5: ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:239:6: explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month
        {
        dbg.location(239,6);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred13_DateParser2950);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(239,33);
        pushFollow(FOLLOW_conjunction_in_synpred13_DateParser2952);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(239,45);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred13_DateParser2954);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(239,72);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred13_DateParser2956); if (state.failed) return ;
        dbg.location(239,84);
        pushFollow(FOLLOW_explicit_relative_month_in_synpred13_DateParser2958);
        explicit_relative_month();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_DateParser

    // $ANTLR start synpred14_DateParser
    public final void synpred14_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:245:5: ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:245:6: explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix
        {
        dbg.location(245,6);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred14_DateParser3061);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(245,33);
        pushFollow(FOLLOW_conjunction_in_synpred14_DateParser3063);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(245,45);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred14_DateParser3065);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(245,72);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred14_DateParser3067); if (state.failed) return ;
        dbg.location(245,84);
        pushFollow(FOLLOW_explicit_relative_month_in_synpred14_DateParser3069);
        explicit_relative_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(245,108);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred14_DateParser3071); if (state.failed) return ;
        dbg.location(245,120);
        pushFollow(FOLLOW_prefix_in_synpred14_DateParser3073);
        prefix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_DateParser

    // $ANTLR start synpred15_DateParser
    public final void synpred15_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:306:3: ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:306:4: ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year
        {
        dbg.location(306,4);
        // com/joestelmach/natty/generated/DateParser.g:306:4: ( relaxed_day_of_week )?
        int alt154=2;
        try { dbg.enterSubRule(154);
        try { dbg.enterDecision(154);

        try {
            isCyclicDecision = true;
            alt154 = dfa154.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(154);}

        switch (alt154) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:306:4: relaxed_day_of_week
                {
                dbg.location(306,4);
                pushFollow(FOLLOW_relaxed_day_of_week_in_synpred15_DateParser3666);
                relaxed_day_of_week();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(154);}

        dbg.location(306,25);
        // com/joestelmach/natty/generated/DateParser.g:306:25: ( relaxed_day_of_month_prefix )?
        int alt155=2;
        try { dbg.enterSubRule(155);
        try { dbg.enterDecision(155);

        switch ( input.LA(1) ) {
            case LE:
            case COMMA:
                {
                alt155=1;
                }
                break;
        }

        } finally {dbg.exitDecision(155);}

        switch (alt155) {
            case 1 :
                dbg.enterAlt(1);

                // com/joestelmach/natty/generated/DateParser.g:306:25: relaxed_day_of_month_prefix
                {
                dbg.location(306,25);
                pushFollow(FOLLOW_relaxed_day_of_month_prefix_in_synpred15_DateParser3669);
                relaxed_day_of_month_prefix();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(155);}

        dbg.location(306,54);
        pushFollow(FOLLOW_relaxed_day_of_month_in_synpred15_DateParser3672);
        relaxed_day_of_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(307,11);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred15_DateParser3685); if (state.failed) return ;
        dbg.location(307,23);
        pushFollow(FOLLOW_relaxed_month_in_synpred15_DateParser3687);
        relaxed_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(307,37);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred15_DateParser3689); if (state.failed) return ;
        dbg.location(307,49);
        pushFollow(FOLLOW_relaxed_year_in_synpred15_DateParser3691);
        relaxed_year();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_DateParser

    // $ANTLR start synpred16_DateParser
    public final void synpred16_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:423:5: ( explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:423:6: explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix
        {
        dbg.location(423,6);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred16_DateParser4626);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(423,33);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred16_DateParser4628); if (state.failed) return ;
        dbg.location(423,45);
        pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_synpred16_DateParser4630);
        spelled_or_int_optional_prefix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_DateParser

    // $ANTLR start synpred17_DateParser
    public final void synpred17_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:429:5: ( explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:429:6: explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix
        {
        dbg.location(429,6);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred17_DateParser4696);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(429,33);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred17_DateParser4698); if (state.failed) return ;
        dbg.location(429,45);
        pushFollow(FOLLOW_explicit_relative_month_in_synpred17_DateParser4700);
        explicit_relative_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(429,69);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred17_DateParser4702); if (state.failed) return ;
        dbg.location(429,81);
        pushFollow(FOLLOW_prefix_in_synpred17_DateParser4704);
        prefix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_DateParser

    // $ANTLR start synpred18_DateParser
    public final void synpred18_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:436:5: ( explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:436:6: explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix
        {
        dbg.location(436,6);
        pushFollow(FOLLOW_explicit_day_of_week_part_in_synpred18_DateParser4776);
        explicit_day_of_week_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(436,32);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred18_DateParser4778); if (state.failed) return ;
        dbg.location(436,44);
        match(input,SEMAINE,FOLLOW_SEMAINE_in_synpred18_DateParser4780); if (state.failed) return ;
        dbg.location(436,52);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred18_DateParser4782); if (state.failed) return ;
        dbg.location(436,64);
        pushFollow(FOLLOW_prefix_in_synpred18_DateParser4784);
        prefix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_DateParser

    // $ANTLR start synpred19_DateParser
    public final void synpred19_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:443:5: ( explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:443:6: explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix
        {
        dbg.location(443,6);
        pushFollow(FOLLOW_explicit_day_of_week_part_in_synpred19_DateParser4860);
        explicit_day_of_week_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(443,32);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred19_DateParser4862); if (state.failed) return ;
        dbg.location(443,44);
        pushFollow(FOLLOW_spelled_or_int_optional_prefix_in_synpred19_DateParser4864);
        spelled_or_int_optional_prefix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_DateParser

    // $ANTLR start synpred20_DateParser
    public final void synpred20_DateParser_fragment() throws RecognitionException {   
        // com/joestelmach/natty/generated/DateParser.g:451:5: ( explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )
        dbg.enterAlt(1);

        // com/joestelmach/natty/generated/DateParser.g:451:6: explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year
        {
        dbg.location(451,6);
        pushFollow(FOLLOW_explicit_day_of_month_part_in_synpred20_DateParser4952);
        explicit_day_of_month_part();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(451,33);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred20_DateParser4954); if (state.failed) return ;
        dbg.location(451,45);
        pushFollow(FOLLOW_relaxed_month_in_synpred20_DateParser4956);
        relaxed_month();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(451,59);
        match(input,WHITE_SPACE,FOLLOW_WHITE_SPACE_in_synpred20_DateParser4958); if (state.failed) return ;
        dbg.location(451,71);
        pushFollow(FOLLOW_relaxed_year_in_synpred20_DateParser4960);
        relaxed_year();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_DateParser

    // Delegated rules
    public DateParser_NumericRules.spelled_one_to_thirty_one_return spelled_one_to_thirty_one() throws RecognitionException { return gNumericRules.spelled_one_to_thirty_one(); }
    public DateParser_NumericRules.int_32_to_59_return int_32_to_59() throws RecognitionException { return gNumericRules.int_32_to_59(); }
    public DateParser_NumericRules.int_1_to_5_return int_1_to_5() throws RecognitionException { return gNumericRules.int_1_to_5(); }
    public DateParser_NumericRules.int_00_to_99_mandatory_prefix_return int_00_to_99_mandatory_prefix() throws RecognitionException { return gNumericRules.int_00_to_99_mandatory_prefix(); }
    public DateParser_NumericRules.spelled_or_int_optional_prefix_return spelled_or_int_optional_prefix() throws RecognitionException { return gNumericRules.spelled_or_int_optional_prefix(); }
    public DateParser_NumericRules.int_00_to_59_mandatory_prefix_return int_00_to_59_mandatory_prefix() throws RecognitionException { return gNumericRules.int_00_to_59_mandatory_prefix(); }
    public DateParser_NumericRules.int_1_to_9_return int_1_to_9() throws RecognitionException { return gNumericRules.int_1_to_9(); }
    public DateParser_NumericRules.int_24_to_31_return int_24_to_31() throws RecognitionException { return gNumericRules.int_24_to_31(); }
    public DateParser_NumericRules.int_60_to_99_return int_60_to_99() throws RecognitionException { return gNumericRules.int_60_to_99(); }
    public DateParser_NumericRules.int_01_to_12_return int_01_to_12() throws RecognitionException { return gNumericRules.int_01_to_12(); }
    public DateParser_NumericRules.int_01_to_12_optional_prefix_return int_01_to_12_optional_prefix() throws RecognitionException { return gNumericRules.int_01_to_12_optional_prefix(); }
    public DateParser_NumericRules.int_00_to_23_optional_prefix_return int_00_to_23_optional_prefix() throws RecognitionException { return gNumericRules.int_00_to_23_optional_prefix(); }
    public DateParser_NumericRules.int_01_to_31_optional_prefix_return int_01_to_31_optional_prefix() throws RecognitionException { return gNumericRules.int_01_to_31_optional_prefix(); }
    public DateParser_NumericRules.int_four_digits_return int_four_digits() throws RecognitionException { return gNumericRules.int_four_digits(); }
    public DateParser_NumericRules.spelled_or_int_01_to_31_optional_prefix_return spelled_or_int_01_to_31_optional_prefix() throws RecognitionException { return gNumericRules.spelled_or_int_01_to_31_optional_prefix(); }
    public DateParser_NumericRules.int_13_to_23_return int_13_to_23() throws RecognitionException { return gNumericRules.int_13_to_23(); }

    public final boolean synpred12_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_DateParser() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_DateParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA154 dfa154 = new DFA154(this);
    static final String DFA6_eotS =
        "\u009b\uffff";
    static final String DFA6_eofS =
        "\145\uffff\1\1\35\uffff\1\1\27\uffff";
    static final String DFA6_minS =
        "\1\5\1\uffff\21\76\3\45\3\30\1\45\2\76\1\uffff\1\63\3\5\1\u00bb"+
        "\3\76\1\5\1\66\6\76\1\45\2\76\1\5\1\66\1\45\6\76\2\5\20\76\3\45"+
        "\22\76\1\u00b5\2\76\1\u00b5\2\76\2\5\1\u00bb\3\76\1\5\1\66\1\45"+
        "\10\76\1\5\1\66\1\45\6\76\1\5\2\u00b5\1\5\14\76\1\u00b5\2\76\1\u00b5"+
        "\3\76\2\u00b5\2\76";
    static final String DFA6_maxS =
        "\1\u017b\1\uffff\21\76\2\u00bd\1\76\6\u00b4\1\uffff\1\u00c7\3\u017b"+
        "\1\u00bd\3\76\1\u017b\1\u00bd\6\76\1\u00b5\2\76\1\u017b\1\66\1\u00b5"+
        "\6\76\2\u017b\20\76\2\u00bd\1\76\6\u00b4\14\76\1\u00b5\2\76\1\u00b5"+
        "\1\76\1\104\2\u017b\1\u00bd\3\76\1\u017b\1\u00bd\1\u00b5\10\76\1"+
        "\u017b\1\66\1\u00b5\6\76\1\u017b\2\u00b5\1\u00cb\14\76\1\u00b5\2"+
        "\76\1\u00b5\3\76\2\u00b5\2\76";
    static final String DFA6_acceptS =
        "\1\uffff\1\1\32\uffff\1\2\176\uffff";
    static final String DFA6_specialS =
        "\u009b\uffff}>";
    static final String[] DFA6_transitionS = {
            "\23\1\1\34\1\uffff\1\34\1\1\4\uffff\5\1\4\uffff\1\1\1\uffff"+
            "\6\1\1\uffff\1\2\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff"+
            "\1\1\2\uffff\1\1\11\26\1\1\11\27\3\26\13\30\10\31\34\32\50\33"+
            "\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\23\1\15\1\16\1\17"+
            "\1\20\1\21\1\22\1\24\1\25\1\4\4\1\u00af\uffff\1\34",
            "",
            "\1\35",
            "\1\36",
            "\1\37",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\41\30\uffff\1\40\174\uffff\1\44\1\42\1\43",
            "\1\46\20\uffff\1\55\7\uffff\1\45\167\uffff\1\56\1\57\1\52\1"+
            "\53\1\54\1\47\1\50\1\51",
            "\1\61\20\uffff\1\62\7\uffff\1\60",
            "\2\1\13\uffff\1\1\30\uffff\1\71\4\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\11\63\1\uffff\11\64\3\63\13\65\10\66\34\67\50\70",
            "\2\1\13\uffff\1\1\30\uffff\1\71\4\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\11\63\1\uffff\11\64\3\63\13\65\10\66\34\67\50\70",
            "\2\1\13\uffff\1\1\30\uffff\1\71\4\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\11\63\1\uffff\11\64\3\63\13\65\10\66\34\67\50\70",
            "\1\1\30\uffff\1\36\6\uffff\1\1\2\uffff\11\63\1\uffff\11\64"+
            "\3\63\13\65\10\66\34\67\50\70",
            "\1\72\11\uffff\11\63\1\uffff\11\64\3\63\13\65\10\66\34\67\50"+
            "\70",
            "\1\72\11\uffff\11\63\1\uffff\11\64\3\63\13\65\10\66\34\67\50"+
            "\70",
            "",
            "\2\1\23\uffff\11\116\1\uffff\11\117\3\116\13\120\10\121\34"+
            "\122\50\123\1\73\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
            "\1\113\1\105\1\106\1\107\1\110\1\111\1\112\1\114\1\115\1\74",
            "\23\1\1\34\1\uffff\1\34\4\1\31\uffff\2\1\15\uffff\12\1\1\uffff"+
            "\166\1\u00b3\uffff\1\34",
            "\23\1\1\34\1\uffff\1\34\4\1\31\uffff\2\1\15\uffff\12\1\1\uffff"+
            "\166\1\u00b3\uffff\1\34",
            "\23\1\1\34\1\uffff\1\34\4\1\31\uffff\2\1\15\uffff\12\1\1\uffff"+
            "\151\1\1\124\1\125\1\126\12\1\u00b3\uffff\1\34",
            "\1\44\1\42\1\43",
            "\1\36",
            "\1\36",
            "\1\36",
            "\23\1\1\34\1\uffff\1\34\4\1\27\uffff\1\127\1\uffff\2\1\15\uffff"+
            "\12\1\1\uffff\144\1\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
            "\1\137\12\1\u00b3\uffff\1\34",
            "\1\55\177\uffff\1\56\1\57\1\52\1\53\1\54\1\47\1\50\1\51",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\140\u008f\uffff\1\141",
            "\1\36",
            "\1\36",
            "\23\1\1\34\1\uffff\1\34\4\1\27\uffff\1\142\1\uffff\2\1\15\uffff"+
            "\12\1\1\uffff\166\1\u00b3\uffff\1\34",
            "\1\62",
            "\1\143\u008f\uffff\1\144",
            "\1\72",
            "\1\72",
            "\1\72",
            "\1\72",
            "\1\72",
            "\1\72",
            "\23\1\1\145\1\uffff\1\34\4\1\31\uffff\2\1\15\uffff\12\1\1\uffff"+
            "\166\1\u00b3\uffff\1\34",
            "\23\1\1\34\1\uffff\1\34\4\1\u015c\uffff\1\34",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\150\30\uffff\1\147\174\uffff\1\153\1\152\1\151",
            "\1\155\20\uffff\1\156\7\uffff\1\154\167\uffff\1\166\1\165\1"+
            "\164\1\163\1\160\1\157\1\162\1\161",
            "\1\170\20\uffff\1\171\7\uffff\1\167",
            "\1\146\11\uffff\11\172\1\uffff\11\173\3\172\13\174\10\175\34"+
            "\176\50\177",
            "\1\146\11\uffff\11\172\1\uffff\11\173\3\172\13\174\10\175\34"+
            "\176\50\177",
            "\1\146\11\uffff\11\172\1\uffff\11\173\3\172\13\174\10\175\34"+
            "\176\50\177",
            "\1\146\11\uffff\11\172\1\uffff\11\173\3\172\13\174\10\175\34"+
            "\176\50\177",
            "\1\146\11\uffff\11\172\1\uffff\11\173\3\172\13\174\10\175\34"+
            "\176\50\177",
            "\1\146\11\uffff\11\172\1\uffff\11\173\3\172\13\174\10\175\34"+
            "\176\50\177",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\u0081",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\u0080",
            "\1\141",
            "\1\36",
            "\1\u0082",
            "\1\144",
            "\1\36",
            "\1\u0083\5\uffff\1\1",
            "\23\1\1\34\1\uffff\1\34\4\1\u015c\uffff\1\34",
            "\23\1\1\34\1\uffff\1\34\4\1\u009c\uffff\1\u0084\1\u0085\1\u0086"+
            "\u00bd\uffff\1\34",
            "\1\153\1\152\1\151",
            "\1\146",
            "\1\146",
            "\1\146",
            "\23\1\1\34\1\uffff\1\34\4\1\27\uffff\1\u0087\177\uffff\1\u0088"+
            "\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\u00bd"+
            "\uffff\1\34",
            "\1\156\177\uffff\1\166\1\165\1\164\1\163\1\160\1\157\1\162"+
            "\1\161",
            "\1\u0090\u008f\uffff\1\u0091",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\23\1\1\34\1\uffff\1\34\4\1\27\uffff\1\u0092\u0144\uffff\1"+
            "\34",
            "\1\171",
            "\1\u0093\u008f\uffff\1\u0094",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\23\1\1\34\1\uffff\1\34\4\1\31\uffff\2\1\15\uffff\12\1\1\uffff"+
            "\166\1\u00b3\uffff\1\34",
            "\1\u0095",
            "\1\u0096",
            "\23\1\3\uffff\1\1\4\uffff\6\1\2\uffff\2\1\1\34\1\1\6\uffff"+
            "\6\1\2\uffff\5\1\1\34\3\1\1\uffff\1\1\2\uffff\12\1\1\uffff\172"+
            "\1",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\u0097",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\146",
            "\1\u0091",
            "\1\146",
            "\1\u0098",
            "\1\u0094",
            "\1\146",
            "\1\36",
            "\1\36",
            "\1\u0099",
            "\1\u009a",
            "\1\146",
            "\1\146"
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "65:1: date_time : ( ( ( date )=> date ( date_time_separator explicit_time )? | explicit_time ( time_date_separator date )? ) -> ^( DATE_TIME ( date )? ( explicit_time )? ) | relative_time -> ^( DATE_TIME ( relative_time )? ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA5_eotS =
        "\u00b0\uffff";
    static final String DFA5_eofS =
        "\u00b0\uffff";
    static final String DFA5_minS =
        "\1\5\3\uffff\1\76\23\uffff\3\30\3\uffff\1\76\41\uffff\1\76\5\uffff"+
        "\1\63\6\uffff\1\5\1\uffff\1\21\1\54\2\76\124\uffff\1\55\1\56\7\uffff";
    static final String DFA5_maxS =
        "\1\u00cb\3\uffff\1\76\23\uffff\3\u00b4\3\uffff\1\76\41\uffff\1\76"+
        "\5\uffff\1\u00c7\6\uffff\1\u00c7\1\uffff\1\62\1\64\2\76\124\uffff"+
        "\1\101\1\u00c7\7\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\3\1\1\uffff\23\1\3\uffff\3\1\1\uffff\41\1\1\uffff\4\1\1"+
        "\2\1\uffff\6\1\1\uffff\1\1\4\uffff\124\1\2\uffff\7\1";
    static final String DFA5_specialS =
        "\1\6\27\uffff\1\1\1\7\1\3\53\uffff\1\11\6\uffff\1\0\1\uffff\1\5"+
        "\1\10\126\uffff\1\2\1\4\7\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\3\uffff\1\104\4\uffff\1"+
            "\66\1\70\1\71\1\72\1\73\4\uffff\1\100\1\uffff\1\3\5\105\1\uffff"+
            "\1\4\1\46\1\101\2\uffff\1\36\3\uffff\1\67\1\2\1\1\1\50\1\uffff"+
            "\1\102\1\103\1\65\1\uffff\1\47\2\uffff\1\105\11\30\1\105\11"+
            "\31\3\30\13\32\10\33\34\34\50\35\1\5\1\7\1\10\1\11\1\12\1\13"+
            "\1\14\1\15\1\16\1\25\1\17\1\20\1\21\1\22\1\23\1\24\1\26\1\27"+
            "\1\6\1\74\1\75\1\76\1\77",
            "",
            "",
            "",
            "\1\106",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\105\13\uffff\1\116\30\uffff\1\115\4\uffff\1\105\1\uffff"+
            "\1\116\2\uffff\11\107\1\uffff\11\110\3\107\13\111\10\112\34"+
            "\113\50\114",
            "\2\105\13\uffff\1\116\30\uffff\1\115\4\uffff\1\105\1\uffff"+
            "\1\116\2\uffff\11\107\1\uffff\11\110\3\107\13\111\10\112\34"+
            "\113\50\114",
            "\2\105\13\uffff\1\116\30\uffff\1\115\4\uffff\1\105\1\uffff"+
            "\1\116\2\uffff\11\107\1\uffff\11\110\3\107\13\111\10\112\34"+
            "\113\50\114",
            "",
            "",
            "",
            "\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120",
            "",
            "",
            "",
            "",
            "",
            "\1\121\1\122\23\uffff\11\146\1\uffff\11\147\3\146\13\150\10"+
            "\151\34\152\50\153\1\123\1\125\1\126\1\127\1\130\1\131\1\132"+
            "\1\133\1\134\1\143\1\135\1\136\1\137\1\140\1\141\1\142\1\144"+
            "\1\145\1\124",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1"+
            "\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u008b\1\u008c\1\u008d"+
            "\1\u008e\1\u008f\1\u0090\1\u0091\1\105\2\uffff\1\156\1\155\1"+
            "\157\1\154\31\uffff\1\u008a\1\u0089\15\uffff\1\u009e\11\u0083"+
            "\1\uffff\11\u0084\3\u0083\13\u0085\10\u0086\34\u0087\50\u0088"+
            "\1\160\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\u0080"+
            "\1\172\1\173\1\174\1\175\1\176\1\177\1\u0081\1\u0082\1\161",
            "",
            "\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\21"+
            "\uffff\1\105\2\uffff\5\105\1\uffff\1\105",
            "\1\105\6\uffff\1\u00a6\1\101",
            "\1\u00a7",
            "\1\u00a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\105\17\uffff\1\u00ab\2\uffff\1\u00a9\1\u00aa",
            "\3\105\14\uffff\1\u00ae\2\uffff\1\u00ac\1\u00ad\u0085\uffff"+
            "\1\u00af",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "66:5: ( ( date )=> date ( date_time_separator explicit_time )? | explicit_time ( time_date_separator date )? )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_77==ANNEE) && (synpred2_DateParser())) {s = 108;}

                        else if ( (LA5_77==SEMAINE) && (synpred2_DateParser())) {s = 109;}

                        else if ( (LA5_77==JOUR) && (synpred2_DateParser())) {s = 110;}

                        else if ( (LA5_77==MOIS) && (synpred2_DateParser())) {s = 111;}

                        else if ( (LA5_77==UN) && (synpred2_DateParser())) {s = 112;}

                        else if ( (LA5_77==PREMIER) && (synpred2_DateParser())) {s = 113;}

                        else if ( (LA5_77==DEUX) && (synpred2_DateParser())) {s = 114;}

                        else if ( (LA5_77==TROIS) && (synpred2_DateParser())) {s = 115;}

                        else if ( (LA5_77==QUATRE) && (synpred2_DateParser())) {s = 116;}

                        else if ( (LA5_77==CINQ) && (synpred2_DateParser())) {s = 117;}

                        else if ( (LA5_77==SIX) && (synpred2_DateParser())) {s = 118;}

                        else if ( (LA5_77==SEPT) && (synpred2_DateParser())) {s = 119;}

                        else if ( (LA5_77==HUIT) && (synpred2_DateParser())) {s = 120;}

                        else if ( (LA5_77==NEUF) && (synpred2_DateParser())) {s = 121;}

                        else if ( (LA5_77==ONZE) && (synpred2_DateParser())) {s = 122;}

                        else if ( (LA5_77==DOUZE) && (synpred2_DateParser())) {s = 123;}

                        else if ( (LA5_77==TREIZE) && (synpred2_DateParser())) {s = 124;}

                        else if ( (LA5_77==QUATORZE) && (synpred2_DateParser())) {s = 125;}

                        else if ( (LA5_77==QUINZE) && (synpred2_DateParser())) {s = 126;}

                        else if ( (LA5_77==SEIZE) && (synpred2_DateParser())) {s = 127;}

                        else if ( (LA5_77==DIX) && (synpred2_DateParser())) {s = 128;}

                        else if ( (LA5_77==VINGT) && (synpred2_DateParser())) {s = 129;}

                        else if ( (LA5_77==TRENTE) && (synpred2_DateParser())) {s = 130;}

                        else if ( ((LA5_77>=INT_01 && LA5_77<=INT_09)||(LA5_77>=INT_10 && LA5_77<=INT_12)) && (synpred2_DateParser())) {s = 131;}

                        else if ( ((LA5_77>=INT_1 && LA5_77<=INT_9)) && (synpred2_DateParser())) {s = 132;}

                        else if ( ((LA5_77>=INT_13 && LA5_77<=INT_23)) && (synpred2_DateParser())) {s = 133;}

                        else if ( ((LA5_77>=INT_24 && LA5_77<=INT_31)) && (synpred2_DateParser())) {s = 134;}

                        else if ( ((LA5_77>=INT_32 && LA5_77<=INT_59)) && (synpred2_DateParser())) {s = 135;}

                        else if ( ((LA5_77>=INT_60 && LA5_77<=INT_99)) && (synpred2_DateParser())) {s = 136;}

                        else if ( (LA5_77==DU) && (synpred2_DateParser())) {s = 137;}

                        else if ( (LA5_77==DE) && (synpred2_DateParser())) {s = 138;}

                        else if ( (LA5_77==HEURE) ) {s = 69;}

                        else if ( (LA5_77==DIMANCHE) && (synpred2_DateParser())) {s = 139;}

                        else if ( (LA5_77==LUNDI) && (synpred2_DateParser())) {s = 140;}

                        else if ( (LA5_77==MARDI) && (synpred2_DateParser())) {s = 141;}

                        else if ( (LA5_77==MERCREDI) && (synpred2_DateParser())) {s = 142;}

                        else if ( (LA5_77==JEUDI) && (synpred2_DateParser())) {s = 143;}

                        else if ( (LA5_77==VENDREDI) && (synpred2_DateParser())) {s = 144;}

                        else if ( (LA5_77==SAMEDI) && (synpred2_DateParser())) {s = 145;}

                        else if ( (LA5_77==JANVIER) && (synpred2_DateParser())) {s = 146;}

                        else if ( (LA5_77==FEVRIER) && (synpred2_DateParser())) {s = 147;}

                        else if ( (LA5_77==MARS) && (synpred2_DateParser())) {s = 148;}

                        else if ( (LA5_77==AVRIL) && (synpred2_DateParser())) {s = 149;}

                        else if ( (LA5_77==MAI) && (synpred2_DateParser())) {s = 150;}

                        else if ( (LA5_77==JUIN) && (synpred2_DateParser())) {s = 151;}

                        else if ( (LA5_77==JUILLET) && (synpred2_DateParser())) {s = 152;}

                        else if ( (LA5_77==AOUT) && (synpred2_DateParser())) {s = 153;}

                        else if ( (LA5_77==SEPTEMBRE) && (synpred2_DateParser())) {s = 154;}

                        else if ( (LA5_77==OCTOBRE) && (synpred2_DateParser())) {s = 155;}

                        else if ( (LA5_77==NOVEMBRE) && (synpred2_DateParser())) {s = 156;}

                        else if ( (LA5_77==DECEMBRE) && (synpred2_DateParser())) {s = 157;}

                        else if ( (LA5_77==INT_00) && (synpred2_DateParser())) {s = 158;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA5_24>=INT_01 && LA5_24<=INT_09)||(LA5_24>=INT_10 && LA5_24<=INT_12)) && (synpred2_DateParser())) {s = 71;}

                        else if ( ((LA5_24>=INT_1 && LA5_24<=INT_9)) && (synpred2_DateParser())) {s = 72;}

                        else if ( ((LA5_24>=INT_13 && LA5_24<=INT_23)) && (synpred2_DateParser())) {s = 73;}

                        else if ( ((LA5_24>=INT_24 && LA5_24<=INT_31)) && (synpred2_DateParser())) {s = 74;}

                        else if ( ((LA5_24>=INT_32 && LA5_24<=INT_59)) && (synpred2_DateParser())) {s = 75;}

                        else if ( ((LA5_24>=INT_60 && LA5_24<=INT_99)) && (synpred2_DateParser())) {s = 76;}

                        else if ( (LA5_24==WHITE_SPACE) ) {s = 77;}

                        else if ( (LA5_24==DASH||LA5_24==SLASH) && (synpred2_DateParser())) {s = 78;}

                        else if ( ((LA5_24>=HEURE && LA5_24<=HEURE_SHORT)||LA5_24==COLON) ) {s = 69;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_167 = input.LA(1);

                         
                        int index5_167 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_167==DEBUT) && (synpred2_DateParser())) {s = 169;}

                        else if ( (LA5_167==FIN) && (synpred2_DateParser())) {s = 170;}

                        else if ( (LA5_167==DERNIER) && (synpred2_DateParser())) {s = 171;}

                        else if ( (LA5_167==APRES_MIDI) ) {s = 69;}

                         
                        input.seek(index5_167);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_26==WHITE_SPACE) ) {s = 77;}

                        else if ( ((LA5_26>=INT_01 && LA5_26<=INT_09)||(LA5_26>=INT_10 && LA5_26<=INT_12)) && (synpred2_DateParser())) {s = 71;}

                        else if ( ((LA5_26>=INT_1 && LA5_26<=INT_9)) && (synpred2_DateParser())) {s = 72;}

                        else if ( ((LA5_26>=INT_13 && LA5_26<=INT_23)) && (synpred2_DateParser())) {s = 73;}

                        else if ( ((LA5_26>=INT_24 && LA5_26<=INT_31)) && (synpred2_DateParser())) {s = 74;}

                        else if ( ((LA5_26>=INT_32 && LA5_26<=INT_59)) && (synpred2_DateParser())) {s = 75;}

                        else if ( ((LA5_26>=INT_60 && LA5_26<=INT_99)) && (synpred2_DateParser())) {s = 76;}

                        else if ( ((LA5_26>=HEURE && LA5_26<=HEURE_SHORT)||LA5_26==COLON) ) {s = 69;}

                        else if ( (LA5_26==DASH||LA5_26==SLASH) && (synpred2_DateParser())) {s = 78;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_168 = input.LA(1);

                         
                        int index5_168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA5_168>=MATIN && LA5_168<=NUIT)) ) {s = 69;}

                        else if ( (LA5_168==DEBUT) && (synpred2_DateParser())) {s = 172;}

                        else if ( (LA5_168==FIN) && (synpred2_DateParser())) {s = 173;}

                        else if ( (LA5_168==DERNIER) && (synpred2_DateParser())) {s = 174;}

                        else if ( (LA5_168==PREMIER) && (synpred2_DateParser())) {s = 175;}

                         
                        input.seek(index5_168);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_79==DIMANCHE) && (synpred2_DateParser())) {s = 159;}

                        else if ( (LA5_79==LUNDI) && (synpred2_DateParser())) {s = 160;}

                        else if ( (LA5_79==MARDI) && (synpred2_DateParser())) {s = 161;}

                        else if ( (LA5_79==MERCREDI) && (synpred2_DateParser())) {s = 162;}

                        else if ( (LA5_79==JEUDI) && (synpred2_DateParser())) {s = 163;}

                        else if ( (LA5_79==VENDREDI) && (synpred2_DateParser())) {s = 164;}

                        else if ( (LA5_79==SAMEDI) && (synpred2_DateParser())) {s = 165;}

                        else if ( (LA5_79==A||(LA5_79>=MINUIT && LA5_79<=NUIT)||LA5_79==DANS) ) {s = 69;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_0 = input.LA(1);

                         
                        int index5_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_0==DERNIER) && (synpred2_DateParser())) {s = 1;}

                        else if ( (LA5_0==SUIVANT) && (synpred2_DateParser())) {s = 2;}

                        else if ( (LA5_0==PASSE) && (synpred2_DateParser())) {s = 3;}

                        else if ( (LA5_0==DANS) ) {s = 4;}

                        else if ( (LA5_0==UN) && (synpred2_DateParser())) {s = 5;}

                        else if ( (LA5_0==PREMIER) && (synpred2_DateParser())) {s = 6;}

                        else if ( (LA5_0==DEUX) && (synpred2_DateParser())) {s = 7;}

                        else if ( (LA5_0==TROIS) && (synpred2_DateParser())) {s = 8;}

                        else if ( (LA5_0==QUATRE) && (synpred2_DateParser())) {s = 9;}

                        else if ( (LA5_0==CINQ) && (synpred2_DateParser())) {s = 10;}

                        else if ( (LA5_0==SIX) && (synpred2_DateParser())) {s = 11;}

                        else if ( (LA5_0==SEPT) && (synpred2_DateParser())) {s = 12;}

                        else if ( (LA5_0==HUIT) && (synpred2_DateParser())) {s = 13;}

                        else if ( (LA5_0==NEUF) && (synpred2_DateParser())) {s = 14;}

                        else if ( (LA5_0==ONZE) && (synpred2_DateParser())) {s = 15;}

                        else if ( (LA5_0==DOUZE) && (synpred2_DateParser())) {s = 16;}

                        else if ( (LA5_0==TREIZE) && (synpred2_DateParser())) {s = 17;}

                        else if ( (LA5_0==QUATORZE) && (synpred2_DateParser())) {s = 18;}

                        else if ( (LA5_0==QUINZE) && (synpred2_DateParser())) {s = 19;}

                        else if ( (LA5_0==SEIZE) && (synpred2_DateParser())) {s = 20;}

                        else if ( (LA5_0==DIX) && (synpred2_DateParser())) {s = 21;}

                        else if ( (LA5_0==VINGT) && (synpred2_DateParser())) {s = 22;}

                        else if ( (LA5_0==TRENTE) && (synpred2_DateParser())) {s = 23;}

                        else if ( ((LA5_0>=INT_01 && LA5_0<=INT_09)||(LA5_0>=INT_10 && LA5_0<=INT_12)) ) {s = 24;}

                        else if ( ((LA5_0>=INT_1 && LA5_0<=INT_9)) ) {s = 25;}

                        else if ( ((LA5_0>=INT_13 && LA5_0<=INT_23)) ) {s = 26;}

                        else if ( ((LA5_0>=INT_24 && LA5_0<=INT_31)) && (synpred2_DateParser())) {s = 27;}

                        else if ( ((LA5_0>=INT_32 && LA5_0<=INT_59)) && (synpred2_DateParser())) {s = 28;}

                        else if ( ((LA5_0>=INT_60 && LA5_0<=INT_99)) && (synpred2_DateParser())) {s = 29;}

                        else if ( (LA5_0==CE) ) {s = 30;}

                        else if ( (LA5_0==DIMANCHE) && (synpred2_DateParser())) {s = 31;}

                        else if ( (LA5_0==LUNDI) && (synpred2_DateParser())) {s = 32;}

                        else if ( (LA5_0==MARDI) && (synpred2_DateParser())) {s = 33;}

                        else if ( (LA5_0==MERCREDI) && (synpred2_DateParser())) {s = 34;}

                        else if ( (LA5_0==JEUDI) && (synpred2_DateParser())) {s = 35;}

                        else if ( (LA5_0==VENDREDI) && (synpred2_DateParser())) {s = 36;}

                        else if ( (LA5_0==SAMEDI) && (synpred2_DateParser())) {s = 37;}

                        else if ( (LA5_0==LE) && (synpred2_DateParser())) {s = 38;}

                        else if ( (LA5_0==COMMA) && (synpred2_DateParser())) {s = 39;}

                        else if ( (LA5_0==WHITE_SPACE) && (synpred2_DateParser())) {s = 40;}

                        else if ( (LA5_0==JANVIER) && (synpred2_DateParser())) {s = 41;}

                        else if ( (LA5_0==FEVRIER) && (synpred2_DateParser())) {s = 42;}

                        else if ( (LA5_0==MARS) && (synpred2_DateParser())) {s = 43;}

                        else if ( (LA5_0==AVRIL) && (synpred2_DateParser())) {s = 44;}

                        else if ( (LA5_0==MAI) && (synpred2_DateParser())) {s = 45;}

                        else if ( (LA5_0==JUIN) && (synpred2_DateParser())) {s = 46;}

                        else if ( (LA5_0==JUILLET) && (synpred2_DateParser())) {s = 47;}

                        else if ( (LA5_0==AOUT) && (synpred2_DateParser())) {s = 48;}

                        else if ( (LA5_0==SEPTEMBRE) && (synpred2_DateParser())) {s = 49;}

                        else if ( (LA5_0==OCTOBRE) && (synpred2_DateParser())) {s = 50;}

                        else if ( (LA5_0==NOVEMBRE) && (synpred2_DateParser())) {s = 51;}

                        else if ( (LA5_0==DECEMBRE) && (synpred2_DateParser())) {s = 52;}

                        else if ( (LA5_0==IL_Y_A) && (synpred2_DateParser())) {s = 53;}

                        else if ( (LA5_0==AUJOURD_HUI) && (synpred2_DateParser())) {s = 54;}

                        else if ( (LA5_0==MAINTENANT) && (synpred2_DateParser())) {s = 55;}

                        else if ( (LA5_0==DEMAIN) && (synpred2_DateParser())) {s = 56;}

                        else if ( (LA5_0==APRES_DEMAIN) && (synpred2_DateParser())) {s = 57;}

                        else if ( (LA5_0==HIER) && (synpred2_DateParser())) {s = 58;}

                        else if ( (LA5_0==AVANT_HIER) && (synpred2_DateParser())) {s = 59;}

                        else if ( (LA5_0==DEUXIEME) && (synpred2_DateParser())) {s = 60;}

                        else if ( (LA5_0==TROISIEME) && (synpred2_DateParser())) {s = 61;}

                        else if ( (LA5_0==QUATRIEME) && (synpred2_DateParser())) {s = 62;}

                        else if ( (LA5_0==CINQUIEME) && (synpred2_DateParser())) {s = 63;}

                        else if ( (LA5_0==A) ) {s = 64;}

                        else if ( (LA5_0==LA) && (synpred2_DateParser())) {s = 65;}

                        else if ( (LA5_0==DEBUT) && (synpred2_DateParser())) {s = 66;}

                        else if ( (LA5_0==FIN) && (synpred2_DateParser())) {s = 67;}

                        else if ( (LA5_0==JOUR) && (synpred2_DateParser())) {s = 68;}

                        else if ( ((LA5_0>=MINUIT && LA5_0<=NUIT)||LA5_0==INT_00||LA5_0==INT_0) ) {s = 69;}

                         
                        input.seek(index5_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA5_25>=INT_01 && LA5_25<=INT_09)||(LA5_25>=INT_10 && LA5_25<=INT_12)) && (synpred2_DateParser())) {s = 71;}

                        else if ( ((LA5_25>=INT_1 && LA5_25<=INT_9)) && (synpred2_DateParser())) {s = 72;}

                        else if ( ((LA5_25>=INT_13 && LA5_25<=INT_23)) && (synpred2_DateParser())) {s = 73;}

                        else if ( ((LA5_25>=INT_24 && LA5_25<=INT_31)) && (synpred2_DateParser())) {s = 74;}

                        else if ( ((LA5_25>=INT_32 && LA5_25<=INT_59)) && (synpred2_DateParser())) {s = 75;}

                        else if ( ((LA5_25>=INT_60 && LA5_25<=INT_99)) && (synpred2_DateParser())) {s = 76;}

                        else if ( (LA5_25==WHITE_SPACE) ) {s = 77;}

                        else if ( ((LA5_25>=HEURE && LA5_25<=HEURE_SHORT)||LA5_25==COLON) ) {s = 69;}

                        else if ( (LA5_25==DASH||LA5_25==SLASH) && (synpred2_DateParser())) {s = 78;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_80==LA) && (synpred2_DateParser())) {s = 65;}

                        else if ( (LA5_80==MINUIT) ) {s = 69;}

                        else if ( (LA5_80==LE) && (synpred2_DateParser())) {s = 166;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_70==LE) ) {s = 81;}

                        else if ( (LA5_70==LA) ) {s = 82;}

                        else if ( (LA5_70==UN) && (synpred2_DateParser())) {s = 83;}

                        else if ( (LA5_70==PREMIER) && (synpred2_DateParser())) {s = 84;}

                        else if ( (LA5_70==DEUX) && (synpred2_DateParser())) {s = 85;}

                        else if ( (LA5_70==TROIS) && (synpred2_DateParser())) {s = 86;}

                        else if ( (LA5_70==QUATRE) && (synpred2_DateParser())) {s = 87;}

                        else if ( (LA5_70==CINQ) && (synpred2_DateParser())) {s = 88;}

                        else if ( (LA5_70==SIX) && (synpred2_DateParser())) {s = 89;}

                        else if ( (LA5_70==SEPT) && (synpred2_DateParser())) {s = 90;}

                        else if ( (LA5_70==HUIT) && (synpred2_DateParser())) {s = 91;}

                        else if ( (LA5_70==NEUF) && (synpred2_DateParser())) {s = 92;}

                        else if ( (LA5_70==ONZE) && (synpred2_DateParser())) {s = 93;}

                        else if ( (LA5_70==DOUZE) && (synpred2_DateParser())) {s = 94;}

                        else if ( (LA5_70==TREIZE) && (synpred2_DateParser())) {s = 95;}

                        else if ( (LA5_70==QUATORZE) && (synpred2_DateParser())) {s = 96;}

                        else if ( (LA5_70==QUINZE) && (synpred2_DateParser())) {s = 97;}

                        else if ( (LA5_70==SEIZE) && (synpred2_DateParser())) {s = 98;}

                        else if ( (LA5_70==DIX) && (synpred2_DateParser())) {s = 99;}

                        else if ( (LA5_70==VINGT) && (synpred2_DateParser())) {s = 100;}

                        else if ( (LA5_70==TRENTE) && (synpred2_DateParser())) {s = 101;}

                        else if ( ((LA5_70>=INT_01 && LA5_70<=INT_09)||(LA5_70>=INT_10 && LA5_70<=INT_12)) && (synpred2_DateParser())) {s = 102;}

                        else if ( ((LA5_70>=INT_1 && LA5_70<=INT_9)) && (synpred2_DateParser())) {s = 103;}

                        else if ( ((LA5_70>=INT_13 && LA5_70<=INT_23)) && (synpred2_DateParser())) {s = 104;}

                        else if ( ((LA5_70>=INT_24 && LA5_70<=INT_31)) && (synpred2_DateParser())) {s = 105;}

                        else if ( ((LA5_70>=INT_32 && LA5_70<=INT_59)) && (synpred2_DateParser())) {s = 106;}

                        else if ( ((LA5_70>=INT_60 && LA5_70<=INT_99)) && (synpred2_DateParser())) {s = 107;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\17\uffff";
    static final String DFA12_eofS =
        "\17\uffff";
    static final String DFA12_minS =
        "\2\5\15\uffff";
    static final String DFA12_maxS =
        "\2\u00cb\15\uffff";
    static final String DFA12_acceptS =
        "\2\uffff\1\2\14\1";
    static final String DFA12_specialS =
        "\17\uffff}>";
    static final String[] DFA12_transitionS = {
            "\23\2\3\uffff\1\2\4\uffff\5\2\4\uffff\1\2\1\uffff\1\2\6\uffff"+
            "\3\2\2\uffff\1\2\3\uffff\3\2\1\1\1\uffff\3\2\1\uffff\1\2\3\uffff"+
            "\11\2\1\uffff\172\2",
            "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\10\16\3"+
            "\uffff\1\16\4\uffff\5\16\4\uffff\1\16\1\uffff\1\16\6\uffff\3"+
            "\16\2\uffff\1\16\3\uffff\4\16\1\uffff\3\16\1\uffff\1\16\3\uffff"+
            "\11\16\1\uffff\172\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "80:11: ( WHITE_SPACE )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA15_eotS =
        "\u0352\uffff";
    static final String DFA15_eofS =
        "\37\uffff\7\50\127\uffff\14\47\41\uffff\27\50\1\uffff\2\50\122\uffff"+
        "\6\50\4\uffff\3\50\2\uffff\4\50\1\uffff\4\50\143\uffff\7\50\21\uffff"+
        "\5\50\1\uffff\14\u022b\2\uffff\3\50\1\uffff\10\50\1\uffff\1\50\2"+
        "\uffff\1\50\u00c6\uffff\14\u0302\31\uffff\1\50\162\uffff\14\u0302"+
        "\32\uffff";
    static final String DFA15_minS =
        "\1\5\24\76\7\45\3\76\7\63\1\76\4\uffff\2\21\1\63\3\5\1\u00bb\3\76"+
        "\1\5\1\66\7\76\1\45\1\76\1\5\1\66\1\45\6\76\1\uffff\2\5\1\51\4\45"+
        "\1\21\16\63\20\76\3\45\26\76\7\63\1\76\7\63\14\76\1\u00b5\2\76\1"+
        "\u00b5\2\76\3\30\1\45\20\76\3\45\1\5\2\76\1\5\3\30\33\76\3\45\7"+
        "\76\1\5\1\63\3\5\1\u00bb\3\76\1\5\1\66\4\76\1\45\4\76\1\5\1\66\1"+
        "\45\6\76\4\52\1\45\1\5\1\34\2\5\2\u00b5\1\52\6\76\3\5\1\u00bb\3"+
        "\76\1\5\1\66\4\76\1\45\4\76\1\5\1\66\1\45\1\34\3\30\1\45\20\76\3"+
        "\45\1\5\1\76\1\5\2\21\1\110\3\5\1\u00bb\3\76\1\5\1\66\4\76\1\45"+
        "\4\76\1\5\1\66\1\45\6\76\14\uffff\4\45\20\76\3\45\1\5\3\45\7\63"+
        "\14\76\1\u00b5\2\76\1\u00b5\41\76\1\u00b5\2\76\1\u00b5\1\76\3\5"+
        "\1\u00bb\3\76\1\5\1\66\7\76\1\45\1\76\1\5\1\66\1\45\1\5\20\76\3"+
        "\45\42\76\3\45\4\76\14\uffff\14\76\1\u00b5\2\76\1\u00b5\1\76\2\5"+
        "\1\u00bb\3\76\1\5\1\66\10\76\1\45\1\5\1\66\1\45\1\5\2\u00b5\1\5"+
        "\1\52\2\5\14\76\1\u00b5\2\76\1\u00b5\1\76\2\5\1\u00bb\3\76\1\5\1"+
        "\66\6\76\1\45\2\76\1\5\1\66\1\45\1\5\1\21\1\u00bb\3\76\1\21\1\66"+
        "\4\76\1\45\4\76\1\21\1\66\1\45\1\5\2\u00b5\30\76\1\u00b5\2\76\1"+
        "\u00b5\4\76\3\30\5\76\2\u00b5\14\76\1\u00b5\2\76\1\u00b5\25\76\3"+
        "\45\14\76\1\u00b5\2\76\1\u00b5\1\76\14\uffff\2\76\1\45\2\u00b5\1"+
        "\63\1\5\1\21\1\51\2\76\2\u00b5\2\5\1\u00bb\3\76\1\5\1\66\10\76\1"+
        "\45\1\5\1\66\1\45\2\u00b5\36\76\1\u00b5\2\76\1\u00b5\3\76\1\55\1"+
        "\56\1\45\2\u00b5\2\76";
    static final String DFA15_maxS =
        "\1\u00cb\24\76\2\u00bd\1\76\6\u00b4\1\76\7\u00c7\1\76\4\uffff\1"+
        "\33\1\27\4\u00c7\1\u00bd\3\76\1\u00c7\1\u00bd\7\76\1\u00b5\1\76"+
        "\1\u00c7\1\66\1\u00b5\6\76\1\uffff\1\36\2\u00c7\4\105\1\u00cb\16"+
        "\u00c7\20\76\2\u00bd\1\76\6\u00b4\4\76\14\104\7\u00c7\1\76\7\u00c7"+
        "\14\76\1\u00b5\2\76\1\u00b5\2\76\4\u00b4\20\104\2\u00bd\1\104\1"+
        "\u00c7\2\u00b4\1\u00c7\3\105\7\u00c7\24\76\2\u00bd\1\76\6\u00b4"+
        "\1\76\3\u00c7\1\36\2\u00bd\3\76\2\u00bd\4\76\1\u00b5\4\76\2\66\1"+
        "\u00b5\6\76\3\77\1\u00c7\1\u00b4\4\u00c7\2\u00b5\1\77\6\104\2\150"+
        "\2\u00bd\3\104\2\u00bd\4\104\1\u00b5\4\104\1\150\1\66\1\u00b5\1"+
        "\150\4\u00b4\20\76\2\u00bd\1\76\1\30\2\u00c7\1\33\1\27\4\u00c7\1"+
        "\u00bd\3\76\1\u00c7\1\u00bd\4\76\1\u00b5\4\76\1\u00c7\1\66\1\u00b5"+
        "\6\76\14\uffff\4\u00b4\20\76\2\u00bd\1\76\1\u00c7\3\u00b4\7\u00c7"+
        "\14\76\1\u00b5\2\76\1\u00b5\1\76\5\104\1\76\14\104\2\76\3\104\1"+
        "\76\10\104\1\u00b5\1\104\1\76\1\u00b5\1\104\2\34\2\u00bd\3\76\2"+
        "\u00bd\7\76\1\u00b5\1\76\2\66\1\u00b5\1\u00c7\20\76\2\u00bd\1\76"+
        "\4\u00b4\16\u00c7\20\76\2\u00bd\1\76\4\u00b4\14\uffff\14\76\1\u00b5"+
        "\2\76\1\u00b5\1\76\1\35\2\u00bd\3\76\2\u00bd\10\76\1\u00b5\2\66"+
        "\1\u00b5\1\u00c7\2\u00b5\1\u00cb\1\u00c7\2\u017b\14\76\1\u00b5\2"+
        "\76\1\u00b5\1\76\1\34\2\u00bd\3\76\2\u00bd\6\76\1\u00b5\2\76\2\66"+
        "\1\u00b5\1\u00c7\2\u00bd\3\76\2\u00bd\4\76\1\u00b5\4\76\2\66\1\u00b5"+
        "\1\u00c7\2\u00b5\14\104\14\76\1\u00b5\2\76\1\u00b5\4\76\3\u00b4"+
        "\2\76\1\104\2\76\2\u00b5\14\76\1\u00b5\2\76\1\u00b5\1\76\4\u00b4"+
        "\20\76\2\u00bd\15\76\1\u00b5\2\76\1\u00b5\1\76\14\uffff\2\76\1\u00b4"+
        "\2\u00b5\2\u00c7\1\62\1\150\2\76\2\u00b5\1\35\2\u00bd\3\76\2\u00bd"+
        "\10\76\1\u00b5\2\66\3\u00b5\6\76\14\104\14\76\1\u00b5\2\76\1\u00b5"+
        "\3\76\1\101\1\u00c7\1\150\2\u00b5\2\76";
    static final String DFA15_acceptS =
        "\47\uffff\1\2\1\3\1\4\1\5\36\uffff\1\1\u0120\uffff\14\2\u00aa\uffff"+
        "\14\2\u00cb\uffff\14\2\117\uffff";
    static final String DFA15_specialS =
        "\u0352\uffff}>";
    static final String[] DFA15_transitionS = {
            "\14\50\1\37\1\40\1\41\1\42\1\43\1\44\1\45\3\uffff\1\52\4\uffff"+
            "\5\50\4\uffff\1\51\1\uffff\1\3\6\uffff\1\4\1\46\1\51\2\uffff"+
            "\1\36\3\uffff\1\50\1\2\1\1\1\47\1\uffff\2\51\1\50\1\uffff\1"+
            "\47\3\uffff\11\30\1\uffff\11\31\3\30\13\32\10\33\34\34\50\35"+
            "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\25\1\17\1\20\1"+
            "\21\1\22\1\23\1\24\1\26\1\27\1\6\4\51",
            "\1\53",
            "\1\54",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\61\30\uffff\1\60\174\uffff\1\64\1\62\1\63",
            "\1\66\20\uffff\1\76\7\uffff\1\65\167\uffff\1\72\1\74\1\70\1"+
            "\67\1\77\1\75\1\73\1\71",
            "\1\101\20\uffff\1\102\7\uffff\1\100",
            "\1\111\30\uffff\1\56\6\uffff\1\111\2\uffff\11\103\1\uffff\11"+
            "\104\3\103\13\105\10\106\34\107\50\110",
            "\1\111\30\uffff\1\56\6\uffff\1\111\2\uffff\11\103\1\uffff\11"+
            "\104\3\103\13\105\10\106\34\107\50\110",
            "\1\111\30\uffff\1\56\6\uffff\1\111\2\uffff\11\103\1\uffff\11"+
            "\104\3\103\13\105\10\106\34\107\50\110",
            "\1\111\30\uffff\1\56\6\uffff\1\111\2\uffff\11\103\1\uffff\11"+
            "\104\3\103\13\105\10\106\34\107\50\110",
            "\1\112\11\uffff\11\103\1\uffff\11\104\3\103\13\105\10\106\34"+
            "\107\50\110",
            "\1\112\11\uffff\11\103\1\uffff\11\104\3\103\13\105\10\106\34"+
            "\107\50\110",
            "\1\54",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\113\5\uffff\1\114\3\uffff\11\115\1\uffff\11"+
            "\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\121",
            "",
            "",
            "",
            "",
            "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\3\uffff\1\51",
            "\1\131\1\132\1\133\1\134\1\135\1\136\1\137",
            "\2\51\23\uffff\11\163\1\uffff\11\164\3\163\13\165\10\166\34"+
            "\167\50\170\1\140\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
            "\1\151\1\160\1\152\1\153\1\154\1\155\1\156\1\157\1\161\1\162"+
            "\1\141",
            "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084"+
            "\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\3\uffff\1\173\1\171\1\174\1\172\31"+
            "\uffff\2\51\15\uffff\12\51\1\uffff\166\51",
            "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084"+
            "\1\u0085\1\u0086\1\u0087\1\u0088\1\u0091\1\u0092\1\u0093\1\u0094"+
            "\1\u0095\1\u0096\1\u0097\3\uffff\1\u0090\1\171\1\174\1\172\31"+
            "\uffff\2\51\15\uffff\12\51\1\uffff\166\51",
            "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084"+
            "\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\3\uffff\1\173\1\171\1\174\1\172\31"+
            "\uffff\2\51\15\uffff\12\51\1\uffff\151\51\1\u0098\1\u0099\1"+
            "\u009a\12\51",
            "\1\64\1\62\1\63",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084"+
            "\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\3\uffff\1\173\1\171\1\174\1\172\27"+
            "\uffff\1\u009b\1\uffff\2\51\15\uffff\12\51\1\uffff\144\51\1"+
            "\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3"+
            "\12\51",
            "\1\76\177\uffff\1\72\1\74\1\70\1\67\1\77\1\75\1\73\1\71",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\56",
            "\1\u00a4\u008f\uffff\1\u00a5",
            "\1\56",
            "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084"+
            "\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\3\uffff\1\173\1\171\1\174\1\172\27"+
            "\uffff\1\u00a6\1\uffff\2\51\15\uffff\12\51\1\uffff\166\51",
            "\1\102",
            "\1\u00a7\u008f\uffff\1\u00a8",
            "\1\112",
            "\1\112",
            "\1\112",
            "\1\112",
            "\1\112",
            "\1\112",
            "",
            "\14\50\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f"+
            "\3\uffff\1\173\1\171\1\u00a9\1\172",
            "\14\47\13\uffff\1\51\10\uffff\1\50\2\uffff\2\50\1\52\6\50\1"+
            "\uffff\1\50\1\47\1\uffff\3\50\2\51\1\50\1\uffff\2\50\1\u00c1"+
            "\1\52\4\uffff\1\47\2\uffff\1\50\11\u00aa\1\50\11\u00ab\3\u00aa"+
            "\13\u00ac\10\u00ad\34\u00c2\50\u00c3\1\u00ae\1\u00b0\1\u00b1"+
            "\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00be\1\u00b8"+
            "\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd\1\u00bf\1\u00c0\1\u00af",
            "\1\50\2\uffff\5\50\1\uffff\1\50\1\47\3\uffff\1\50\6\uffff\1"+
            "\u00c4\5\uffff\1\47\2\uffff\1\50\11\u00c5\1\50\11\u00c6\3\u00c5"+
            "\13\u00c7\10\120\104\uffff\23\47",
            "\1\111\30\uffff\1\47\6\uffff\1\111",
            "\1\111\30\uffff\1\47\6\uffff\1\111",
            "\1\111\30\uffff\1\47\6\uffff\1\111",
            "\1\111\30\uffff\1\47\6\uffff\1\111",
            "\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\3"+
            "\uffff\1\52\17\uffff\1\u00d1\6\uffff\1\u00d2\4\uffff\1\u00ec"+
            "\4\uffff\1\u00d0\1\u00cf\1\47\1\uffff\2\51\6\uffff\11\u00e6"+
            "\1\uffff\11\u00e7\3\u00e6\13\u00e8\10\u00e9\34\u00ea\50\u00eb"+
            "\1\u00d3\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\u00db"+
            "\1\u00dc\1\u00e3\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2"+
            "\1\u00e4\1\u00e5\1\u00d4\4\51",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ed\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u00ef\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f2\30\uffff\1\u00f1\174\uffff\1\u00f4\1\u00f5\1\u00f3",
            "\1\u00f7\20\uffff\1\u00fc\7\uffff\1\u00f6\167\uffff\1\u00f9"+
            "\1\u00fb\1\u00fd\1\u00fe\1\u00ff\1\u0100\1\u00f8\1\u00fa",
            "\1\u0102\20\uffff\1\u0103\7\uffff\1\u0101",
            "\1\u00f0\11\uffff\11\u0104\1\uffff\11\u0105\3\u0104\13\u0106"+
            "\10\u0107\34\u0108\50\u0109",
            "\1\u00f0\11\uffff\11\u0104\1\uffff\11\u0105\3\u0104\13\u0106"+
            "\10\u0107\34\u0108\50\u0109",
            "\1\u00f0\11\uffff\11\u0104\1\uffff\11\u0105\3\u0104\13\u0106"+
            "\10\u0107\34\u0108\50\u0109",
            "\1\u00f0\11\uffff\11\u0104\1\uffff\11\u0105\3\u0104\13\u0106"+
            "\10\u0107\34\u0108\50\u0109",
            "\1\u00f0\11\uffff\11\u0104\1\uffff\11\u0105\3\u0104\13\u0106"+
            "\10\u0107\34\u0108\50\u0109",
            "\1\u00f0\11\uffff\11\u0104\1\uffff\11\u0105\3\u0104\13\u0106"+
            "\10\u0107\34\u0108\50\u0109",
            "\1\u010a",
            "\1\u010b",
            "\1\u010c",
            "\1\u010d",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\u010e\5\uffff\1\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u010f\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\u0110",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\47\12\uffff\1\u0111\5\uffff\1\u00ee\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\47",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u0113",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u0112",
            "\1\u00a5",
            "\1\56",
            "\1\u0114",
            "\1\u00a8",
            "\1\56",
            "\1\u0115",
            "\2\50\13\uffff\1\111\30\uffff\1\u011c\4\uffff\2\50\1\111\2"+
            "\uffff\11\u0116\1\uffff\11\u0117\3\u0116\13\u0118\10\u0119\34"+
            "\u011a\50\u011b",
            "\2\50\13\uffff\1\111\30\uffff\1\u011c\4\uffff\2\50\1\111\2"+
            "\uffff\11\u0116\1\uffff\11\u0117\3\u0116\13\u0118\10\u0119\34"+
            "\u011a\50\u011b",
            "\2\50\13\uffff\1\111\30\uffff\1\u011c\4\uffff\2\50\1\111\2"+
            "\uffff\11\u0116\1\uffff\11\u0117\3\u0116\13\u0118\10\u0119\34"+
            "\u011a\50\u011b",
            "\1\111\30\uffff\1\u011d\5\uffff\1\50\1\111\2\uffff\11\u0116"+
            "\1\uffff\11\u0117\3\u0116\13\u0118\10\u0119\34\u011a\50\u011b",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011f\30\uffff\1\u011e\5\uffff\1\50\166\uffff\1\u0122\1"+
            "\u0121\1\u0120",
            "\1\u0124\20\uffff\1\u0129\7\uffff\1\u0123\5\uffff\1\50\161"+
            "\uffff\1\u0128\1\u0127\1\u0125\1\u012c\1\u012d\1\u0126\1\u012a"+
            "\1\u012b",
            "\1\u012f\20\uffff\1\u0130\7\uffff\1\u012e\5\uffff\1\50",
            "\14\47\13\uffff\1\51\33\uffff\2\51\16\uffff\11\51\1\uffff\166"+
            "\51",
            "\1\u0131\5\uffff\1\50\3\uffff\11\u0116\1\uffff\11\u0117\3\u0116"+
            "\13\u0118\10\u0119\34\u011a\50\u011b",
            "\1\u0131\5\uffff\1\50\3\uffff\11\u0116\1\uffff\11\u0117\3\u0116"+
            "\13\u0118\10\u0119\34\u011a\50\u011b",
            "\14\47\13\uffff\1\51\10\uffff\1\50\3\uffff\1\50\2\uffff\5\50"+
            "\1\uffff\1\50\1\47\1\uffff\3\50\2\51\1\50\3\uffff\1\u00c1\5"+
            "\uffff\1\47\2\uffff\1\50\11\u0132\1\50\11\u0133\3\u0132\13\u0134"+
            "\10\u0135\104\51\1\u0136\1\u0138\1\u0139\1\u013a\1\u013b\1\u013c"+
            "\1\u013d\1\u013e\1\u013f\1\u0146\1\u0140\1\u0141\1\u0142\1\u0143"+
            "\1\u0144\1\u0145\1\u0147\1\u0148\1\u0137",
            "\2\50\13\uffff\1\111\30\uffff\1\u0149\4\uffff\1\50\1\uffff"+
            "\1\111",
            "\2\50\13\uffff\1\111\30\uffff\1\u0149\4\uffff\1\50\1\uffff"+
            "\1\111",
            "\2\50\13\uffff\1\111\30\uffff\1\u0149\4\uffff\1\50\1\uffff"+
            "\1\111",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014b\5\uffff\1\u014a\3\uffff\11\47\1\uffff\37\47\104\uffff"+
            "\23\47",
            "\1\u014c",
            "\1\u014d",
            "\1\u014d",
            "\1\u014e",
            "\1\u014f",
            "\1\u0150",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u0152\30\uffff\1\u0151\174\uffff\1\u0155\1\u0154\1\u0153",
            "\1\u0157\20\uffff\1\u015c\7\uffff\1\u0156\167\uffff\1\u015d"+
            "\1\u015a\1\u0159\1\u0158\1\u0160\1\u015b\1\u015e\1\u015f",
            "\1\u0162\20\uffff\1\u0163\7\uffff\1\u0161",
            "\1\u014f\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014f\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014f\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014f\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014d\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014d\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014d",
            "\1\u016a\1\u016b\1\u016c\1\u016d\1\u016e\1\u016f\1\u0170\1"+
            "\u0171\1\u0172\1\u0173\1\u0174\1\u0175\13\uffff\2\51\25\uffff"+
            "\1\u0175\4\uffff\2\51\4\uffff\1\u00c1\5\uffff\1\u0175\3\uffff"+
            "\11\u0176\1\uffff\11\u0177\3\u0176\13\u0178\10\u0179\104\51"+
            "\1\u017a\1\u017c\1\u017d\1\u017e\1\u017f\1\u0180\1\u0181\1\u0182"+
            "\1\u0183\1\u018a\1\u0184\1\u0185\1\u0186\1\u0187\1\u0188\1\u0189"+
            "\1\u018b\1\u018c\1\u017b",
            "\1\u0175\12\uffff\1\u018d\5\uffff\1\u0175\3\uffff\11\115\1"+
            "\uffff\11\116\3\115\13\117\10\120\104\uffff\23\u0175",
            "\14\u0175\13\uffff\1\51\26\uffff\1\u0175\4\uffff\2\51\4\uffff"+
            "\1\u00c1\5\uffff\1\u0175\3\uffff\11\u018e\1\uffff\11\u018f\3"+
            "\u018e\13\u0190\10\u0135\104\51\1\u0136\1\u0138\1\u0139\1\u013a"+
            "\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\1\u0146\1\u0140\1\u0141"+
            "\1\u0142\1\u0143\1\u0144\1\u0145\1\u0147\1\u0148\1\u0137",
            "\14\50\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197"+
            "\3\uffff\4\50",
            "\14\50\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197"+
            "\3\uffff\4\50\u009c\uffff\1\u0198\1\u0199\1\u019a",
            "\1\u00f4\1\u00f5\1\u00f3",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\14\50\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197"+
            "\3\uffff\4\50\27\uffff\1\u019b\177\uffff\1\u019c\1\u019d\1\u019e"+
            "\1\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3",
            "\1\u00fc\177\uffff\1\u00f9\1\u00fb\1\u00fd\1\u00fe\1\u00ff"+
            "\1\u0100\1\u00f8\1\u00fa",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u01a4\u008f\uffff\1\u01a5",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\14\50\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197"+
            "\3\uffff\4\50\27\uffff\1\u01a6",
            "\1\u0103",
            "\1\u01a7\u008f\uffff\1\u01a8",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\52\24\uffff\1\u01a9",
            "\1\52\24\uffff\1\u01aa",
            "\1\52\24\uffff\1\u01ab",
            "\1\52\1\51\6\uffff\1\51\4\uffff\1\51\4\uffff\2\51\1\uffff\1"+
            "\u01ac\10\uffff\11\51\1\uffff\166\51",
            "\1\u0175\2\uffff\2\u0175\2\uffff\5\u0175\1\uffff\1\u0175\2"+
            "\uffff\3\u0175\2\uffff\1\u0175\4\uffff\1\50\7\uffff\156\u0175",
            "\14\u0175\13\uffff\1\51\15\uffff\1\52\10\uffff\1\u0175\4\uffff"+
            "\2\51\4\uffff\1\u00c1\1\u01ad\4\uffff\1\u0175\3\uffff\11\u018e"+
            "\1\uffff\11\u018f\3\u018e\13\u0190\10\u0135\104\51\1\u0136\1"+
            "\u0138\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f"+
            "\1\u0146\1\u0140\1\u0141\1\u0142\1\u0143\1\u0144\1\u0145\1\u0147"+
            "\1\u0148\1\u0137",
            "\1\51\15\uffff\1\52\15\uffff\2\51\5\uffff\1\u01ab\10\uffff"+
            "\11\51\1\uffff\166\51",
            "\1\u016a\1\u016b\1\u016c\1\u016d\1\u016e\1\u016f\1\u0170\1"+
            "\u0171\1\u0172\1\u0173\1\u0174\1\u0175\13\uffff\2\51\14\uffff"+
            "\1\52\10\uffff\1\u0175\4\uffff\2\51\4\uffff\1\u00c1\1\u01ad"+
            "\4\uffff\1\u0175\3\uffff\11\u0176\1\uffff\11\u0177\3\u0176\13"+
            "\u0178\10\u0179\104\51\1\u017a\1\u017c\1\u017d\1\u017e\1\u017f"+
            "\1\u0180\1\u0181\1\u0182\1\u0183\1\u018a\1\u0184\1\u0185\1\u0186"+
            "\1\u0187\1\u0188\1\u0189\1\u018b\1\u018c\1\u017b",
            "\1\u01af\1\u01b0\1\u01b1\1\u01b2\1\u01b3\1\u01b4\1\u01b5\1"+
            "\u01b6\1\u01b7\1\u01b8\1\u01b9\1\u01ba\1\u0089\1\u008a\1\u008b"+
            "\1\u008c\1\u008d\1\u008e\1\u008f\3\uffff\1\173\1\171\1\u01ae"+
            "\1\172\31\uffff\2\51\15\uffff\12\51\1\uffff\166\51",
            "\1\u01bb",
            "\1\u01bc",
            "\1\52\24\uffff\1\u01ac",
            "\1\u0131\5\uffff\1\50",
            "\1\u0131\5\uffff\1\50",
            "\1\u0131\5\uffff\1\50",
            "\1\u0131\5\uffff\1\50",
            "\1\u0131\5\uffff\1\50",
            "\1\u0131\5\uffff\1\50",
            "\14\u0175\7\uffff\1\50\3\uffff\1\51\10\uffff\1\50\2\uffff\2"+
            "\50\2\uffff\5\50\1\uffff\1\50\2\uffff\3\50\2\uffff\1\50\14\uffff"+
            "\42\50",
            "\14\u0175\13\uffff\1\51\10\uffff\1\50\2\uffff\2\50\2\uffff"+
            "\5\50\1\uffff\1\50\2\uffff\3\50\2\uffff\1\50\14\uffff\42\50",
            "\14\u0175\13\uffff\1\51\10\uffff\1\50\2\uffff\2\50\2\uffff"+
            "\5\50\1\uffff\1\50\2\uffff\3\50\2\uffff\1\50\14\uffff\42\50"+
            "\122\uffff\1\u01bd\1\u01be\1\u01bf",
            "\1\u0122\1\u0121\1\u0120",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\14\u0175\13\uffff\1\51\10\uffff\1\50\2\uffff\2\50\2\uffff"+
            "\5\50\1\uffff\1\50\2\uffff\1\50\1\u01c0\1\50\2\uffff\1\50\14"+
            "\uffff\42\50\115\uffff\1\u01c1\1\u01c2\1\u01c3\1\u01c4\1\u01c5"+
            "\1\u01c6\1\u01c7\1\u01c8",
            "\1\u0129\177\uffff\1\u0128\1\u0127\1\u0125\1\u012c\1\u012d"+
            "\1\u0126\1\u012a\1\u012b",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u01c9\u008f\uffff\1\u01ca",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\14\u0175\13\uffff\1\51\10\uffff\1\50\2\uffff\2\50\2\uffff"+
            "\5\50\1\uffff\1\50\2\uffff\1\50\1\u01cb\1\50\2\uffff\1\50\14"+
            "\uffff\42\50",
            "\1\u0130",
            "\1\u01cc\u008f\uffff\1\u01cd",
            "\1\51\10\uffff\1\50\2\uffff\2\50\2\uffff\5\50\1\uffff\1\50"+
            "\2\uffff\3\50\2\uffff\1\50\14\uffff\42\50",
            "\2\50\13\uffff\1\111\30\uffff\1\u01ce\4\uffff\1\50\1\uffff"+
            "\1\111\2\uffff\11\51\1\uffff\143\51",
            "\2\50\13\uffff\1\111\30\uffff\1\u01ce\4\uffff\1\50\1\uffff"+
            "\1\111\2\uffff\11\51\1\uffff\143\51",
            "\2\50\13\uffff\1\111\30\uffff\1\u01ce\4\uffff\1\50\1\uffff"+
            "\1\111\2\uffff\11\51\1\uffff\143\51",
            "\1\111\30\uffff\1\u01cf\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01d1\30\uffff\1\u01d0\174\uffff\1\u01d4\1\u01d3\1\u01d2",
            "\1\u01d6\20\uffff\1\u01de\7\uffff\1\u01d5\167\uffff\1\u01d9"+
            "\1\u01d8\1\u01d7\1\u01db\1\u01dc\1\u01df\1\u01dd\1\u01da",
            "\1\u01e1\20\uffff\1\u01e2\7\uffff\1\u01e0",
            "\14\u0175\7\uffff\1\50",
            "\1\u01e3\11\uffff\11\u0175\1\uffff\37\u0175\104\uffff\23\u0175",
            "\14\u0175\13\uffff\1\51\15\uffff\1\52\15\uffff\2\51\4\uffff"+
            "\1\u00c1\1\52\10\uffff\11\u01f7\1\uffff\11\u01f8\3\u01f7\13"+
            "\u01f9\10\u01fa\104\51\1\u01e4\1\u01e6\1\u01e7\1\u01e8\1\u01e9"+
            "\1\u01ea\1\u01eb\1\u01ec\1\u01ed\1\u01f4\1\u01ee\1\u01ef\1\u01f0"+
            "\1\u01f1\1\u01f2\1\u01f3\1\u01f5\1\u01f6\1\u01e5",
            "\1\u01fb\1\u01fc\1\u01fd\1\u01fe\1\u01ff\1\u0200\1\u0201\3"+
            "\uffff\1\51",
            "\1\u0202\1\u0203\1\u0204\1\u0205\1\u0206\1\u0207\1\u0208",
            "\11\u021c\1\uffff\11\u021d\3\u021c\13\u021e\10\u021f\34\u00ea"+
            "\50\u00eb\1\u0209\1\u020b\1\u020c\1\u020d\1\u020e\1\u020f\1"+
            "\u0210\1\u0211\1\u0212\1\u0219\1\u0213\1\u0214\1\u0215\1\u0216"+
            "\1\u0217\1\u0218\1\u021a\1\u021b\1\u020a",
            "\1\u0220\1\u0221\1\u0222\1\u0223\1\u0224\1\u0225\1\u0226\1"+
            "\u0227\1\u0228\1\u0229\1\u022a\1\u022b\1\u0202\1\u0203\1\u0204"+
            "\1\u0205\1\u0206\1\u0207\1\u0208\5\uffff\1\51\32\uffff\2\51"+
            "\15\uffff\12\51\1\uffff\166\51",
            "\1\u0220\1\u0221\1\u0222\1\u0223\1\u0224\1\u0225\1\u0226\1"+
            "\u0227\1\u0228\1\u0229\1\u022a\1\u022b\1\u01fb\1\u01fc\1\u01fd"+
            "\1\u01fe\1\u01ff\1\u0200\1\u0201\5\uffff\1\51\32\uffff\2\51"+
            "\15\uffff\12\51\1\uffff\166\51",
            "\1\u0220\1\u0221\1\u0222\1\u0223\1\u0224\1\u0225\1\u0226\1"+
            "\u0227\1\u0228\1\u0229\1\u022a\1\u022b\1\u0202\1\u0203\1\u0204"+
            "\1\u0205\1\u0206\1\u0207\1\u0208\5\uffff\1\51\32\uffff\2\51"+
            "\15\uffff\12\51\1\uffff\151\51\1\u022c\1\u022d\1\u022e\12\51",
            "\1\u0155\1\u0154\1\u0153",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u0220\1\u0221\1\u0222\1\u0223\1\u0224\1\u0225\1\u0226\1"+
            "\u0227\1\u0228\1\u0229\1\u022a\1\u022b\1\u0202\1\u0203\1\u0204"+
            "\1\u0205\1\u0206\1\u0207\1\u0208\5\uffff\1\51\30\uffff\1\u022f"+
            "\1\uffff\2\51\15\uffff\12\51\1\uffff\144\51\1\u0230\1\u0231"+
            "\1\u0232\1\u0233\1\u0234\1\u0235\1\u0236\1\u0237\12\51",
            "\1\u015c\177\uffff\1\u015d\1\u015a\1\u0159\1\u0158\1\u0160"+
            "\1\u015b\1\u015e\1\u015f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u0238\u008f\uffff\1\u0239",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u014f",
            "\1\u0220\1\u0221\1\u0222\1\u0223\1\u0224\1\u0225\1\u0226\1"+
            "\u0227\1\u0228\1\u0229\1\u022a\1\u022b\1\u0202\1\u0203\1\u0204"+
            "\1\u0205\1\u0206\1\u0207\1\u0208\5\uffff\1\51\30\uffff\1\u023a"+
            "\1\uffff\2\51\15\uffff\12\51\1\uffff\166\51",
            "\1\u0163",
            "\1\u023b\u008f\uffff\1\u023c",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\111\30\uffff\1\u023d\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\111\30\uffff\1\u023d\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\111\30\uffff\1\u023d\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\111\30\uffff\1\u023d\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023f\30\uffff\1\u023e\174\uffff\1\u0242\1\u0241\1\u0240",
            "\1\u0244\20\uffff\1\u024d\7\uffff\1\u0243\167\uffff\1\u0249"+
            "\1\u0247\1\u0246\1\u024b\1\u0245\1\u0248\1\u024c\1\u024a",
            "\1\u024f\20\uffff\1\u0250\7\uffff\1\u024e",
            "\14\u022b\13\uffff\1\51\26\uffff\1\u022b\4\uffff\2\51\4\uffff"+
            "\1\u00c1\5\uffff\1\u022b\3\uffff\11\u018e\1\uffff\11\u018f\3"+
            "\u018e\13\u0190\10\u0135\104\51\1\u0136\1\u0138\1\u0139\1\u013a"+
            "\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\1\u0146\1\u0140\1\u0141"+
            "\1\u0142\1\u0143\1\u0144\1\u0145\1\u0147\1\u0148\1\u0137",
            "\1\111\30\uffff\1\u01cf\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\111\30\uffff\1\u01cf\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\111\30\uffff\1\u01cf\6\uffff\1\111\2\uffff\11\51\1\uffff"+
            "\143\51",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u022b\12\uffff\1\u0251\5\uffff\1\114\3\uffff\11\115\1\uffff"+
            "\11\116\3\115\13\117\10\120\104\uffff\23\u022b",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u0252",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u01a5",
            "\1\u00f0",
            "\1\u0253",
            "\1\u01a8",
            "\1\u00f0",
            "\1\u0254\5\uffff\1\50",
            "\1\u0254\5\uffff\1\50",
            "\1\u0254\5\uffff\1\50",
            "\1\u0254\5\uffff\1\50",
            "\1\u0254\5\uffff\1\50",
            "\1\u0255",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\u010e\5\uffff\1\u022b",
            "\1\56",
            "\1\56",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u0256",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u011d\5\uffff\1\50",
            "\1\u01ca",
            "\1\u011d\5\uffff\1\50",
            "\1\u0257",
            "\1\u01cd",
            "\1\u011d\5\uffff\1\50",
            "\14\u022b\7\uffff\1\50\3\uffff\1\51",
            "\14\u022b\13\uffff\1\51",
            "\14\u022b\13\uffff\1\51\u009e\uffff\1\u0258\1\u0259\1\u025a",
            "\1\u01d4\1\u01d3\1\u01d2",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\14\u022b\13\uffff\1\51\31\uffff\1\u025b\177\uffff\1\u025c"+
            "\1\u025d\1\u025e\1\u025f\1\u0260\1\u0261\1\u0262\1\u0263",
            "\1\u01de\177\uffff\1\u01d9\1\u01d8\1\u01d7\1\u01db\1\u01dc"+
            "\1\u01df\1\u01dd\1\u01da",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u0264\u008f\uffff\1\u0265",
            "\1\u01cf",
            "\14\u022b\13\uffff\1\51\31\uffff\1\u0266",
            "\1\u01e2",
            "\1\u0267\u008f\uffff\1\u0268",
            "\14\u022b\13\uffff\1\51\33\uffff\2\51\4\uffff\1\u00c1\11\uffff"+
            "\11\u01f7\1\uffff\11\u01f8\3\u01f7\13\u01f9\10\u01fa\104\51"+
            "\1\u01e4\1\u01e6\1\u01e7\1\u01e8\1\u01e9\1\u01ea\1\u01eb\1\u01ec"+
            "\1\u01ed\1\u01f4\1\u01ee\1\u01ef\1\u01f0\1\u01f1\1\u01f2\1\u01f3"+
            "\1\u01f5\1\u01f6\1\u01e5",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u026b\30\uffff\1\u026a\174\uffff\1\u026e\1\u026d\1\u026c",
            "\1\u0270\20\uffff\1\u0277\7\uffff\1\u026f\167\uffff\1\u0276"+
            "\1\u0272\1\u0274\1\u0273\1\u0271\1\u0279\1\u0278\1\u0275",
            "\1\u027b\20\uffff\1\u027c\7\uffff\1\u027a",
            "\1\u0269\11\uffff\11\51\1\uffff\143\51",
            "\1\u0269\11\uffff\11\51\1\uffff\143\51",
            "\1\u0269\11\uffff\11\51\1\uffff\143\51",
            "\1\u0269\11\uffff\11\51\1\uffff\143\51",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u027d\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u01e3\5\uffff\1\u014a\3\uffff\11\u022b\1\uffff\37\u022b"+
            "\104\uffff\23\u022b",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u027f\30\uffff\1\u027e\174\uffff\1\u0280\1\u0282\1\u0281",
            "\1\u0284\20\uffff\1\u0289\7\uffff\1\u0283\167\uffff\1\u028b"+
            "\1\u028c\1\u028d\1\u0285\1\u0286\1\u0288\1\u0287\1\u028a",
            "\1\u028f\20\uffff\1\u0290\7\uffff\1\u028e",
            "\1\u014d\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014d\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014d\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "\1\u014d\11\uffff\11\u0164\1\uffff\11\u0165\3\u0164\13\u0166"+
            "\10\u0167\34\u0168\50\u0169",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0292",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0291",
            "\1\u0239",
            "\1\u014f",
            "\1\u0293",
            "\1\u023c",
            "\1\u014f",
            "\1\u0294\1\u0295\1\u0296\1\u0297\1\u0298\1\u0299\1\u029a\1"+
            "\u029b\1\u029c\1\u029d\1\u029e\1\u029f\13\uffff\2\51",
            "\1\u0294\1\u0295\1\u0296\1\u0297\1\u0298\1\u0299\1\u029a\1"+
            "\u029b\1\u029c\1\u029d\1\u029e\1\u029f\13\uffff\2\51\u009d\uffff"+
            "\1\u02a0\1\u02a1\1\u02a2",
            "\1\u0242\1\u0241\1\u0240",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u0294\1\u0295\1\u0296\1\u0297\1\u0298\1\u0299\1\u029a\1"+
            "\u029b\1\u029c\1\u029d\1\u029e\1\u029f\13\uffff\2\51\30\uffff"+
            "\1\u02a3\177\uffff\1\u02a4\1\u02a5\1\u02a6\1\u02a7\1\u02a8\1"+
            "\u02a9\1\u02aa\1\u02ab",
            "\1\u024d\177\uffff\1\u0249\1\u0247\1\u0246\1\u024b\1\u0245"+
            "\1\u0248\1\u024c\1\u024a",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u02ac\u008f\uffff\1\u02ad",
            "\1\u0294\1\u0295\1\u0296\1\u0297\1\u0298\1\u0299\1\u029a\1"+
            "\u029b\1\u029c\1\u029d\1\u029e\1\u029f\13\uffff\2\51\30\uffff"+
            "\1\u02ae",
            "\1\u0250",
            "\1\u02af\u008f\uffff\1\u02b0",
            "\14\u022b\13\uffff\1\51\10\uffff\1\50\2\uffff\2\50\2\uffff"+
            "\5\50\1\uffff\1\50\1\u022b\1\uffff\3\50\2\51\1\50\3\uffff\1"+
            "\u00c1\5\uffff\1\u022b\2\uffff\1\50\11\u0132\1\50\11\u0133\3"+
            "\u0132\13\u0134\10\u0135\104\51\1\u0136\1\u0138\1\u0139\1\u013a"+
            "\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\1\u0146\1\u0140\1\u0141"+
            "\1\u0142\1\u0143\1\u0144\1\u0145\1\u0147\1\u0148\1\u0137",
            "\1\u02b1",
            "\1\u02b2",
            "\23\52\3\uffff\1\52\4\uffff\5\52\1\50\2\uffff\1\50\1\u02b8"+
            "\1\uffff\1\52\5\50\1\uffff\1\u02b3\2\52\2\50\1\u02b7\2\uffff"+
            "\1\50\4\52\1\uffff\3\52\1\uffff\1\52\2\uffff\1\50\11\u02b4\1"+
            "\50\11\u02b5\3\u02b4\13\u02b6\143\52",
            "\1\52\1\51\6\uffff\1\51\4\uffff\1\51\4\uffff\2\51\1\uffff\1"+
            "\u02b9\10\uffff\11\51\1\uffff\166\51",
            "\24\50\1\uffff\2\50\4\uffff\5\50\4\uffff\1\50\1\uffff\6\50"+
            "\1\uffff\3\50\2\uffff\1\50\3\uffff\4\50\1\uffff\3\50\1\uffff"+
            "\1\50\2\uffff\156\50\1\u02ba\26\50\u00af\uffff\1\50",
            "\24\50\1\uffff\2\50\4\uffff\5\50\4\uffff\1\50\1\uffff\6\50"+
            "\1\uffff\3\50\2\uffff\1\50\3\uffff\4\50\1\uffff\3\50\1\uffff"+
            "\1\50\2\uffff\156\50\1\u02bb\26\50\u00af\uffff\1\50",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u02bc",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u0265",
            "\1\u01cf",
            "\1\u02bd",
            "\1\u0268",
            "\1\u01cf",
            "\14\u022b\13\uffff\1\51",
            "\14\u022b\13\uffff\1\51\u009e\uffff\1\u02be\1\u02bf\1\u02c0",
            "\1\u026e\1\u026d\1\u026c",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\14\u022b\13\uffff\1\51\31\uffff\1\u02c1\177\uffff\1\u02c2"+
            "\1\u02c3\1\u02c4\1\u02c5\1\u02c6\1\u02c7\1\u02c8\1\u02c9",
            "\1\u0277\177\uffff\1\u0276\1\u0272\1\u0274\1\u0273\1\u0271"+
            "\1\u0279\1\u0278\1\u0275",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u02ca\u008f\uffff\1\u02cb",
            "\1\u0269",
            "\1\u0269",
            "\14\u022b\13\uffff\1\51\31\uffff\1\u02cc",
            "\1\u027c",
            "\1\u02cd\u008f\uffff\1\u02ce",
            "\1\u016a\1\u016b\1\u016c\1\u016d\1\u016e\1\u016f\1\u0170\1"+
            "\u0171\1\u0172\1\u0173\1\u0174\1\u0175\13\uffff\2\51\32\uffff"+
            "\2\51\4\uffff\1\u00c1\11\uffff\11\u02cf\1\uffff\11\u02d0\3\u02cf"+
            "\13\u02d1\10\u02d2\104\51\1\u02d3\1\u02d5\1\u02d6\1\u02d7\1"+
            "\u02d8\1\u02d9\1\u02da\1\u02db\1\u02dc\1\u02e3\1\u02dd\1\u02de"+
            "\1\u02df\1\u02e0\1\u02e1\1\u02e2\1\u02e4\1\u02e5\1\u02d4",
            "\1\u0202\1\u0203\1\u0204\1\u0205\1\u0206\1\u0207\1\u0208\u00a3"+
            "\uffff\1\u02e6\1\u02e7\1\u02e8",
            "\1\u0280\1\u0282\1\u0281",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u0202\1\u0203\1\u0204\1\u0205\1\u0206\1\u0207\1\u0208\36"+
            "\uffff\1\u02e9\177\uffff\1\u02ea\1\u02eb\1\u02ec\1\u02ed\1\u02ee"+
            "\1\u02ef\1\u02f0\1\u02f1",
            "\1\u0289\177\uffff\1\u028b\1\u028c\1\u028d\1\u0285\1\u0286"+
            "\1\u0288\1\u0287\1\u028a",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u02f2\u008f\uffff\1\u02f3",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u0202\1\u0203\1\u0204\1\u0205\1\u0206\1\u0207\1\u0208\36"+
            "\uffff\1\u02f4",
            "\1\u0290",
            "\1\u02f5\u008f\uffff\1\u02f6",
            "\1\u02f7\1\u02f8\1\u02f9\1\u02fa\1\u02fb\1\u02fc\1\u02fd\1"+
            "\u02fe\1\u02ff\1\u0300\1\u0301\1\u0302\1\u0202\1\u0203\1\u0204"+
            "\1\u0205\1\u0206\1\u0207\1\u0208\5\uffff\1\51\32\uffff\2\51"+
            "\15\uffff\12\51\1\uffff\166\51",
            "\1\u0303",
            "\1\u0304",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u0305\5\uffff\1\u0302",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u0306",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u023d",
            "\1\u02ad",
            "\1\u023d",
            "\1\u0307",
            "\1\u02b0",
            "\1\u023d",
            "\1\u00f0",
            "\1\u00f0",
            "\1\u0308",
            "\2\50\13\uffff\1\52\30\uffff\1\u0309\4\uffff\1\50\1\uffff\1"+
            "\52\2\uffff\11\52\1\uffff\143\52",
            "\2\50\13\uffff\1\52\30\uffff\1\u0309\4\uffff\1\50\1\uffff\1"+
            "\52\2\uffff\11\52\1\uffff\143\52",
            "\2\50\13\uffff\1\52\30\uffff\1\u0309\4\uffff\1\50\1\uffff\1"+
            "\52\2\uffff\11\52\1\uffff\143\52",
            "\1\u030a",
            "\1\u030b",
            "\1\u0254\5\uffff\1\50",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u030c",
            "\1\u030d",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u030e",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u0269",
            "\1\u02cb",
            "\1\u0269",
            "\1\u030f",
            "\1\u02ce",
            "\1\u0269",
            "\1\u0310\11\uffff\11\51\1\uffff\143\51",
            "\1\u0310\11\uffff\11\51\1\uffff\143\51",
            "\1\u0310\11\uffff\11\51\1\uffff\143\51",
            "\1\u0310\11\uffff\11\51\1\uffff\143\51",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0312\30\uffff\1\u0311\174\uffff\1\u0315\1\u0314\1\u0313",
            "\1\u0317\20\uffff\1\u0320\7\uffff\1\u0316\167\uffff\1\u031d"+
            "\1\u0319\1\u031b\1\u031e\1\u0318\1\u031a\1\u031f\1\u031c",
            "\1\u0322\20\uffff\1\u0323\7\uffff\1\u0321",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u0324",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u02f3",
            "\1\u014d",
            "\1\u0325",
            "\1\u02f6",
            "\1\u014d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u014f",
            "\1\u014f",
            "\1\u0302\2\uffff\2\u0302\2\uffff\5\u0302\1\uffff\1\u0302\2"+
            "\uffff\3\u0302\2\uffff\1\u0302\4\uffff\1\51\7\uffff\156\u0302",
            "\1\u0326",
            "\1\u0327",
            "\1\u0328\1\u0329\23\uffff\11\52\1\uffff\166\52",
            "\23\52\1\50\2\uffff\4\52\31\uffff\2\52\15\uffff\12\52\1\uffff"+
            "\166\52",
            "\7\52\21\uffff\1\50\2\uffff\5\50\1\uffff\1\50",
            "\1\50\2\uffff\5\50\1\uffff\1\50\2\52\2\uffff\1\50\17\uffff"+
            "\42\50",
            "\1\u01cf",
            "\1\u01cf",
            "\1\u032a",
            "\1\u032b",
            "\1\u032c\1\u032d\1\u032e\1\u032f\1\u0330\1\u0331\1\u0332\1"+
            "\u0333\1\u0334\1\u0335\1\u0336\1\u0337\13\uffff\2\51",
            "\1\u032c\1\u032d\1\u032e\1\u032f\1\u0330\1\u0331\1\u0332\1"+
            "\u0333\1\u0334\1\u0335\1\u0336\1\u0337\13\uffff\2\51\u009d\uffff"+
            "\1\u0338\1\u0339\1\u033a",
            "\1\u0315\1\u0314\1\u0313",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u032c\1\u032d\1\u032e\1\u032f\1\u0330\1\u0331\1\u0332\1"+
            "\u0333\1\u0334\1\u0335\1\u0336\1\u0337\13\uffff\2\51\30\uffff"+
            "\1\u033b\177\uffff\1\u033c\1\u033d\1\u033e\1\u033f\1\u0340\1"+
            "\u0341\1\u0342\1\u0343",
            "\1\u0320\177\uffff\1\u031d\1\u0319\1\u031b\1\u031e\1\u0318"+
            "\1\u031a\1\u031f\1\u031c",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0344\u008f\uffff\1\u0345",
            "\1\u032c\1\u032d\1\u032e\1\u032f\1\u0330\1\u0331\1\u0332\1"+
            "\u0333\1\u0334\1\u0335\1\u0336\1\u0337\13\uffff\2\51\30\uffff"+
            "\1\u0346",
            "\1\u0323",
            "\1\u0347\u008f\uffff\1\u0348",
            "\1\u0349",
            "\1\u034a",
            "\1\u023d",
            "\1\u023d",
            "\1\u034b",
            "\1\u034c",
            "\1\u0269",
            "\1\u0269",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u034d\5\uffff\1\u0302",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u034e",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0310",
            "\1\u0345",
            "\1\u0310",
            "\1\u034f",
            "\1\u0348",
            "\1\u0310",
            "\1\u014d",
            "\1\u014d",
            "\1\50\17\uffff\1\52\2\uffff\2\52",
            "\3\50\14\uffff\1\52\2\uffff\2\52\u0085\uffff\1\52",
            "\1\u0302\2\uffff\2\u0302\2\uffff\5\u0302\1\uffff\1\u0302\2"+
            "\uffff\3\u0302\2\uffff\1\u0302\4\uffff\1\51\7\uffff\42\u0302",
            "\1\u0350",
            "\1\u0351",
            "\1\u0310",
            "\1\u0310"
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "83:1: date : ( formal_date | relaxed_date | relative_date | explicit_relative_date | global_date_prefix WHITE_SPACE date -> ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA31_eotS =
        "\136\uffff";
    static final String DFA31_eofS =
        "\136\uffff";
    static final String DFA31_minS =
        "\1\5\1\uffff\14\0\6\uffff\65\0\1\uffff\12\0\12\uffff";
    static final String DFA31_maxS =
        "\1\u017b\1\uffff\14\0\6\uffff\65\0\1\uffff\12\0\12\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\1\14\uffff\3\3\70\uffff\1\11\12\uffff\1\2\1\4\1\14\1"+
        "\15\1\6\1\10\1\13\1\12\1\5\1\7";
    static final String DFA31_specialS =
        "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\6\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
        "\1\77\1\100\1\101\1\uffff\1\102\1\103\1\104\1\105\1\106\1\107\1"+
        "\110\1\111\1\112\1\113\12\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\61"+
            "\1\62\1\63\1\64\1\65\1\66\1\67\1\121\1\uffff\1\122\1\110\3\20"+
            "\1\uffff\1\73\1\75\1\76\1\77\1\100\1\uffff\1\20\2\uffff\1\105"+
            "\1\uffff\1\26\1\117\1\114\1\115\1\120\1\116\1\111\1\27\1\16"+
            "\1\17\2\uffff\1\1\3\uffff\1\74\1\25\1\24\1\71\1\uffff\1\106"+
            "\1\107\1\72\1\uffff\1\70\2\uffff\1\112\11\53\1\113\11\54\3\53"+
            "\13\55\10\56\34\57\50\60\1\30\1\32\1\33\1\34\1\35\1\36\1\37"+
            "\1\40\1\41\1\50\1\42\1\43\1\44\1\45\1\46\1\47\1\51\1\52\1\31"+
            "\1\101\1\102\1\103\1\104\u00af\uffff\1\123",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "92:1: date_time_alternative : ( CE WHITE_SPACE this_suffix -> ^( DATE_TIME_ALTERNATIVE this_suffix IS_INTERVAL ) | ( relaxed_month WHITE_SPACE ( relaxed_year | SUIVANT ) )=> relaxed_month WHITE_SPACE ( relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month ^( DAY_OF_MONTH INT[\"1\"] ) relaxed_year ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ^( EXPLICIT_SEEK relaxed_year ) ) ) IS_INTERVAL ) | SUIVANT -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"1\"] ) ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_month\"] INT[\"1\"] relaxed_month ) ^( EXPLICIT_SEEK ^( DAY_OF_MONTH INT[\"31\"] ) ) ) ) IS_INTERVAL ) ) | ( ( LE | LA ) WHITE_SPACE )? relative_date_interval -> ^( DATE_TIME_ALTERNATIVE relative_date_interval IS_INTERVAL ) | ( date ( conjunction | interval_conjunction ) global_date_prefix )=> date ( conjunction | interval_conjunction ) global_date_prefix ( date_time_separator explicit_time )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME date ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK global_date_prefix date ) ( explicit_time )? ) ) ( interval_conjunction )? ) | ( alternative_day_of_week_list )=> alternative_day_of_week_list -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_week_list ) | ( alternative_day_of_month_list )=> alternative_day_of_month_list -> ^( DATE_TIME_ALTERNATIVE alternative_day_of_month_list ) | ( ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction )=> ( CE WHITE_SPACE )? day_of_week ( conjunction | interval_conjunction ) alternative_direction ( date_time_separator explicit_time )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK alternative_direction day_of_week ) ) ( explicit_time )? ) ( interval_conjunction )? ) | ( explicit_day_of_year_part ( conjunction | interval_conjunction ) explicit_day_of_year_part WHITE_SPACE relaxed_year )=>first= explicit_day_of_year_part ( conjunction | interval_conjunction ) second= explicit_day_of_year_part WHITE_SPACE relaxed_year -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $first) ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) $second) ) ( interval_conjunction )? ) | ( PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE )=> PENDANT WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) IS_INTERVAL ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) IS_INTERVAL ) ) | ( spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE )=> spelled_or_int_optional_prefix WHITE_SPACE ( DERNIER | PASSE ) WHITE_SPACE ( relative_date_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_date_span ) ) ) ) | relative_time_span -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] INT[\"0\"] SPAN[\"day\"] ) ) ) ^( DATE_TIME ^( RELATIVE_TIME ^( SEEK DIRECTION[\"<\"] SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_time_span ) ) ) ) ) | ( ( relaxed_day_of_week )? relaxed_day_of_month interval_conjunction relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? )=> ( relaxed_day_of_week )? premier= relaxed_day_of_month interval_conjunction deuxieme= relaxed_day_of_month WHITE_SPACE relaxed_month ( WHITE_SPACE relaxed_year )? -> ^( DATE_TIME_ALTERNATIVE ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $premier ( relaxed_year )? ) ) ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month $deuxieme ( relaxed_year )? ) ) IS_INTERVAL ) | ( date_time ( conjunction | interval_conjunction ) date_time )=> date_time ( conjunction | interval_conjunction ) date_time -> ^( DATE_TIME_ALTERNATIVE date_time date_time ( interval_conjunction )? ) | date_time -> ^( DATE_TIME_ALTERNATIVE date_time ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_0 = input.LA(1);

                         
                        int index31_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA31_0==CE) ) {s = 1;}

                        else if ( (LA31_0==JANVIER) ) {s = 2;}

                        else if ( (LA31_0==FEVRIER) ) {s = 3;}

                        else if ( (LA31_0==MARS) ) {s = 4;}

                        else if ( (LA31_0==AVRIL) ) {s = 5;}

                        else if ( (LA31_0==MAI) ) {s = 6;}

                        else if ( (LA31_0==JUIN) ) {s = 7;}

                        else if ( (LA31_0==JUILLET) ) {s = 8;}

                        else if ( (LA31_0==AOUT) ) {s = 9;}

                        else if ( (LA31_0==SEPTEMBRE) ) {s = 10;}

                        else if ( (LA31_0==OCTOBRE) ) {s = 11;}

                        else if ( (LA31_0==NOVEMBRE) ) {s = 12;}

                        else if ( (LA31_0==DECEMBRE) ) {s = 13;}

                        else if ( (LA31_0==LE) ) {s = 14;}

                        else if ( (LA31_0==LA) ) {s = 15;}

                        else if ( ((LA31_0>=SEMAINE && LA31_0<=ANNEE)||LA31_0==WEEKEND) ) {s = 16;}

                        else if ( (LA31_0==DERNIER) ) {s = 20;}

                        else if ( (LA31_0==SUIVANT) ) {s = 21;}

                        else if ( (LA31_0==PASSE) ) {s = 22;}

                        else if ( (LA31_0==DANS) ) {s = 23;}

                        else if ( (LA31_0==UN) ) {s = 24;}

                        else if ( (LA31_0==PREMIER) ) {s = 25;}

                        else if ( (LA31_0==DEUX) ) {s = 26;}

                        else if ( (LA31_0==TROIS) ) {s = 27;}

                        else if ( (LA31_0==QUATRE) ) {s = 28;}

                        else if ( (LA31_0==CINQ) ) {s = 29;}

                        else if ( (LA31_0==SIX) ) {s = 30;}

                        else if ( (LA31_0==SEPT) ) {s = 31;}

                        else if ( (LA31_0==HUIT) ) {s = 32;}

                        else if ( (LA31_0==NEUF) ) {s = 33;}

                        else if ( (LA31_0==ONZE) ) {s = 34;}

                        else if ( (LA31_0==DOUZE) ) {s = 35;}

                        else if ( (LA31_0==TREIZE) ) {s = 36;}

                        else if ( (LA31_0==QUATORZE) ) {s = 37;}

                        else if ( (LA31_0==QUINZE) ) {s = 38;}

                        else if ( (LA31_0==SEIZE) ) {s = 39;}

                        else if ( (LA31_0==DIX) ) {s = 40;}

                        else if ( (LA31_0==VINGT) ) {s = 41;}

                        else if ( (LA31_0==TRENTE) ) {s = 42;}

                        else if ( ((LA31_0>=INT_01 && LA31_0<=INT_09)||(LA31_0>=INT_10 && LA31_0<=INT_12)) ) {s = 43;}

                        else if ( ((LA31_0>=INT_1 && LA31_0<=INT_9)) ) {s = 44;}

                        else if ( ((LA31_0>=INT_13 && LA31_0<=INT_23)) ) {s = 45;}

                        else if ( ((LA31_0>=INT_24 && LA31_0<=INT_31)) ) {s = 46;}

                        else if ( ((LA31_0>=INT_32 && LA31_0<=INT_59)) ) {s = 47;}

                        else if ( ((LA31_0>=INT_60 && LA31_0<=INT_99)) ) {s = 48;}

                        else if ( (LA31_0==DIMANCHE) ) {s = 49;}

                        else if ( (LA31_0==LUNDI) ) {s = 50;}

                        else if ( (LA31_0==MARDI) ) {s = 51;}

                        else if ( (LA31_0==MERCREDI) ) {s = 52;}

                        else if ( (LA31_0==JEUDI) ) {s = 53;}

                        else if ( (LA31_0==VENDREDI) ) {s = 54;}

                        else if ( (LA31_0==SAMEDI) ) {s = 55;}

                        else if ( (LA31_0==COMMA) ) {s = 56;}

                        else if ( (LA31_0==WHITE_SPACE) ) {s = 57;}

                        else if ( (LA31_0==IL_Y_A) ) {s = 58;}

                        else if ( (LA31_0==AUJOURD_HUI) ) {s = 59;}

                        else if ( (LA31_0==MAINTENANT) ) {s = 60;}

                        else if ( (LA31_0==DEMAIN) ) {s = 61;}

                        else if ( (LA31_0==APRES_DEMAIN) ) {s = 62;}

                        else if ( (LA31_0==HIER) ) {s = 63;}

                        else if ( (LA31_0==AVANT_HIER) ) {s = 64;}

                        else if ( (LA31_0==DEUXIEME) ) {s = 65;}

                        else if ( (LA31_0==TROISIEME) ) {s = 66;}

                        else if ( (LA31_0==QUATRIEME) ) {s = 67;}

                        else if ( (LA31_0==CINQUIEME) ) {s = 68;}

                        else if ( (LA31_0==A) ) {s = 69;}

                        else if ( (LA31_0==DEBUT) ) {s = 70;}

                        else if ( (LA31_0==FIN) ) {s = 71;}

                        else if ( (LA31_0==JOUR) ) {s = 72;}

                        else if ( (LA31_0==PENDANT) && (synpred9_DateParser())) {s = 73;}

                        else if ( (LA31_0==INT_00) ) {s = 74;}

                        else if ( (LA31_0==INT_0) ) {s = 75;}

                        else if ( (LA31_0==APRES_MIDI) ) {s = 76;}

                        else if ( (LA31_0==MATIN) ) {s = 77;}

                        else if ( (LA31_0==NUIT) ) {s = 78;}

                        else if ( (LA31_0==MINUIT) ) {s = 79;}

                        else if ( (LA31_0==SOIR) ) {s = 80;}

                        else if ( (LA31_0==HEURE) ) {s = 81;}

                        else if ( (LA31_0==MINUTE) ) {s = 82;}

                        else if ( (LA31_0==SECOND) ) {s = 83;}

                         
                        input.seek(index31_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_DateParser()) ) {s = 84;}

                        else if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_22 = input.LA(1);

                         
                        int index31_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_23 = input.LA(1);

                         
                        int index31_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_24 = input.LA(1);

                         
                        int index31_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_24);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_25 = input.LA(1);

                         
                        int index31_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_26 = input.LA(1);

                         
                        int index31_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_26);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA31_27 = input.LA(1);

                         
                        int index31_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA31_28 = input.LA(1);

                         
                        int index31_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_28);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA31_29 = input.LA(1);

                         
                        int index31_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA31_30 = input.LA(1);

                         
                        int index31_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_30);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA31_31 = input.LA(1);

                         
                        int index31_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_31);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA31_32 = input.LA(1);

                         
                        int index31_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_32);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA31_33 = input.LA(1);

                         
                        int index31_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_33);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA31_34 = input.LA(1);

                         
                        int index31_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_34);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA31_35 = input.LA(1);

                         
                        int index31_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_35);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA31_36 = input.LA(1);

                         
                        int index31_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_36);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA31_37 = input.LA(1);

                         
                        int index31_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_37);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA31_38 = input.LA(1);

                         
                        int index31_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_38);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA31_39 = input.LA(1);

                         
                        int index31_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_39);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA31_40 = input.LA(1);

                         
                        int index31_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_40);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA31_41 = input.LA(1);

                         
                        int index31_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_41);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA31_42 = input.LA(1);

                         
                        int index31_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_42);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA31_43 = input.LA(1);

                         
                        int index31_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_43);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA31_44 = input.LA(1);

                         
                        int index31_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_44);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA31_45 = input.LA(1);

                         
                        int index31_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_45);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA31_46 = input.LA(1);

                         
                        int index31_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_46);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA31_47 = input.LA(1);

                         
                        int index31_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_47);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA31_48 = input.LA(1);

                         
                        int index31_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred10_DateParser()) ) {s = 91;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_48);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA31_49 = input.LA(1);

                         
                        int index31_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_49);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA31_50 = input.LA(1);

                         
                        int index31_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_50);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA31_51 = input.LA(1);

                         
                        int index31_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA31_52 = input.LA(1);

                         
                        int index31_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_52);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA31_53 = input.LA(1);

                         
                        int index31_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_53);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA31_54 = input.LA(1);

                         
                        int index31_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_54);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA31_55 = input.LA(1);

                         
                        int index31_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred5_DateParser()) ) {s = 92;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred7_DateParser()) ) {s = 93;}

                        else if ( (synpred11_DateParser()) ) {s = 90;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_55);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA31_56 = input.LA(1);

                         
                        int index31_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_56);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA31_57 = input.LA(1);

                         
                        int index31_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_57);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA31_58 = input.LA(1);

                         
                        int index31_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_58);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA31_59 = input.LA(1);

                         
                        int index31_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_59);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA31_60 = input.LA(1);

                         
                        int index31_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_60);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA31_61 = input.LA(1);

                         
                        int index31_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_61);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA31_62 = input.LA(1);

                         
                        int index31_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_62);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA31_63 = input.LA(1);

                         
                        int index31_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_63);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA31_64 = input.LA(1);

                         
                        int index31_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_64);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA31_65 = input.LA(1);

                         
                        int index31_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_65);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA31_66 = input.LA(1);

                         
                        int index31_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_66);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA31_67 = input.LA(1);

                         
                        int index31_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_67);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA31_68 = input.LA(1);

                         
                        int index31_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_68);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA31_69 = input.LA(1);

                         
                        int index31_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_69);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA31_70 = input.LA(1);

                         
                        int index31_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_70);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA31_71 = input.LA(1);

                         
                        int index31_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred6_DateParser()) ) {s = 88;}

                        else if ( (synpred8_DateParser()) ) {s = 89;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_71);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA31_72 = input.LA(1);

                         
                        int index31_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_DateParser()) ) {s = 85;}

                        else if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_72);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA31_74 = input.LA(1);

                         
                        int index31_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_74);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA31_75 = input.LA(1);

                         
                        int index31_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_75);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA31_76 = input.LA(1);

                         
                        int index31_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_76);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA31_77 = input.LA(1);

                         
                        int index31_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_77);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA31_78 = input.LA(1);

                         
                        int index31_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_78);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA31_79 = input.LA(1);

                         
                        int index31_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_79);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA31_80 = input.LA(1);

                         
                        int index31_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_80);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA31_81 = input.LA(1);

                         
                        int index31_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_81);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA31_82 = input.LA(1);

                         
                        int index31_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_82);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA31_83 = input.LA(1);

                         
                        int index31_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_DateParser()) ) {s = 86;}

                        else if ( (true) ) {s = 87;}

                         
                        input.seek(index31_83);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA28_eotS =
        "\103\uffff";
    static final String DFA28_eofS =
        "\103\uffff";
    static final String DFA28_minS =
        "\1\21\1\uffff\20\76\3\45\4\76\1\21\1\uffff\1\21\1\u00bb\3\76\1\21"+
        "\1\66\6\76\1\45\2\76\1\21\1\66\1\45\14\76\1\u00b5\2\76\1\u00b5\1"+
        "\76\2\u00b5\2\76";
    static final String DFA28_maxS =
        "\1\u00c7\1\uffff\20\104\2\u00bd\1\104\4\u00b4\1\72\1\uffff\2\u00bd"+
        "\3\104\2\u00bd\6\104\1\u00b5\2\104\1\72\1\66\1\u00b5\3\104\1\76"+
        "\10\104\1\u00b5\1\104\1\76\1\u00b5\1\104\2\u00b5\2\104";
    static final String DFA28_acceptS =
        "\1\uffff\1\1\30\uffff\1\2\50\uffff";
    static final String DFA28_specialS =
        "\103\uffff}>";
    static final String[] DFA28_transitionS = {
            "\7\1\23\uffff\1\1\6\uffff\1\1\4\uffff\1\1\4\uffff\2\1\12\uffff"+
            "\11\25\1\uffff\11\26\3\25\13\27\10\30\104\1\1\2\1\4\1\5\1\6"+
            "\1\7\1\10\1\11\1\12\1\13\1\22\1\14\1\15\1\16\1\17\1\20\1\21"+
            "\1\23\1\24\1\3",
            "",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\34\30\uffff\1\33\5\uffff\1\32\166\uffff\1\35\1\37\1\36",
            "\1\41\20\uffff\1\50\7\uffff\1\40\5\uffff\1\32\161\uffff\1\44"+
            "\1\43\1\51\1\42\1\47\1\52\1\45\1\46",
            "\1\54\20\uffff\1\55\7\uffff\1\53\5\uffff\1\32",
            "\1\31\5\uffff\1\32\3\uffff\11\1\1\uffff\143\1",
            "\1\31\5\uffff\1\32\3\uffff\11\1\1\uffff\143\1",
            "\1\31\5\uffff\1\32\3\uffff\11\1\1\uffff\143\1",
            "\1\31\5\uffff\1\32\3\uffff\11\1\1\uffff\143\1",
            "\7\1\15\uffff\1\32\24\uffff\1\32",
            "",
            "\7\1\15\uffff\1\32\24\uffff\1\32\u0080\uffff\1\56\1\57\1\60",
            "\1\35\1\37\1\36",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\7\1\15\uffff\1\32\20\uffff\1\61\3\uffff\1\32\173\uffff\1\62"+
            "\1\63\1\64\1\65\1\66\1\67\1\70\1\71",
            "\1\50\177\uffff\1\44\1\43\1\51\1\42\1\47\1\52\1\45\1\46",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\72\u008f\uffff\1\73",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\7\1\15\uffff\1\32\20\uffff\1\74\3\uffff\1\32",
            "\1\55",
            "\1\75\u008f\uffff\1\76",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\77",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32",
            "\1\73",
            "\1\31\5\uffff\1\32",
            "\1\100",
            "\1\76",
            "\1\31\5\uffff\1\32",
            "\1\101",
            "\1\102",
            "\1\31\5\uffff\1\32",
            "\1\31\5\uffff\1\32"
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "177:4: ( relaxed_day_of_week )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA44_eotS =
        "\u0194\uffff";
    static final String DFA44_eofS =
        "\u00f9\uffff\15\u012a\107\uffff\3\u0164\3\uffff\1\u0164\100\uffff";
    static final String DFA44_minS =
        "\1\21\1\76\1\uffff\1\76\27\5\11\76\1\21\1\64\1\21\1\76\2\21\1\u00bb"+
        "\3\5\1\21\1\66\6\5\1\45\2\5\1\21\1\66\1\45\1\75\1\21\1\64\1\75\1"+
        "\65\13\76\1\65\3\5\1\76\10\5\1\u00b5\1\5\1\76\1\u00b5\1\5\25\76"+
        "\3\45\12\76\1\65\1\76\1\51\1\64\2\51\1\21\2\65\1\u00bb\3\76\1\65"+
        "\1\66\2\76\1\45\6\76\1\65\1\66\1\45\1\65\1\33\1\64\2\76\1\65\25"+
        "\76\3\45\13\76\2\5\14\76\1\u00b5\2\76\1\u00b5\2\76\1\64\1\75\3\5"+
        "\1\u00bb\3\76\1\5\1\66\3\76\1\45\5\76\1\5\1\66\1\45\2\21\1\64\1"+
        "\75\2\5\2\51\44\76\1\u00b5\2\76\1\u00b5\11\76\1\50\2\uffff\3\5\2"+
        "\u00b5\1\33\4\5\4\uffff\1\76\23\uffff\3\30\3\uffff\1\76\10\uffff"+
        "\7\76\1\63\3\uffff\1\30\10\uffff\1\50\1\5\23\uffff\1\76\3\0\1\76"+
        "\2\0\1\76\1\63\1\51\2\76\1\uffff\1\55\1\56";
    static final String DFA44_maxS =
        "\1\u00cb\1\76\1\uffff\1\76\20\104\2\u00bd\1\104\4\u00b4\7\76\2\104"+
        "\1\33\1\u00c7\1\71\1\76\1\71\2\u00bd\3\104\2\u00bd\6\104\1\u00b5"+
        "\2\104\1\71\1\66\1\u00b5\1\u00cb\1\27\1\64\1\101\1\71\1\104\7\u00c7"+
        "\1\76\2\104\1\66\3\104\1\76\10\104\1\u00b5\1\104\1\76\1\u00b5\2"+
        "\104\1\76\23\104\2\u00bd\10\104\1\76\2\104\2\u00c7\1\u00cb\1\66"+
        "\2\u00cb\2\71\2\u00bd\3\104\2\u00bd\2\104\1\u00b5\6\104\1\71\1\66"+
        "\1\u00b5\1\71\1\33\1\66\2\104\1\u00c7\25\76\2\u00bd\13\76\6\104"+
        "\1\76\10\104\1\u00b5\1\104\1\76\1\u00b5\2\104\1\66\1\u00cb\2\71"+
        "\2\u00bd\3\76\2\u00bd\3\76\1\u00b5\5\76\1\71\1\66\1\u00b5\1\27\1"+
        "\33\1\64\1\101\2\71\2\u00cb\1\104\1\76\15\104\25\76\1\u00b5\2\76"+
        "\1\u00b5\5\76\4\104\1\u00c7\2\uffff\1\35\1\64\1\71\2\u00b5\1\33"+
        "\1\64\2\66\1\71\4\uffff\1\76\23\uffff\3\u00b4\3\uffff\1\104\10\uffff"+
        "\6\76\1\104\1\u00c7\3\uffff\1\150\10\uffff\1\150\1\64\23\uffff\1"+
        "\76\3\0\1\76\2\0\1\76\1\64\1\150\2\76\1\uffff\1\55\1\60";
    static final String DFA44_acceptS =
        "\2\uffff\1\1\u0126\uffff\2\2\12\uffff\1\2\3\3\1\uffff\23\3\3\uffff"+
        "\3\3\1\uffff\10\2\10\uffff\1\3\2\2\1\uffff\1\2\7\3\2\uffff\2\2\21"+
        "\3\14\uffff\1\3\2\uffff";
    static final String DFA44_specialS =
        "\u00f9\uffff\1\15\1\14\1\17\1\16\1\21\1\20\1\22\1\23\1\24\1\25\1"+
        "\26\1\27\1\32\42\uffff\1\6\44\uffff\1\3\1\2\1\4\3\uffff\1\30\17"+
        "\uffff\1\1\3\uffff\1\0\10\uffff\1\31\25\uffff\1\13\1\12\1\11\1\uffff"+
        "\1\10\1\5\2\uffff\1\7\5\uffff}>";
    static final String[] DFA44_transitionS = {
            "\7\2\21\uffff\1\40\1\uffff\1\2\6\uffff\1\3\1\33\1\41\2\uffff"+
            "\1\2\4\uffff\1\2\1\1\2\uffff\1\42\1\43\6\uffff\11\27\1\uffff"+
            "\11\30\3\27\13\31\10\32\104\2\1\4\1\6\1\7\1\10\1\11\1\12\1\13"+
            "\1\14\1\15\1\24\1\16\1\17\1\20\1\21\1\22\1\23\1\25\1\26\1\5"+
            "\1\34\1\35\1\36\1\37",
            "\1\44",
            "",
            "\1\45",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\50\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\24\uffff\1\52\30\uffff\1\51\5\uffff\1\47\166\uffff\1"+
            "\53\1\54\1\55",
            "\14\2\24\uffff\1\57\20\uffff\1\66\7\uffff\1\56\5\uffff\1\47"+
            "\161\uffff\1\67\1\70\1\65\1\63\1\60\1\61\1\64\1\62",
            "\14\2\24\uffff\1\72\20\uffff\1\73\7\uffff\1\71\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47\3\uffff\11\2\1\uffff\143\2",
            "\14\2\55\uffff\1\46\5\uffff\1\47\3\uffff\11\2\1\uffff\143\2",
            "\14\2\55\uffff\1\46\5\uffff\1\47\3\uffff\11\2\1\uffff\143\2",
            "\14\2\55\uffff\1\46\5\uffff\1\47\3\uffff\11\2\1\uffff\143\2",
            "\1\74",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\76",
            "\1\77",
            "\1\100\5\uffff\1\47",
            "\1\100\5\uffff\1\47",
            "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\3\uffff\1\101",
            "\1\41\23\uffff\11\2\1\uffff\166\2",
            "\7\2\35\uffff\2\111\1\uffff\1\113\1\112",
            "\1\114",
            "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\35\uffff\2\111\1"+
            "\uffff\1\113\1\112",
            "\7\2\35\uffff\2\111\1\uffff\1\113\1\112\u0081\uffff\1\115\1"+
            "\116\1\117",
            "\1\53\1\54\1\55",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\7\2\35\uffff\1\111\1\120\1\uffff\1\113\1\112\174\uffff\1\121"+
            "\1\122\1\123\1\124\1\125\1\126\1\127\1\130",
            "\1\66\177\uffff\1\67\1\70\1\65\1\63\1\60\1\61\1\64\1\62",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\1\131\u008f\uffff\1\132",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\7\2\35\uffff\1\111\1\133\1\uffff\1\113\1\112",
            "\1\73",
            "\1\134\u008f\uffff\1\135",
            "\1\137\12\uffff\11\140\1\uffff\11\141\3\140\13\142\10\143\104"+
            "\uffff\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153\1\154"+
            "\1\163\1\155\1\156\1\157\1\160\1\161\1\162\1\164\1\165\1\136"+
            "\1\34\1\35\1\36\1\37",
            "\1\166\1\167\1\170\1\171\1\172\1\173\1\174",
            "\1\41",
            "\1\175\2\uffff\1\42\1\43",
            "\2\111\1\uffff\1\177\1\176",
            "\1\100\5\uffff\1\47",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0080\5\uffff\1\u0081\3\uffff\11\2\1\uffff\37\2\104\uffff"+
            "\23\2",
            "\1\u0082",
            "\1\114\5\uffff\1\47",
            "\1\u0083\5\uffff\1\47",
            "\2\111",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\1\u0084",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\1\132",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\1\u0085",
            "\1\135",
            "\14\2\55\uffff\1\46\5\uffff\1\47",
            "\1\u0086\5\uffff\1\47",
            "\1\75",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0089\30\uffff\1\u0088\5\uffff\1\47\166\uffff\1\u008a\1"+
            "\u008c\1\u008b",
            "\1\u008e\20\uffff\1\u0091\7\uffff\1\u008d\5\uffff\1\47\161"+
            "\uffff\1\u0090\1\u0097\1\u0096\1\u0093\1\u008f\1\u0094\1\u0095"+
            "\1\u0092",
            "\1\u0099\20\uffff\1\u009a\7\uffff\1\u0098\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009b\5\uffff\1\47",
            "\1\u009c",
            "\1\114\5\uffff\1\47",
            "\1\u009d\5\uffff\1\47",
            "\2\111\1\uffff\1\u009f\1\u009e\16\uffff\11\2\1\uffff\37\2\104"+
            "\uffff\23\2",
            "\1\u00a0\11\uffff\11\2\1\uffff\37\2\104\uffff\23\2",
            "\1\u00bf\10\uffff\1\u00be\1\u00a1\1\u00c0\10\uffff\1\u00bd"+
            "\2\uffff\1\u00c1\1\u00c2\6\uffff\11\u00a2\1\uffff\11\u00a3\3"+
            "\u00a2\13\u00a4\10\u00a5\104\uffff\1\u00a6\1\u00a8\1\u00a9\1"+
            "\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b6\1\u00b0"+
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b7\1\u00b8\1\u00a7"+
            "\1\u00b9\1\u00ba\1\u00bb\1\u00bc",
            "\1\u00c3\2\111",
            "\1\u00bf\10\uffff\1\u00be\1\u00a1\1\u00c0\10\uffff\1\u00bd"+
            "\2\uffff\1\u00c1\1\u00c2\6\uffff\11\u00a2\1\uffff\11\u00a3\3"+
            "\u00a2\13\u00a4\10\u00a5\104\uffff\1\u00c4\1\u00a8\1\u00a9\1"+
            "\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b6\1\u00b0"+
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b7\1\u00b8\1\u00a7"+
            "\1\u00b9\1\u00ba\1\u00bb\1\u00bc",
            "\1\u00bf\10\uffff\1\u00be\1\u00a1\1\u00c0\10\uffff\1\u00bd"+
            "\2\uffff\1\u00c1\1\u00c2\6\uffff\11\u00a2\1\uffff\11\u00a3\3"+
            "\u00a2\13\u00a4\10\u00a5\104\uffff\1\u00c5\1\u00a8\1\u00a9\1"+
            "\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b6\1\u00b0"+
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b7\1\u00b8\1\u00a7"+
            "\1\u00b9\1\u00ba\1\u00bb\1\u00bc",
            "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\35\uffff\2\111\1"+
            "\uffff\1\113\1\112",
            "\2\111\1\uffff\1\113\1\112",
            "\2\111\1\uffff\1\113\1\112\u0081\uffff\1\u00c6\1\u00c7\1\u00c8",
            "\1\u008a\1\u008c\1\u008b",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\111\1\u00c9\1\uffff\1\113\1\112\174\uffff\1\u00ca\1\u00cb"+
            "\1\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\u00d1",
            "\1\u0091\177\uffff\1\u0090\1\u0097\1\u0096\1\u0093\1\u008f"+
            "\1\u0094\1\u0095\1\u0092",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u00d2\u008f\uffff\1\u00d3",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\111\1\u00d4\1\uffff\1\113\1\112",
            "\1\u009a",
            "\1\u00d5\u008f\uffff\1\u00d6",
            "\2\111\1\uffff\1\u009f\1\u009e",
            "\1\101",
            "\1\u00d7\2\111",
            "\1\114\5\uffff\1\47",
            "\1\u00d8\5\uffff\1\47",
            "\2\111\21\uffff\11\2\1\uffff\37\2\104\uffff\23\2",
            "\1\u00d9",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00db",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00dd\30\uffff\1\u00dc\174\uffff\1\u00de\1\u00df\1\u00e0",
            "\1\u00e2\20\uffff\1\u00e6\7\uffff\1\u00e1\167\uffff\1\u00e3"+
            "\1\u00eb\1\u00e4\1\u00e8\1\u00e9\1\u00e5\1\u00ea\1\u00e7",
            "\1\u00ed\20\uffff\1\u00ee\7\uffff\1\u00ec",
            "\1\u00ef",
            "\1\u00ef",
            "\1\u00ef",
            "\1\u00ef",
            "\1\u00f0",
            "\1\u00f1",
            "\1\u00f1",
            "\1\u00f2",
            "\1\u00f3",
            "\1\u00f3",
            "\1\114\5\uffff\1\47",
            "\14\2\55\uffff\1\u00f4\5\uffff\1\47",
            "\14\2\55\uffff\1\u00f4\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u00f5",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u0087\5\uffff\1\47",
            "\1\u00d3",
            "\1\u0087\5\uffff\1\47",
            "\1\u00f6",
            "\1\u00d6",
            "\1\u0087\5\uffff\1\47",
            "\1\114\5\uffff\1\47",
            "\1\u00f7\2\111",
            "\1\u00f8\12\uffff\11\u00a2\1\uffff\11\u00a3\3\u00a2\13\u00a4"+
            "\10\u00a5\104\uffff\1\u00a6\1\u00a8\1\u00a9\1\u00aa\1\u00ab"+
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b6\1\u00b0\1\u00b1\1\u00b2"+
            "\1\u00b3\1\u00b4\1\u00b5\1\u00b7\1\u00b8\1\u00a7\1\u00b9\1\u00ba"+
            "\1\u00bb\1\u00bc",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\32\uffff"+
            "\1\u0107\1\u0106",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\1\u0108\1\u0109\1\u010a"+
            "\1\u010b\1\u010c\1\u010d\1\u010e\5\uffff\1\u0105\32\uffff\1"+
            "\u0107\1\u0106",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\32\uffff"+
            "\1\u0107\1\u0106\u0081\uffff\1\u010f\1\u0110\1\u0111",
            "\1\u00de\1\u00df\1\u00e0",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\30\uffff"+
            "\1\u0112\1\uffff\1\u0107\1\u0106\174\uffff\1\u0113\1\u0114\1"+
            "\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a",
            "\1\u00e6\177\uffff\1\u00e3\1\u00eb\1\u00e4\1\u00e8\1\u00e9"+
            "\1\u00e5\1\u00ea\1\u00e7",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u011b\u008f\uffff\1\u011c",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\30\uffff"+
            "\1\u011d\1\uffff\1\u0107\1\u0106",
            "\1\u00ee",
            "\1\u011e\u008f\uffff\1\u011f",
            "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e",
            "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\3"+
            "\uffff\1\u0120",
            "\1\u00c0",
            "\1\u0121\2\uffff\1\u00c1\1\u00c2",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\32\uffff"+
            "\1\u0123\1\u0122",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\7\2\5\uffff\1\u0105\27"+
            "\uffff\2\111\1\uffff\1\u0125\1\u0124",
            "\1\u00bf\10\uffff\1\u00be\1\u00a1\1\u00c0\10\uffff\1\u00bd"+
            "\2\uffff\1\u00c1\1\u00c2\6\uffff\11\u00a2\1\uffff\11\u00a3\3"+
            "\u00a2\13\u00a4\10\u00a5\104\uffff\1\u0126\1\u00a8\1\u00a9\1"+
            "\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b6\1\u00b0"+
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b7\1\u00b8\1\u00a7"+
            "\1\u00b9\1\u00ba\1\u00bb\1\u00bc",
            "\1\u00bf\10\uffff\1\u00be\1\u00a1\1\u00c0\10\uffff\1\u00bd"+
            "\2\uffff\1\u00c1\1\u00c2\6\uffff\11\u00a2\1\uffff\11\u00a3\3"+
            "\u00a2\13\u00a4\10\u00a5\104\uffff\1\u0127\1\u00a8\1\u00a9\1"+
            "\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b6\1\u00b0"+
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b7\1\u00b8\1\u00a7"+
            "\1\u00b9\1\u00ba\1\u00bb\1\u00bc",
            "\1\114\5\uffff\1\47",
            "\1\u00ef",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u0128\5\uffff\1\u0129",
            "\1\u012b",
            "\1\u012c",
            "\1\u012d",
            "\1\u012d",
            "\1\u012d",
            "\1\u012d",
            "\1\u012d",
            "\1\u012d",
            "\1\u012d",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u012e",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u00da",
            "\1\u011c",
            "\1\u00da",
            "\1\u012f",
            "\1\u011f",
            "\1\u00da",
            "\1\u00f3",
            "\1\u0130",
            "\1\u012b",
            "\1\u0131",
            "\1\u0132\5\uffff\1\47",
            "\1\u0133\5\uffff\1\47",
            "\1\u0134\5\uffff\1\47",
            "\1\u0134\5\uffff\1\47",
            "\1\u0135\1\u0154\1\uffff\1\u0138\1\u015a\1\u0157\1\u0158\1"+
            "\u015b\1\u0159\1\uffff\1\u0139\4\uffff\1\u0153\4\uffff\1\u0137"+
            "\1\u0136\11\uffff\1\u0155\11\u014d\1\u0156\11\u014e\3\u014d"+
            "\13\u014f\10\u0150\34\u0151\50\u0152\1\u013a\1\u013c\1\u013d"+
            "\1\u013e\1\u013f\1\u0140\1\u0141\1\u0142\1\u0143\1\u014a\1\u0144"+
            "\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149\1\u014b\1\u014c\1\u013b",
            "",
            "",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\26\uffff"+
            "\1\u015c",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\32\uffff"+
            "\1\u015e\1\u015d",
            "\1\u015f",
            "\1\u0160",
            "\1\u0120",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\26\uffff"+
            "\1\u0161",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\27\uffff"+
            "\2\111",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\26\uffff"+
            "\1\u0162\2\111",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\27\uffff"+
            "\2\111\1\uffff\1\u0125\1\u0124",
            "",
            "",
            "",
            "",
            "\1\u0163",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0168\1\u0166\44\uffff\1\u0167\4\uffff\1\u0165\1\u016f\3"+
            "\uffff\11\u0169\1\uffff\11\u016a\3\u0169\13\u016b\10\u016c\34"+
            "\u016d\50\u016e",
            "\1\u0168\1\u0166\44\uffff\1\u0167\4\uffff\1\u0165\1\u016f\3"+
            "\uffff\11\u0169\1\uffff\11\u016a\3\u0169\13\u016b\10\u016c\34"+
            "\u016d\50\u016e",
            "\1\u0168\1\u0166\44\uffff\1\u0167\4\uffff\1\u0165\1\u016f\3"+
            "\uffff\11\u0169\1\uffff\11\u016a\3\u0169\13\u016b\10\u016c\34"+
            "\u016d\50\u016e",
            "",
            "",
            "",
            "\1\u0170\5\uffff\1\u016f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u012b",
            "\1\u012b",
            "\1\u0171",
            "\1\u00da",
            "\1\u00da",
            "\1\u012b",
            "\1\u0132\5\uffff\1\47",
            "\1\u0172\1\u0173\23\uffff\11\u0174\1\uffff\11\u0175\3\u0174"+
            "\13\u0176\10\u0150\34\u0151\50\u0152\1\u013a\1\u013c\1\u013d"+
            "\1\u013e\1\u013f\1\u0140\1\u0141\1\u0142\1\u0143\1\u014a\1\u0144"+
            "\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149\1\u014b\1\u014c\1\u013b",
            "",
            "",
            "",
            "\1\u0168\17\uffff\1\u0177\1\u0178\2\uffff\1\u0183\1\u0180\1"+
            "\u0181\1\u0184\1\u0182\1\uffff\1\u017f\4\uffff\1\u017e\17\uffff"+
            "\1\u0179\11\u017c\1\u017a\11\u017b\3\u017c\13\u017d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0177\1\u0189\2\uffff\1\u018a\1\u0186\1\u0187\1\u018b\1"+
            "\u0188\1\uffff\1\u0185\4\uffff\1\u017e\17\uffff\1\u0179\11\u017c"+
            "\1\u017a\11\u017b\3\u017c\13\u017d",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1"+
            "\u0100\1\u0101\1\u0102\1\u0103\1\u0104\14\uffff\1\u0105\26\uffff"+
            "\1\u018c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u018d",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u018e",
            "\1\uffff",
            "\1\uffff",
            "\1\u012b",
            "\1\u018f\1\u0190",
            "\1\u0191\2\uffff\1\u018a\1\u0180\1\u0181\1\u0184\1\u0182\1"+
            "\uffff\1\u017f\4\uffff\1\u017e\17\uffff\1\u0179\11\u017c\1\u017a"+
            "\11\u017b\3\u017c\13\u017d",
            "\1\u0192",
            "\1\u0193",
            "",
            "\1\u0186",
            "\1\u0187\1\u018b\1\u0188"
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "233:1: alternative_day_of_month_list : ( ( ( ( relaxed_day_of_week )? relaxed_day_of_month relaxed_month WHITE_SPACE ( ( conjunction | interval_conjunction ) relaxed_day_of_month )+ ) ( date_time_separator explicit_time )? ) -> ( ^( DATE_TIME ^( EXPLICIT_DATE relaxed_month relaxed_day_of_month ) ( explicit_time )? ) )+ interval_conjunction | ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month ( date_time_separator explicit_time )? -> ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( EXPLICIT_SEEK explicit_relative_month ) $second) ( explicit_time )? ) | ( explicit_day_of_month_part conjunction explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=>first= explicit_day_of_month_part conjunction second= explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix ( date_time_separator explicit_time )? -> ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $first) ( explicit_time )? ) ^( DATE_TIME ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) $second) ( explicit_time )? ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_359 = input.LA(1);

                         
                        int index44_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_359==JUSQU_A) && (synpred14_DateParser())) {s = 375;}

                        else if ( (LA44_359==HEURE) && (synpred13_DateParser())) {s = 360;}

                        else if ( (LA44_359==A) && (synpred14_DateParser())) {s = 376;}

                        else if ( (LA44_359==INT_00) && (synpred14_DateParser())) {s = 377;}

                        else if ( (LA44_359==INT_0) && (synpred14_DateParser())) {s = 378;}

                        else if ( ((LA44_359>=INT_1 && LA44_359<=INT_9)) && (synpred14_DateParser())) {s = 379;}

                        else if ( ((LA44_359>=INT_01 && LA44_359<=INT_09)||(LA44_359>=INT_10 && LA44_359<=INT_12)) && (synpred14_DateParser())) {s = 380;}

                        else if ( ((LA44_359>=INT_13 && LA44_359<=INT_23)) && (synpred14_DateParser())) {s = 381;}

                        else if ( (LA44_359==CE) && (synpred14_DateParser())) {s = 382;}

                        else if ( (LA44_359==DANS) && (synpred14_DateParser())) {s = 383;}

                        else if ( (LA44_359==APRES_MIDI) && (synpred14_DateParser())) {s = 384;}

                        else if ( (LA44_359==MATIN) && (synpred14_DateParser())) {s = 385;}

                        else if ( (LA44_359==NUIT) && (synpred14_DateParser())) {s = 386;}

                        else if ( (LA44_359==MINUIT) && (synpred14_DateParser())) {s = 387;}

                        else if ( (LA44_359==SOIR) && (synpred14_DateParser())) {s = 388;}

                         
                        input.seek(index44_359);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_355 = input.LA(1);

                         
                        int index44_355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_355==LE) && (synpred13_DateParser())) {s = 370;}

                        else if ( (LA44_355==LA) && (synpred13_DateParser())) {s = 371;}

                        else if ( (LA44_355==UN) && (synpred14_DateParser())) {s = 314;}

                        else if ( (LA44_355==PREMIER) && (synpred14_DateParser())) {s = 315;}

                        else if ( (LA44_355==DEUX) && (synpred14_DateParser())) {s = 316;}

                        else if ( (LA44_355==TROIS) && (synpred14_DateParser())) {s = 317;}

                        else if ( (LA44_355==QUATRE) && (synpred14_DateParser())) {s = 318;}

                        else if ( (LA44_355==CINQ) && (synpred14_DateParser())) {s = 319;}

                        else if ( (LA44_355==SIX) && (synpred14_DateParser())) {s = 320;}

                        else if ( (LA44_355==SEPT) && (synpred14_DateParser())) {s = 321;}

                        else if ( (LA44_355==HUIT) && (synpred14_DateParser())) {s = 322;}

                        else if ( (LA44_355==NEUF) && (synpred14_DateParser())) {s = 323;}

                        else if ( (LA44_355==ONZE) && (synpred14_DateParser())) {s = 324;}

                        else if ( (LA44_355==DOUZE) && (synpred14_DateParser())) {s = 325;}

                        else if ( (LA44_355==TREIZE) && (synpred14_DateParser())) {s = 326;}

                        else if ( (LA44_355==QUATORZE) && (synpred14_DateParser())) {s = 327;}

                        else if ( (LA44_355==QUINZE) && (synpred14_DateParser())) {s = 328;}

                        else if ( (LA44_355==SEIZE) && (synpred14_DateParser())) {s = 329;}

                        else if ( (LA44_355==DIX) && (synpred14_DateParser())) {s = 330;}

                        else if ( (LA44_355==VINGT) && (synpred14_DateParser())) {s = 331;}

                        else if ( (LA44_355==TRENTE) && (synpred14_DateParser())) {s = 332;}

                        else if ( ((LA44_355>=INT_01 && LA44_355<=INT_09)||(LA44_355>=INT_10 && LA44_355<=INT_12)) && (synpred14_DateParser())) {s = 372;}

                        else if ( ((LA44_355>=INT_1 && LA44_355<=INT_9)) && (synpred14_DateParser())) {s = 373;}

                        else if ( ((LA44_355>=INT_13 && LA44_355<=INT_23)) && (synpred14_DateParser())) {s = 374;}

                        else if ( ((LA44_355>=INT_24 && LA44_355<=INT_31)) && (synpred14_DateParser())) {s = 336;}

                        else if ( ((LA44_355>=INT_32 && LA44_355<=INT_59)) && (synpred14_DateParser())) {s = 337;}

                        else if ( ((LA44_355>=INT_60 && LA44_355<=INT_99)) && (synpred14_DateParser())) {s = 338;}

                         
                        input.seek(index44_355);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_334 = input.LA(1);

                         
                        int index44_334 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_334==EOF) && (synpred14_DateParser())) {s = 356;}

                        else if ( (LA44_334==COLON) && (synpred13_DateParser())) {s = 357;}

                        else if ( (LA44_334==HEURE_SHORT) && (synpred13_DateParser())) {s = 358;}

                        else if ( (LA44_334==WHITE_SPACE) ) {s = 359;}

                        else if ( (LA44_334==HEURE) && (synpred13_DateParser())) {s = 360;}

                        else if ( ((LA44_334>=INT_01 && LA44_334<=INT_09)||(LA44_334>=INT_10 && LA44_334<=INT_12)) && (synpred14_DateParser())) {s = 361;}

                        else if ( ((LA44_334>=INT_1 && LA44_334<=INT_9)) && (synpred14_DateParser())) {s = 362;}

                        else if ( ((LA44_334>=INT_13 && LA44_334<=INT_23)) && (synpred14_DateParser())) {s = 363;}

                        else if ( ((LA44_334>=INT_24 && LA44_334<=INT_31)) && (synpred14_DateParser())) {s = 364;}

                        else if ( ((LA44_334>=INT_32 && LA44_334<=INT_59)) && (synpred14_DateParser())) {s = 365;}

                        else if ( ((LA44_334>=INT_60 && LA44_334<=INT_99)) && (synpred14_DateParser())) {s = 366;}

                        else if ( (LA44_334==COMMA) && (synpred14_DateParser())) {s = 367;}

                         
                        input.seek(index44_334);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_333 = input.LA(1);

                         
                        int index44_333 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_333==EOF) && (synpred14_DateParser())) {s = 356;}

                        else if ( (LA44_333==COLON) && (synpred13_DateParser())) {s = 357;}

                        else if ( (LA44_333==HEURE_SHORT) && (synpred13_DateParser())) {s = 358;}

                        else if ( (LA44_333==WHITE_SPACE) ) {s = 359;}

                        else if ( (LA44_333==HEURE) && (synpred13_DateParser())) {s = 360;}

                        else if ( ((LA44_333>=INT_01 && LA44_333<=INT_09)||(LA44_333>=INT_10 && LA44_333<=INT_12)) && (synpred14_DateParser())) {s = 361;}

                        else if ( ((LA44_333>=INT_1 && LA44_333<=INT_9)) && (synpred14_DateParser())) {s = 362;}

                        else if ( ((LA44_333>=INT_13 && LA44_333<=INT_23)) && (synpred14_DateParser())) {s = 363;}

                        else if ( ((LA44_333>=INT_24 && LA44_333<=INT_31)) && (synpred14_DateParser())) {s = 364;}

                        else if ( ((LA44_333>=INT_32 && LA44_333<=INT_59)) && (synpred14_DateParser())) {s = 365;}

                        else if ( ((LA44_333>=INT_60 && LA44_333<=INT_99)) && (synpred14_DateParser())) {s = 366;}

                        else if ( (LA44_333==COMMA) && (synpred14_DateParser())) {s = 367;}

                         
                        input.seek(index44_333);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_335 = input.LA(1);

                         
                        int index44_335 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_335==EOF) && (synpred14_DateParser())) {s = 356;}

                        else if ( (LA44_335==COLON) && (synpred13_DateParser())) {s = 357;}

                        else if ( (LA44_335==HEURE_SHORT) && (synpred13_DateParser())) {s = 358;}

                        else if ( (LA44_335==WHITE_SPACE) ) {s = 359;}

                        else if ( (LA44_335==HEURE) && (synpred13_DateParser())) {s = 360;}

                        else if ( ((LA44_335>=INT_01 && LA44_335<=INT_09)||(LA44_335>=INT_10 && LA44_335<=INT_12)) && (synpred14_DateParser())) {s = 361;}

                        else if ( ((LA44_335>=INT_1 && LA44_335<=INT_9)) && (synpred14_DateParser())) {s = 362;}

                        else if ( ((LA44_335>=INT_13 && LA44_335<=INT_23)) && (synpred14_DateParser())) {s = 363;}

                        else if ( ((LA44_335>=INT_24 && LA44_335<=INT_31)) && (synpred14_DateParser())) {s = 364;}

                        else if ( ((LA44_335>=INT_32 && LA44_335<=INT_59)) && (synpred14_DateParser())) {s = 365;}

                        else if ( ((LA44_335>=INT_60 && LA44_335<=INT_99)) && (synpred14_DateParser())) {s = 366;}

                        else if ( (LA44_335==COMMA) && (synpred14_DateParser())) {s = 367;}

                         
                        input.seek(index44_335);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_395 = input.LA(1);

                         
                        int index44_395 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DateParser()) ) {s = 371;}

                        else if ( (synpred14_DateParser()) ) {s = 388;}

                         
                        input.seek(index44_395);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA44_296 = input.LA(1);

                         
                        int index44_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_296==JUSQU_A) && (synpred13_DateParser())) {s = 309;}

                        else if ( (LA44_296==DERNIER) && (synpred14_DateParser())) {s = 310;}

                        else if ( (LA44_296==SUIVANT) && (synpred14_DateParser())) {s = 311;}

                        else if ( (LA44_296==PASSE) && (synpred14_DateParser())) {s = 312;}

                        else if ( (LA44_296==DANS) ) {s = 313;}

                        else if ( (LA44_296==UN) && (synpred14_DateParser())) {s = 314;}

                        else if ( (LA44_296==PREMIER) && (synpred14_DateParser())) {s = 315;}

                        else if ( (LA44_296==DEUX) && (synpred14_DateParser())) {s = 316;}

                        else if ( (LA44_296==TROIS) && (synpred14_DateParser())) {s = 317;}

                        else if ( (LA44_296==QUATRE) && (synpred14_DateParser())) {s = 318;}

                        else if ( (LA44_296==CINQ) && (synpred14_DateParser())) {s = 319;}

                        else if ( (LA44_296==SIX) && (synpred14_DateParser())) {s = 320;}

                        else if ( (LA44_296==SEPT) && (synpred14_DateParser())) {s = 321;}

                        else if ( (LA44_296==HUIT) && (synpred14_DateParser())) {s = 322;}

                        else if ( (LA44_296==NEUF) && (synpred14_DateParser())) {s = 323;}

                        else if ( (LA44_296==ONZE) && (synpred14_DateParser())) {s = 324;}

                        else if ( (LA44_296==DOUZE) && (synpred14_DateParser())) {s = 325;}

                        else if ( (LA44_296==TREIZE) && (synpred14_DateParser())) {s = 326;}

                        else if ( (LA44_296==QUATORZE) && (synpred14_DateParser())) {s = 327;}

                        else if ( (LA44_296==QUINZE) && (synpred14_DateParser())) {s = 328;}

                        else if ( (LA44_296==SEIZE) && (synpred14_DateParser())) {s = 329;}

                        else if ( (LA44_296==DIX) && (synpred14_DateParser())) {s = 330;}

                        else if ( (LA44_296==VINGT) && (synpred14_DateParser())) {s = 331;}

                        else if ( (LA44_296==TRENTE) && (synpred14_DateParser())) {s = 332;}

                        else if ( ((LA44_296>=INT_01 && LA44_296<=INT_09)||(LA44_296>=INT_10 && LA44_296<=INT_12)) ) {s = 333;}

                        else if ( ((LA44_296>=INT_1 && LA44_296<=INT_9)) ) {s = 334;}

                        else if ( ((LA44_296>=INT_13 && LA44_296<=INT_23)) ) {s = 335;}

                        else if ( ((LA44_296>=INT_24 && LA44_296<=INT_31)) && (synpred14_DateParser())) {s = 336;}

                        else if ( ((LA44_296>=INT_32 && LA44_296<=INT_59)) && (synpred14_DateParser())) {s = 337;}

                        else if ( ((LA44_296>=INT_60 && LA44_296<=INT_99)) && (synpred14_DateParser())) {s = 338;}

                        else if ( (LA44_296==CE) ) {s = 339;}

                        else if ( (LA44_296==A) && (synpred13_DateParser())) {s = 340;}

                        else if ( (LA44_296==INT_00) && (synpred13_DateParser())) {s = 341;}

                        else if ( (LA44_296==INT_0) && (synpred13_DateParser())) {s = 342;}

                        else if ( (LA44_296==APRES_MIDI) && (synpred13_DateParser())) {s = 343;}

                        else if ( (LA44_296==MATIN) && (synpred13_DateParser())) {s = 344;}

                        else if ( (LA44_296==NUIT) && (synpred13_DateParser())) {s = 345;}

                        else if ( (LA44_296==MINUIT) && (synpred13_DateParser())) {s = 346;}

                        else if ( (LA44_296==SOIR) && (synpred13_DateParser())) {s = 347;}

                         
                        input.seek(index44_296);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA44_398 = input.LA(1);

                         
                        int index44_398 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_398==INT_00) && (synpred14_DateParser())) {s = 377;}

                        else if ( (LA44_398==INT_0) && (synpred14_DateParser())) {s = 378;}

                        else if ( ((LA44_398>=INT_1 && LA44_398<=INT_9)) && (synpred14_DateParser())) {s = 379;}

                        else if ( ((LA44_398>=INT_01 && LA44_398<=INT_09)||(LA44_398>=INT_10 && LA44_398<=INT_12)) && (synpred14_DateParser())) {s = 380;}

                        else if ( ((LA44_398>=INT_13 && LA44_398<=INT_23)) && (synpred14_DateParser())) {s = 381;}

                        else if ( (LA44_398==CE) && (synpred14_DateParser())) {s = 382;}

                        else if ( (LA44_398==DANS) && (synpred14_DateParser())) {s = 383;}

                        else if ( (LA44_398==APRES_MIDI) && (synpred14_DateParser())) {s = 384;}

                        else if ( (LA44_398==MATIN) && (synpred14_DateParser())) {s = 385;}

                        else if ( (LA44_398==NUIT) && (synpred14_DateParser())) {s = 386;}

                        else if ( (LA44_398==A) && (synpred14_DateParser())) {s = 401;}

                        else if ( (LA44_398==MINUIT) ) {s = 394;}

                        else if ( (LA44_398==SOIR) && (synpred14_DateParser())) {s = 388;}

                         
                        input.seek(index44_398);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA44_394 = input.LA(1);

                         
                        int index44_394 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DateParser()) ) {s = 371;}

                        else if ( (synpred14_DateParser()) ) {s = 388;}

                         
                        input.seek(index44_394);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA44_392 = input.LA(1);

                         
                        int index44_392 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DateParser()) ) {s = 371;}

                        else if ( (synpred14_DateParser()) ) {s = 388;}

                         
                        input.seek(index44_392);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA44_391 = input.LA(1);

                         
                        int index44_391 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DateParser()) ) {s = 371;}

                        else if ( (synpred14_DateParser()) ) {s = 388;}

                         
                        input.seek(index44_391);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA44_390 = input.LA(1);

                         
                        int index44_390 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DateParser()) ) {s = 371;}

                        else if ( (synpred14_DateParser()) ) {s = 388;}

                         
                        input.seek(index44_390);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA44_250 = input.LA(1);

                         
                        int index44_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_250==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_250==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_250==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_250);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA44_249 = input.LA(1);

                         
                        int index44_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_249==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_249==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_249==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_249);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA44_252 = input.LA(1);

                         
                        int index44_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_252==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_252==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_252==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_252);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA44_251 = input.LA(1);

                         
                        int index44_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_251==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_251==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_251==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_251);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA44_254 = input.LA(1);

                         
                        int index44_254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_254==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_254==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_254==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_254);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA44_253 = input.LA(1);

                         
                        int index44_253 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_253==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_253==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_253==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_253);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA44_255 = input.LA(1);

                         
                        int index44_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_255==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_255==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_255==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_255);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA44_256 = input.LA(1);

                         
                        int index44_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_256==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_256==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_256==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_256);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA44_257 = input.LA(1);

                         
                        int index44_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_257==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_257==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_257==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_257);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA44_258 = input.LA(1);

                         
                        int index44_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_258==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_258==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_258==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_258);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA44_259 = input.LA(1);

                         
                        int index44_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_259==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_259==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_259==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_259);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA44_260 = input.LA(1);

                         
                        int index44_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_260==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_260==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_260==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_260);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA44_339 = input.LA(1);

                         
                        int index44_339 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_339==WHITE_SPACE) ) {s = 368;}

                        else if ( (LA44_339==COMMA) && (synpred14_DateParser())) {s = 367;}

                        else if ( (LA44_339==EOF) && (synpred14_DateParser())) {s = 356;}

                         
                        input.seek(index44_339);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA44_368 = input.LA(1);

                         
                        int index44_368 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_368==JUSQU_A) && (synpred14_DateParser())) {s = 375;}

                        else if ( (LA44_368==DANS) ) {s = 389;}

                        else if ( (LA44_368==APRES_MIDI) ) {s = 390;}

                        else if ( (LA44_368==MATIN) ) {s = 391;}

                        else if ( (LA44_368==NUIT) ) {s = 392;}

                        else if ( (LA44_368==A) ) {s = 393;}

                        else if ( (LA44_368==MINUIT) ) {s = 394;}

                        else if ( (LA44_368==SOIR) ) {s = 395;}

                        else if ( (LA44_368==INT_00) && (synpred14_DateParser())) {s = 377;}

                        else if ( (LA44_368==INT_0) && (synpred14_DateParser())) {s = 378;}

                        else if ( ((LA44_368>=INT_1 && LA44_368<=INT_9)) && (synpred14_DateParser())) {s = 379;}

                        else if ( ((LA44_368>=INT_01 && LA44_368<=INT_09)||(LA44_368>=INT_10 && LA44_368<=INT_12)) && (synpred14_DateParser())) {s = 380;}

                        else if ( ((LA44_368>=INT_13 && LA44_368<=INT_23)) && (synpred14_DateParser())) {s = 381;}

                        else if ( (LA44_368==CE) && (synpred14_DateParser())) {s = 382;}

                         
                        input.seek(index44_368);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA44_261 = input.LA(1);

                         
                        int index44_261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA44_261==WHITE_SPACE) ) {s = 296;}

                        else if ( (LA44_261==COMMA) && (synpred13_DateParser())) {s = 297;}

                        else if ( (LA44_261==EOF) && (synpred13_DateParser())) {s = 298;}

                         
                        input.seek(index44_261);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\102\uffff";
    static final String DFA38_eofS =
        "\102\uffff";
    static final String DFA38_minS =
        "\1\21\1\uffff\27\5\1\uffff\1\21\1\u00bb\3\5\1\21\1\66\2\5\1\45\6"+
        "\5\1\21\1\66\1\45\3\5\1\76\10\5\1\u00b5\1\5\1\76\1\u00b5\1\5\2\u00b5"+
        "\2\5";
    static final String DFA38_maxS =
        "\1\u00c7\1\uffff\20\76\2\u00bd\1\76\4\u00b4\1\uffff\2\u00bd\3\76"+
        "\2\u00bd\2\76\1\u00b5\6\76\2\66\1\u00b5\14\76\1\u00b5\2\76\1\u00b5"+
        "\1\76\2\u00b5\2\76";
    static final String DFA38_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\50\uffff";
    static final String DFA38_specialS =
        "\102\uffff}>";
    static final String[] DFA38_transitionS = {
            "\7\1\23\uffff\1\1\6\uffff\1\1\4\uffff\1\1\4\uffff\2\1\12\uffff"+
            "\11\25\1\uffff\11\26\3\25\13\27\10\30\104\1\1\2\1\4\1\5\1\6"+
            "\1\7\1\10\1\11\1\12\1\13\1\22\1\14\1\15\1\16\1\17\1\20\1\21"+
            "\1\23\1\24\1\3",
            "",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\24\uffff\1\33\30\uffff\1\32\174\uffff\1\36\1\35\1\34",
            "\14\31\24\uffff\1\40\20\uffff\1\43\7\uffff\1\37\167\uffff\1"+
            "\46\1\51\1\44\1\45\1\50\1\42\1\41\1\47",
            "\14\31\24\uffff\1\53\20\uffff\1\54\7\uffff\1\52",
            "\14\31\55\uffff\1\1\11\uffff\11\1\1\uffff\143\1",
            "\14\31\55\uffff\1\1\11\uffff\11\1\1\uffff\143\1",
            "\14\31\55\uffff\1\1\11\uffff\11\1\1\uffff\143\1",
            "\14\31\55\uffff\1\1\11\uffff\11\1\1\uffff\143\1",
            "",
            "\7\1\u00a3\uffff\1\55\1\56\1\57",
            "\1\36\1\35\1\34",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\7\1\36\uffff\1\60\177\uffff\1\61\1\62\1\63\1\64\1\65\1\66"+
            "\1\67\1\70",
            "\1\43\177\uffff\1\46\1\51\1\44\1\45\1\50\1\42\1\41\1\47",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\1\71\u008f\uffff\1\72",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\7\1\36\uffff\1\73",
            "\1\54",
            "\1\74\u008f\uffff\1\75",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\1\76",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1",
            "\1\72",
            "\14\31\55\uffff\1\1",
            "\1\77",
            "\1\75",
            "\14\31\55\uffff\1\1",
            "\1\100",
            "\1\101",
            "\14\31\55\uffff\1\1",
            "\14\31\55\uffff\1\1"
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "235:7: ( relaxed_day_of_week )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA52_eotS =
        "\122\uffff";
    static final String DFA52_eofS =
        "\122\uffff";
    static final String DFA52_minS =
        "\1\21\1\76\1\uffff\20\76\3\45\6\76\1\uffff\3\21\1\u00bb\3\76\1\21"+
        "\1\66\4\76\1\45\4\76\1\21\1\66\1\45\6\76\5\uffff\14\76\1\u00b5\2"+
        "\76\1\u00b5\1\76\2\u00b5\2\76";
    static final String DFA52_maxS =
        "\1\u00c7\1\76\1\uffff\20\76\2\u00bd\1\76\6\u00b4\1\uffff\1\33\1"+
        "\36\2\u00bd\3\76\2\u00bd\4\76\1\u00b5\4\76\2\66\1\u00b5\6\76\5\uffff"+
        "\14\76\1\u00b5\2\76\1\u00b5\1\76\2\u00b5\2\76";
    static final String DFA52_acceptS =
        "\2\uffff\1\1\31\uffff\1\6\33\uffff\1\3\1\2\1\5\1\4\1\7\25\uffff";
    static final String DFA52_specialS =
        "\122\uffff}>";
    static final String[] DFA52_transitionS = {
            "\7\34\3\uffff\1\2\27\uffff\1\1\24\uffff\11\26\1\uffff\11\27"+
            "\3\26\13\30\10\31\34\32\50\33\1\3\1\5\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\23\1\15\1\16\1\17\1\20\1\21\1\22\1\24\1\25\1\4",
            "\1\35",
            "",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\40\30\uffff\1\37\174\uffff\1\42\1\41\1\43",
            "\1\45\20\uffff\1\52\7\uffff\1\44\167\uffff\1\50\1\55\1\56\1"+
            "\47\1\54\1\53\1\46\1\51",
            "\1\60\20\uffff\1\61\7\uffff\1\57",
            "\1\36\11\uffff\11\62\1\uffff\11\63\3\62\13\64\10\65\34\66\50"+
            "\67",
            "\1\36\11\uffff\11\62\1\uffff\11\63\3\62\13\64\10\65\34\66\50"+
            "\67",
            "\1\36\11\uffff\11\62\1\uffff\11\63\3\62\13\64\10\65\34\66\50"+
            "\67",
            "\1\36\11\uffff\11\62\1\uffff\11\63\3\62\13\64\10\65\34\66\50"+
            "\67",
            "\1\36\11\uffff\11\62\1\uffff\11\63\3\62\13\64\10\65\34\66\50"+
            "\67",
            "\1\36\11\uffff\11\62\1\uffff\11\63\3\62\13\64\10\65\34\66\50"+
            "\67",
            "",
            "\7\34\3\uffff\1\2",
            "\7\74\3\uffff\1\71\1\70\1\73\1\72",
            "\7\74\3\uffff\1\71\1\70\1\73\1\72\u009c\uffff\1\75\1\76\1\77",
            "\1\42\1\41\1\43",
            "\1\36",
            "\1\36",
            "\1\36",
            "\7\74\3\uffff\1\71\1\70\1\73\1\72\27\uffff\1\100\177\uffff"+
            "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110",
            "\1\52\177\uffff\1\50\1\55\1\56\1\47\1\54\1\53\1\46\1\51",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\111\u008f\uffff\1\112",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\7\74\3\uffff\1\71\1\70\1\73\1\72\27\uffff\1\113",
            "\1\61",
            "\1\114\u008f\uffff\1\115",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "",
            "",
            "",
            "",
            "",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\116",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\36",
            "\1\112",
            "\1\36",
            "\1\117",
            "\1\115",
            "\1\36",
            "\1\120",
            "\1\121",
            "\1\36",
            "\1\36"
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "267:1: global_date_prefix : ( ( LE WHITE_SPACE )? JOUR WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] | spelled_or_int_optional_prefix WHITE_SPACE JOUR WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_week\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE MOIS WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_month\"] spelled_or_int_optional_prefix | spelled_or_int_optional_prefix WHITE_SPACE ANNEE WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_year\"] spelled_or_int_optional_prefix | ( LE WHITE_SPACE )? day_of_week WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] INT[\"1\"] day_of_week | spelled_or_int_optional_prefix WHITE_SPACE day_of_week WHITE_SPACE prefix_direction -> prefix_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix day_of_week );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA59_eotS =
        "\u0139\uffff";
    static final String DFA59_eofS =
        "\u008f\uffff\14\50\u009e\uffff";
    static final String DFA59_minS =
        "\1\21\24\76\3\45\7\76\7\63\1\76\1\21\1\uffff\1\21\1\110\2\5\1\u00bb"+
        "\3\76\1\5\1\66\5\76\1\45\3\76\1\5\1\66\1\45\6\76\1\63\1\5\1\uffff"+
        "\24\76\3\45\1\21\1\5\20\76\3\45\24\76\3\45\34\76\1\u00b5\2\76\1"+
        "\u00b5\1\76\1\5\1\uffff\2\5\1\u00bb\3\76\1\5\1\66\6\76\1\45\2\76"+
        "\1\5\1\66\1\45\2\5\1\u00bb\3\76\1\5\1\66\6\76\1\45\2\76\1\5\1\66"+
        "\1\45\1\21\1\u00bb\3\76\1\21\1\66\5\76\1\45\3\76\1\21\1\66\2\45"+
        "\2\u00b5\14\76\1\u00b5\2\76\1\u00b5\15\76\1\u00b5\2\76\1\u00b5\15"+
        "\76\1\u00b5\2\76\1\u00b5\1\76\3\30\3\uffff\2\76\6\u00b5\6\uffff"+
        "\6\76";
    static final String DFA59_maxS =
        "\1\u00c7\24\76\2\u00bd\1\76\6\u00b4\1\76\7\u00c7\1\76\1\u00c7\1"+
        "\uffff\1\27\1\u00c7\1\27\2\u00bd\3\76\2\u00bd\5\76\1\u00b5\3\76"+
        "\2\66\1\u00b5\6\76\2\u00c7\1\uffff\24\76\2\u00bd\1\76\2\u00c7\20"+
        "\76\2\u00bd\1\76\4\u00b4\20\76\2\u00bd\1\76\4\u00b4\14\104\14\76"+
        "\1\u00b5\2\76\1\u00b5\1\76\1\u00c7\1\uffff\1\20\2\u00bd\3\76\2\u00bd"+
        "\6\76\1\u00b5\2\76\2\66\1\u00b5\1\27\2\u00bd\3\76\2\u00bd\6\76\1"+
        "\u00b5\2\76\2\66\1\u00b5\2\u00bd\3\76\2\u00bd\5\76\1\u00b5\3\76"+
        "\2\66\1\u00b5\1\u00b4\2\u00b5\14\76\1\u00b5\2\76\1\u00b5\15\76\1"+
        "\u00b5\2\76\1\u00b5\15\76\1\u00b5\2\76\1\u00b5\1\76\3\u00b4\3\uffff"+
        "\2\76\6\u00b5\6\uffff\6\76";
    static final String DFA59_acceptS =
        "\50\uffff\1\2\36\uffff\1\1\145\uffff\1\1\164\uffff\3\1\10\uffff"+
        "\6\1\6\uffff";
    static final String DFA59_specialS =
        "\37\uffff\1\4\1\2\1\3\1\10\1\11\1\5\1\7\37\uffff\1\12\1\0\145\uffff"+
        "\1\1\74\uffff\1\15\65\uffff\1\6\1\13\1\14\27\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\23\uffff\1\3\6\uffff\1\4"+
            "\1\46\3\uffff\1\36\4\uffff\1\2\1\1\1\50\5\uffff\1\47\3\uffff"+
            "\11\30\1\uffff\11\31\3\30\13\32\10\33\34\34\50\35\1\5\1\7\1"+
            "\10\1\11\1\12\1\13\1\14\1\15\1\16\1\25\1\17\1\20\1\21\1\22\1"+
            "\23\1\24\1\26\1\27\1\6",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\55\30\uffff\1\54\174\uffff\1\60\1\56\1\57",
            "\1\62\20\uffff\1\70\7\uffff\1\61\167\uffff\1\65\1\66\1\72\1"+
            "\73\1\63\1\67\1\71\1\64",
            "\1\75\20\uffff\1\76\7\uffff\1\74",
            "\1\53\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\53\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\53\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\53\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\51\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\51\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\51",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\107\12\uffff\1\106\5\uffff\1\105\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\1\137",
            "\7\50\23\uffff\1\50\6\uffff\1\50\4\uffff\1\50\4\uffff\2\50"+
            "\1\140\11\uffff\11\164\1\uffff\11\165\3\164\13\166\10\167\104"+
            "\50\1\141\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1"+
            "\161\1\153\1\154\1\155\1\156\1\157\1\160\1\162\1\163\1\142",
            "",
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\45",
            "\11\u008b\1\uffff\11\u008c\3\u008b\13\u008d\10\u008e\34\34"+
            "\50\35\1\170\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1\u0081"+
            "\1\u0088\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0089"+
            "\1\u008a\1\171",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\37\1\40\1\41\1\42\1"+
            "\43\1\44\1\45",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\37\1\40\1\41\1\42\1"+
            "\43\1\44\1\45\u00a3\uffff\1\u009b\1\u009c\1\u009d",
            "\1\60\1\56\1\57",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\37\1\40\1\41\1\42\1"+
            "\43\1\44\1\45\36\uffff\1\u009e\177\uffff\1\u009f\1\u00a0\1\u00a1"+
            "\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6",
            "\1\70\177\uffff\1\65\1\66\1\72\1\73\1\63\1\67\1\71\1\64",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\u00a7\u008f\uffff\1\u00a8",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\37\1\40\1\41\1\42\1"+
            "\43\1\44\1\45\36\uffff\1\u00a9",
            "\1\76",
            "\1\u00aa\u008f\uffff\1\u00ab",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\107\12\uffff\1\u00ac\5\uffff\1\u00ad\3\uffff\11\110\1\uffff"+
            "\11\111\3\110\13\112\10\113\104\uffff\1\114\1\116\1\117\1\120"+
            "\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1\127\1\130\1\131"+
            "\1\132\1\133\1\135\1\136\1\115",
            "\14\50\42\uffff\1\107\12\uffff\1\50\5\uffff\1\u00ad\3\uffff"+
            "\11\110\1\uffff\11\111\3\110\13\112\10\113\104\uffff\1\114\1"+
            "\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1"+
            "\127\1\130\1\131\1\132\1\133\1\135\1\136\1\115",
            "",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00b0\30\uffff\1\u00af\174\uffff\1\u00b3\1\u00b1\1\u00b2",
            "\1\u00b5\20\uffff\1\u00bc\7\uffff\1\u00b4\167\uffff\1\u00b8"+
            "\1\u00b9\1\u00bd\1\u00b7\1\u00bb\1\u00ba\1\u00be\1\u00b6",
            "\1\u00c0\20\uffff\1\u00c1\7\uffff\1\u00bf",
            "\7\50\23\uffff\1\50\6\uffff\1\50\4\uffff\1\50\4\uffff\3\50"+
            "\11\uffff\11\164\1\uffff\11\165\3\164\13\166\10\167\104\50\1"+
            "\141\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\161\1"+
            "\153\1\154\1\155\1\156\1\157\1\160\1\162\1\163\1\142",
            "\23\50\23\uffff\1\50\6\uffff\1\50\4\uffff\1\50\4\uffff\3\50"+
            "\11\uffff\11\164\1\uffff\11\165\3\164\13\166\10\167\104\50\1"+
            "\141\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\161\1"+
            "\153\1\154\1\155\1\156\1\157\1\160\1\162\1\163\1\142",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c4\30\uffff\1\u00c3\174\uffff\1\u00c7\1\u00c5\1\u00c6",
            "\1\u00c9\20\uffff\1\u00d0\7\uffff\1\u00c8\167\uffff\1\u00cc"+
            "\1\u00cd\1\u00ce\1\u00d2\1\u00ca\1\u00cf\1\u00d1\1\u00cb",
            "\1\u00d4\20\uffff\1\u00d5\7\uffff\1\u00d3",
            "\1\u00c2\11\uffff\11\50\1\uffff\143\50",
            "\1\u00c2\11\uffff\11\50\1\uffff\143\50",
            "\1\u00c2\11\uffff\11\50\1\uffff\143\50",
            "\1\u00c2\11\uffff\11\50\1\uffff\143\50",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\u00d7\30\uffff\1\u00d6\174\uffff\1\u00d9\1\u00d8\1\u00da",
            "\1\u00dc\20\uffff\1\u00e2\7\uffff\1\u00db\167\uffff\1\u00de"+
            "\1\u00e4\1\u00df\1\u00e3\1\u00dd\1\u00e0\1\u00e5\1\u00e1",
            "\1\u00e7\20\uffff\1\u00e8\7\uffff\1\u00e6",
            "\1\51\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\51\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\51\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\51\11\uffff\11\77\1\uffff\11\100\3\77\13\101\10\102\34\103"+
            "\50\104",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\u00e9\5\uffff\1\50",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\u00ea",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\53",
            "\1\u00a8",
            "\1\53",
            "\1\u00eb",
            "\1\u00ab",
            "\1\53",
            "\14\50\42\uffff\1\107\12\uffff\1\50\5\uffff\1\u00ad\3\uffff"+
            "\11\110\1\uffff\11\111\3\110\13\112\10\113\104\uffff\1\114\1"+
            "\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\134\1\126\1"+
            "\127\1\130\1\131\1\132\1\133\1\135\1\136\1\115",
            "",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\u00aa\uffff\1\u00ec\1"+
            "\u00ed\1\u00ee",
            "\1\u00b3\1\u00b1\1\u00b2",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\45\uffff\1\u00ef\177"+
            "\uffff\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4\1\u00f5\1\u00f6"+
            "\1\u00f7",
            "\1\u00bc\177\uffff\1\u00b8\1\u00b9\1\u00bd\1\u00b7\1\u00bb"+
            "\1\u00ba\1\u00be\1\u00b6",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00f8\u008f\uffff\1\u00f9",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\45\uffff\1\u00fa",
            "\1\u00c1",
            "\1\u00fb\u008f\uffff\1\u00fc",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\7\50",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\7\50\u00a3\uffff\1\u00fd"+
            "\1\u00fe\1\u00ff",
            "\1\u00c7\1\u00c5\1\u00c6",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\7\50\36\uffff\1\u0100"+
            "\177\uffff\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1"+
            "\u0107\1\u0108",
            "\1\u00d0\177\uffff\1\u00cc\1\u00cd\1\u00ce\1\u00d2\1\u00ca"+
            "\1\u00cf\1\u00d1\1\u00cb",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u0109\u008f\uffff\1\u010a",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1"+
            "\u0096\1\u0097\1\u0098\1\u0099\1\u009a\7\50\36\uffff\1\u010b",
            "\1\u00d5",
            "\1\u010c\u008f\uffff\1\u010d",
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\u00a3\uffff\1\u010e\1\u010f"+
            "\1\u0110",
            "\1\u00d9\1\u00d8\1\u00da",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\36\uffff\1\u0111\177\uffff"+
            "\1\u0112\1\u0113\1\u0114\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119",
            "\1\u00e2\177\uffff\1\u00de\1\u00e4\1\u00df\1\u00e3\1\u00dd"+
            "\1\u00e0\1\u00e5\1\u00e1",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\u011a\u008f\uffff\1\u011b",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\36\uffff\1\u011c",
            "\1\u00e8",
            "\1\u011d\u008f\uffff\1\u011e",
            "\1\50\2\uffff\2\50\2\uffff\5\50\1\uffff\1\50\2\uffff\3\50\2"+
            "\uffff\1\50\14\uffff\1\u011f\11\u0120\12\50\3\u0120\13\u0121"+
            "\10\u0122\34\u0123\50\u0124",
            "\1\u0125",
            "\1\u0126",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u0127",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00f9",
            "\1\u00ae",
            "\1\u0128",
            "\1\u00fc",
            "\1\u00ae",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u0129",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u010a",
            "\1\u00c2",
            "\1\u012a",
            "\1\u010d",
            "\1\u00c2",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\u012b",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\51",
            "\1\u011b",
            "\1\51",
            "\1\u012c",
            "\1\u011e",
            "\1\51",
            "\2\50\44\uffff\1\50\4\uffff\1\50\3\uffff\1\u012d\11\u012e\12"+
            "\uffff\3\u012e\13\u012f\10\u0130\34\u0131\50\u0132",
            "\2\50\44\uffff\1\50\4\uffff\1\50\3\uffff\1\u012d\11\u012e\12"+
            "\uffff\3\u012e\13\u012f\10\u0130\34\u0131\50\u0132",
            "\2\50\44\uffff\1\50\4\uffff\1\50\3\uffff\1\u012d\11\u012e\12"+
            "\uffff\3\u012e\13\u012f\10\u0130\34\u0131\50\u0132",
            "",
            "",
            "",
            "\1\53",
            "\1\53",
            "\1\u0133",
            "\1\u0134",
            "\1\u0135",
            "\1\u0136",
            "\1\u0137",
            "\1\u0138",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ae",
            "\1\u00ae",
            "\1\u00c2",
            "\1\u00c2",
            "\1\51",
            "\1\51"
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "304:5: ( ( ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> ( relaxed_day_of_week )? ( relaxed_day_of_month_prefix )? relaxed_day_of_month WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year | ( relaxed_day_of_month_prefix )? ( relaxed_day_of_week )? ( relaxed_day_of_month )? WHITE_SPACE relaxed_month )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_70 = input.LA(1);

                         
                        int index59_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA59_70>=INT_01 && LA59_70<=INT_09)||(LA59_70>=INT_10 && LA59_70<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_70>=INT_1 && LA59_70<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_70>=INT_13 && LA59_70<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_70>=INT_24 && LA59_70<=INT_31)) ) {s = 75;}

                        else if ( (LA59_70==UN) ) {s = 76;}

                        else if ( (LA59_70==PREMIER) ) {s = 77;}

                        else if ( (LA59_70==DEUX) ) {s = 78;}

                        else if ( (LA59_70==TROIS) ) {s = 79;}

                        else if ( (LA59_70==QUATRE) ) {s = 80;}

                        else if ( (LA59_70==CINQ) ) {s = 81;}

                        else if ( (LA59_70==SIX) ) {s = 82;}

                        else if ( (LA59_70==SEPT) ) {s = 83;}

                        else if ( (LA59_70==HUIT) ) {s = 84;}

                        else if ( (LA59_70==NEUF) ) {s = 85;}

                        else if ( (LA59_70==ONZE) ) {s = 86;}

                        else if ( (LA59_70==DOUZE) ) {s = 87;}

                        else if ( (LA59_70==TREIZE) ) {s = 88;}

                        else if ( (LA59_70==QUATORZE) ) {s = 89;}

                        else if ( (LA59_70==QUINZE) ) {s = 90;}

                        else if ( (LA59_70==SEIZE) ) {s = 91;}

                        else if ( (LA59_70==DIX) ) {s = 92;}

                        else if ( (LA59_70==VINGT) ) {s = 93;}

                        else if ( (LA59_70==TRENTE) ) {s = 94;}

                        else if ( ((LA59_70>=JANVIER && LA59_70<=DECEMBRE)||LA59_70==WHITE_SPACE) ) {s = 40;}

                        else if ( (LA59_70==LE) && (synpred15_DateParser())) {s = 71;}

                        else if ( (LA59_70==COMMA) && (synpred15_DateParser())) {s = 173;}

                         
                        input.seek(index59_70);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_172 = input.LA(1);

                         
                        int index59_172 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA59_172>=INT_01 && LA59_172<=INT_09)||(LA59_172>=INT_10 && LA59_172<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_172>=INT_1 && LA59_172<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_172>=INT_13 && LA59_172<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_172>=INT_24 && LA59_172<=INT_31)) ) {s = 75;}

                        else if ( (LA59_172==UN) ) {s = 76;}

                        else if ( (LA59_172==PREMIER) ) {s = 77;}

                        else if ( (LA59_172==DEUX) ) {s = 78;}

                        else if ( (LA59_172==TROIS) ) {s = 79;}

                        else if ( (LA59_172==QUATRE) ) {s = 80;}

                        else if ( (LA59_172==CINQ) ) {s = 81;}

                        else if ( (LA59_172==SIX) ) {s = 82;}

                        else if ( (LA59_172==SEPT) ) {s = 83;}

                        else if ( (LA59_172==HUIT) ) {s = 84;}

                        else if ( (LA59_172==NEUF) ) {s = 85;}

                        else if ( (LA59_172==ONZE) ) {s = 86;}

                        else if ( (LA59_172==DOUZE) ) {s = 87;}

                        else if ( (LA59_172==TREIZE) ) {s = 88;}

                        else if ( (LA59_172==QUATORZE) ) {s = 89;}

                        else if ( (LA59_172==QUINZE) ) {s = 90;}

                        else if ( (LA59_172==SEIZE) ) {s = 91;}

                        else if ( (LA59_172==DIX) ) {s = 92;}

                        else if ( (LA59_172==VINGT) ) {s = 93;}

                        else if ( (LA59_172==TRENTE) ) {s = 94;}

                        else if ( ((LA59_172>=JANVIER && LA59_172<=DECEMBRE)||LA59_172==WHITE_SPACE) ) {s = 40;}

                        else if ( (LA59_172==LE) && (synpred15_DateParser())) {s = 71;}

                        else if ( (LA59_172==COMMA) && (synpred15_DateParser())) {s = 173;}

                         
                        input.seek(index59_172);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_32 = input.LA(1);

                         
                        int index59_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_32==COMMA) ) {s = 69;}

                        else if ( (LA59_32==WHITE_SPACE) ) {s = 70;}

                        else if ( (LA59_32==LE) && (synpred15_DateParser())) {s = 71;}

                        else if ( ((LA59_32>=INT_01 && LA59_32<=INT_09)||(LA59_32>=INT_10 && LA59_32<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_32>=INT_1 && LA59_32<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_32>=INT_13 && LA59_32<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_32>=INT_24 && LA59_32<=INT_31)) ) {s = 75;}

                        else if ( (LA59_32==UN) ) {s = 76;}

                        else if ( (LA59_32==PREMIER) ) {s = 77;}

                        else if ( (LA59_32==DEUX) ) {s = 78;}

                        else if ( (LA59_32==TROIS) ) {s = 79;}

                        else if ( (LA59_32==QUATRE) ) {s = 80;}

                        else if ( (LA59_32==CINQ) ) {s = 81;}

                        else if ( (LA59_32==SIX) ) {s = 82;}

                        else if ( (LA59_32==SEPT) ) {s = 83;}

                        else if ( (LA59_32==HUIT) ) {s = 84;}

                        else if ( (LA59_32==NEUF) ) {s = 85;}

                        else if ( (LA59_32==ONZE) ) {s = 86;}

                        else if ( (LA59_32==DOUZE) ) {s = 87;}

                        else if ( (LA59_32==TREIZE) ) {s = 88;}

                        else if ( (LA59_32==QUATORZE) ) {s = 89;}

                        else if ( (LA59_32==QUINZE) ) {s = 90;}

                        else if ( (LA59_32==SEIZE) ) {s = 91;}

                        else if ( (LA59_32==DIX) ) {s = 92;}

                        else if ( (LA59_32==VINGT) ) {s = 93;}

                        else if ( (LA59_32==TRENTE) ) {s = 94;}

                         
                        input.seek(index59_32);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_33 = input.LA(1);

                         
                        int index59_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_33==COMMA) ) {s = 69;}

                        else if ( (LA59_33==WHITE_SPACE) ) {s = 70;}

                        else if ( ((LA59_33>=INT_01 && LA59_33<=INT_09)||(LA59_33>=INT_10 && LA59_33<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_33>=INT_1 && LA59_33<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_33>=INT_13 && LA59_33<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_33>=INT_24 && LA59_33<=INT_31)) ) {s = 75;}

                        else if ( (LA59_33==UN) ) {s = 76;}

                        else if ( (LA59_33==PREMIER) ) {s = 77;}

                        else if ( (LA59_33==DEUX) ) {s = 78;}

                        else if ( (LA59_33==TROIS) ) {s = 79;}

                        else if ( (LA59_33==QUATRE) ) {s = 80;}

                        else if ( (LA59_33==CINQ) ) {s = 81;}

                        else if ( (LA59_33==SIX) ) {s = 82;}

                        else if ( (LA59_33==SEPT) ) {s = 83;}

                        else if ( (LA59_33==HUIT) ) {s = 84;}

                        else if ( (LA59_33==NEUF) ) {s = 85;}

                        else if ( (LA59_33==ONZE) ) {s = 86;}

                        else if ( (LA59_33==DOUZE) ) {s = 87;}

                        else if ( (LA59_33==TREIZE) ) {s = 88;}

                        else if ( (LA59_33==QUATORZE) ) {s = 89;}

                        else if ( (LA59_33==QUINZE) ) {s = 90;}

                        else if ( (LA59_33==SEIZE) ) {s = 91;}

                        else if ( (LA59_33==DIX) ) {s = 92;}

                        else if ( (LA59_33==VINGT) ) {s = 93;}

                        else if ( (LA59_33==TRENTE) ) {s = 94;}

                        else if ( (LA59_33==LE) && (synpred15_DateParser())) {s = 71;}

                         
                        input.seek(index59_33);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_31 = input.LA(1);

                         
                        int index59_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_31==COMMA) ) {s = 69;}

                        else if ( (LA59_31==WHITE_SPACE) ) {s = 70;}

                        else if ( (LA59_31==LE) && (synpred15_DateParser())) {s = 71;}

                        else if ( ((LA59_31>=INT_01 && LA59_31<=INT_09)||(LA59_31>=INT_10 && LA59_31<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_31>=INT_1 && LA59_31<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_31>=INT_13 && LA59_31<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_31>=INT_24 && LA59_31<=INT_31)) ) {s = 75;}

                        else if ( (LA59_31==UN) ) {s = 76;}

                        else if ( (LA59_31==PREMIER) ) {s = 77;}

                        else if ( (LA59_31==DEUX) ) {s = 78;}

                        else if ( (LA59_31==TROIS) ) {s = 79;}

                        else if ( (LA59_31==QUATRE) ) {s = 80;}

                        else if ( (LA59_31==CINQ) ) {s = 81;}

                        else if ( (LA59_31==SIX) ) {s = 82;}

                        else if ( (LA59_31==SEPT) ) {s = 83;}

                        else if ( (LA59_31==HUIT) ) {s = 84;}

                        else if ( (LA59_31==NEUF) ) {s = 85;}

                        else if ( (LA59_31==ONZE) ) {s = 86;}

                        else if ( (LA59_31==DOUZE) ) {s = 87;}

                        else if ( (LA59_31==TREIZE) ) {s = 88;}

                        else if ( (LA59_31==QUATORZE) ) {s = 89;}

                        else if ( (LA59_31==QUINZE) ) {s = 90;}

                        else if ( (LA59_31==SEIZE) ) {s = 91;}

                        else if ( (LA59_31==DIX) ) {s = 92;}

                        else if ( (LA59_31==VINGT) ) {s = 93;}

                        else if ( (LA59_31==TRENTE) ) {s = 94;}

                         
                        input.seek(index59_31);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_36 = input.LA(1);

                         
                        int index59_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_36==COMMA) ) {s = 69;}

                        else if ( (LA59_36==WHITE_SPACE) ) {s = 70;}

                        else if ( ((LA59_36>=INT_01 && LA59_36<=INT_09)||(LA59_36>=INT_10 && LA59_36<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_36>=INT_1 && LA59_36<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_36>=INT_13 && LA59_36<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_36>=INT_24 && LA59_36<=INT_31)) ) {s = 75;}

                        else if ( (LA59_36==UN) ) {s = 76;}

                        else if ( (LA59_36==PREMIER) ) {s = 77;}

                        else if ( (LA59_36==DEUX) ) {s = 78;}

                        else if ( (LA59_36==TROIS) ) {s = 79;}

                        else if ( (LA59_36==QUATRE) ) {s = 80;}

                        else if ( (LA59_36==CINQ) ) {s = 81;}

                        else if ( (LA59_36==SIX) ) {s = 82;}

                        else if ( (LA59_36==SEPT) ) {s = 83;}

                        else if ( (LA59_36==HUIT) ) {s = 84;}

                        else if ( (LA59_36==NEUF) ) {s = 85;}

                        else if ( (LA59_36==ONZE) ) {s = 86;}

                        else if ( (LA59_36==DOUZE) ) {s = 87;}

                        else if ( (LA59_36==TREIZE) ) {s = 88;}

                        else if ( (LA59_36==QUATORZE) ) {s = 89;}

                        else if ( (LA59_36==QUINZE) ) {s = 90;}

                        else if ( (LA59_36==SEIZE) ) {s = 91;}

                        else if ( (LA59_36==DIX) ) {s = 92;}

                        else if ( (LA59_36==VINGT) ) {s = 93;}

                        else if ( (LA59_36==TRENTE) ) {s = 94;}

                        else if ( (LA59_36==LE) && (synpred15_DateParser())) {s = 71;}

                         
                        input.seek(index59_36);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_287 = input.LA(1);

                         
                        int index59_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA59_287>=HEURE && LA59_287<=HEURE_SHORT)||LA59_287==WHITE_SPACE||LA59_287==COLON) ) {s = 40;}

                        else if ( (LA59_287==INT_00) && (synpred15_DateParser())) {s = 301;}

                        else if ( ((LA59_287>=INT_01 && LA59_287<=INT_09)||(LA59_287>=INT_10 && LA59_287<=INT_12)) && (synpred15_DateParser())) {s = 302;}

                        else if ( ((LA59_287>=INT_13 && LA59_287<=INT_23)) && (synpred15_DateParser())) {s = 303;}

                        else if ( ((LA59_287>=INT_24 && LA59_287<=INT_31)) && (synpred15_DateParser())) {s = 304;}

                        else if ( ((LA59_287>=INT_32 && LA59_287<=INT_59)) && (synpred15_DateParser())) {s = 305;}

                        else if ( ((LA59_287>=INT_60 && LA59_287<=INT_99)) && (synpred15_DateParser())) {s = 306;}

                         
                        input.seek(index59_287);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA59_37 = input.LA(1);

                         
                        int index59_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_37==COMMA) ) {s = 69;}

                        else if ( (LA59_37==WHITE_SPACE) ) {s = 70;}

                        else if ( ((LA59_37>=INT_01 && LA59_37<=INT_09)||(LA59_37>=INT_10 && LA59_37<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_37>=INT_1 && LA59_37<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_37>=INT_13 && LA59_37<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_37>=INT_24 && LA59_37<=INT_31)) ) {s = 75;}

                        else if ( (LA59_37==UN) ) {s = 76;}

                        else if ( (LA59_37==PREMIER) ) {s = 77;}

                        else if ( (LA59_37==DEUX) ) {s = 78;}

                        else if ( (LA59_37==TROIS) ) {s = 79;}

                        else if ( (LA59_37==QUATRE) ) {s = 80;}

                        else if ( (LA59_37==CINQ) ) {s = 81;}

                        else if ( (LA59_37==SIX) ) {s = 82;}

                        else if ( (LA59_37==SEPT) ) {s = 83;}

                        else if ( (LA59_37==HUIT) ) {s = 84;}

                        else if ( (LA59_37==NEUF) ) {s = 85;}

                        else if ( (LA59_37==ONZE) ) {s = 86;}

                        else if ( (LA59_37==DOUZE) ) {s = 87;}

                        else if ( (LA59_37==TREIZE) ) {s = 88;}

                        else if ( (LA59_37==QUATORZE) ) {s = 89;}

                        else if ( (LA59_37==QUINZE) ) {s = 90;}

                        else if ( (LA59_37==SEIZE) ) {s = 91;}

                        else if ( (LA59_37==DIX) ) {s = 92;}

                        else if ( (LA59_37==VINGT) ) {s = 93;}

                        else if ( (LA59_37==TRENTE) ) {s = 94;}

                        else if ( (LA59_37==LE) && (synpred15_DateParser())) {s = 71;}

                         
                        input.seek(index59_37);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA59_34 = input.LA(1);

                         
                        int index59_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_34==COMMA) ) {s = 69;}

                        else if ( (LA59_34==WHITE_SPACE) ) {s = 70;}

                        else if ( ((LA59_34>=INT_01 && LA59_34<=INT_09)||(LA59_34>=INT_10 && LA59_34<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_34>=INT_1 && LA59_34<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_34>=INT_13 && LA59_34<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_34>=INT_24 && LA59_34<=INT_31)) ) {s = 75;}

                        else if ( (LA59_34==UN) ) {s = 76;}

                        else if ( (LA59_34==PREMIER) ) {s = 77;}

                        else if ( (LA59_34==DEUX) ) {s = 78;}

                        else if ( (LA59_34==TROIS) ) {s = 79;}

                        else if ( (LA59_34==QUATRE) ) {s = 80;}

                        else if ( (LA59_34==CINQ) ) {s = 81;}

                        else if ( (LA59_34==SIX) ) {s = 82;}

                        else if ( (LA59_34==SEPT) ) {s = 83;}

                        else if ( (LA59_34==HUIT) ) {s = 84;}

                        else if ( (LA59_34==NEUF) ) {s = 85;}

                        else if ( (LA59_34==ONZE) ) {s = 86;}

                        else if ( (LA59_34==DOUZE) ) {s = 87;}

                        else if ( (LA59_34==TREIZE) ) {s = 88;}

                        else if ( (LA59_34==QUATORZE) ) {s = 89;}

                        else if ( (LA59_34==QUINZE) ) {s = 90;}

                        else if ( (LA59_34==SEIZE) ) {s = 91;}

                        else if ( (LA59_34==DIX) ) {s = 92;}

                        else if ( (LA59_34==VINGT) ) {s = 93;}

                        else if ( (LA59_34==TRENTE) ) {s = 94;}

                        else if ( (LA59_34==LE) && (synpred15_DateParser())) {s = 71;}

                         
                        input.seek(index59_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA59_35 = input.LA(1);

                         
                        int index59_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_35==COMMA) ) {s = 69;}

                        else if ( (LA59_35==WHITE_SPACE) ) {s = 70;}

                        else if ( ((LA59_35>=INT_01 && LA59_35<=INT_09)||(LA59_35>=INT_10 && LA59_35<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_35>=INT_1 && LA59_35<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_35>=INT_13 && LA59_35<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_35>=INT_24 && LA59_35<=INT_31)) ) {s = 75;}

                        else if ( (LA59_35==UN) ) {s = 76;}

                        else if ( (LA59_35==PREMIER) ) {s = 77;}

                        else if ( (LA59_35==DEUX) ) {s = 78;}

                        else if ( (LA59_35==TROIS) ) {s = 79;}

                        else if ( (LA59_35==QUATRE) ) {s = 80;}

                        else if ( (LA59_35==CINQ) ) {s = 81;}

                        else if ( (LA59_35==SIX) ) {s = 82;}

                        else if ( (LA59_35==SEPT) ) {s = 83;}

                        else if ( (LA59_35==HUIT) ) {s = 84;}

                        else if ( (LA59_35==NEUF) ) {s = 85;}

                        else if ( (LA59_35==ONZE) ) {s = 86;}

                        else if ( (LA59_35==DOUZE) ) {s = 87;}

                        else if ( (LA59_35==TREIZE) ) {s = 88;}

                        else if ( (LA59_35==QUATORZE) ) {s = 89;}

                        else if ( (LA59_35==QUINZE) ) {s = 90;}

                        else if ( (LA59_35==SEIZE) ) {s = 91;}

                        else if ( (LA59_35==DIX) ) {s = 92;}

                        else if ( (LA59_35==VINGT) ) {s = 93;}

                        else if ( (LA59_35==TRENTE) ) {s = 94;}

                        else if ( (LA59_35==LE) && (synpred15_DateParser())) {s = 71;}

                         
                        input.seek(index59_35);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA59_69 = input.LA(1);

                         
                        int index59_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_69==WHITE_SPACE) ) {s = 172;}

                        else if ( (LA59_69==LE) && (synpred15_DateParser())) {s = 71;}

                        else if ( (LA59_69==COMMA) && (synpred15_DateParser())) {s = 173;}

                        else if ( ((LA59_69>=INT_01 && LA59_69<=INT_09)||(LA59_69>=INT_10 && LA59_69<=INT_12)) ) {s = 72;}

                        else if ( ((LA59_69>=INT_1 && LA59_69<=INT_9)) ) {s = 73;}

                        else if ( ((LA59_69>=INT_13 && LA59_69<=INT_23)) ) {s = 74;}

                        else if ( ((LA59_69>=INT_24 && LA59_69<=INT_31)) ) {s = 75;}

                        else if ( (LA59_69==UN) ) {s = 76;}

                        else if ( (LA59_69==PREMIER) ) {s = 77;}

                        else if ( (LA59_69==DEUX) ) {s = 78;}

                        else if ( (LA59_69==TROIS) ) {s = 79;}

                        else if ( (LA59_69==QUATRE) ) {s = 80;}

                        else if ( (LA59_69==CINQ) ) {s = 81;}

                        else if ( (LA59_69==SIX) ) {s = 82;}

                        else if ( (LA59_69==SEPT) ) {s = 83;}

                        else if ( (LA59_69==HUIT) ) {s = 84;}

                        else if ( (LA59_69==NEUF) ) {s = 85;}

                        else if ( (LA59_69==ONZE) ) {s = 86;}

                        else if ( (LA59_69==DOUZE) ) {s = 87;}

                        else if ( (LA59_69==TREIZE) ) {s = 88;}

                        else if ( (LA59_69==QUATORZE) ) {s = 89;}

                        else if ( (LA59_69==QUINZE) ) {s = 90;}

                        else if ( (LA59_69==SEIZE) ) {s = 91;}

                        else if ( (LA59_69==DIX) ) {s = 92;}

                        else if ( (LA59_69==VINGT) ) {s = 93;}

                        else if ( (LA59_69==TRENTE) ) {s = 94;}

                         
                        input.seek(index59_69);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA59_288 = input.LA(1);

                         
                        int index59_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_288==INT_00) && (synpred15_DateParser())) {s = 301;}

                        else if ( ((LA59_288>=INT_01 && LA59_288<=INT_09)||(LA59_288>=INT_10 && LA59_288<=INT_12)) && (synpred15_DateParser())) {s = 302;}

                        else if ( ((LA59_288>=INT_13 && LA59_288<=INT_23)) && (synpred15_DateParser())) {s = 303;}

                        else if ( ((LA59_288>=INT_24 && LA59_288<=INT_31)) && (synpred15_DateParser())) {s = 304;}

                        else if ( ((LA59_288>=INT_32 && LA59_288<=INT_59)) && (synpred15_DateParser())) {s = 305;}

                        else if ( ((LA59_288>=INT_60 && LA59_288<=INT_99)) && (synpred15_DateParser())) {s = 306;}

                        else if ( ((LA59_288>=HEURE && LA59_288<=HEURE_SHORT)||LA59_288==WHITE_SPACE||LA59_288==COLON) ) {s = 40;}

                         
                        input.seek(index59_288);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA59_289 = input.LA(1);

                         
                        int index59_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_289==INT_00) && (synpred15_DateParser())) {s = 301;}

                        else if ( ((LA59_289>=INT_01 && LA59_289<=INT_09)||(LA59_289>=INT_10 && LA59_289<=INT_12)) && (synpred15_DateParser())) {s = 302;}

                        else if ( ((LA59_289>=INT_13 && LA59_289<=INT_23)) && (synpred15_DateParser())) {s = 303;}

                        else if ( ((LA59_289>=INT_24 && LA59_289<=INT_31)) && (synpred15_DateParser())) {s = 304;}

                        else if ( ((LA59_289>=INT_32 && LA59_289<=INT_59)) && (synpred15_DateParser())) {s = 305;}

                        else if ( ((LA59_289>=INT_60 && LA59_289<=INT_99)) && (synpred15_DateParser())) {s = 306;}

                        else if ( ((LA59_289>=HEURE && LA59_289<=HEURE_SHORT)||LA59_289==WHITE_SPACE||LA59_289==COLON) ) {s = 40;}

                         
                        input.seek(index59_289);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA59_233 = input.LA(1);

                         
                        int index59_233 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_233==DASH||(LA59_233>=JUSQU_A && LA59_233<=A)||(LA59_233>=MINUIT && LA59_233<=NUIT)||LA59_233==DANS||(LA59_233>=OU && LA59_233<=CE)||LA59_233==AU||(LA59_233>=INT_0 && LA59_233<=INT_9)) ) {s = 40;}

                        else if ( (LA59_233==INT_00) ) {s = 287;}

                        else if ( ((LA59_233>=INT_01 && LA59_233<=INT_09)||(LA59_233>=INT_10 && LA59_233<=INT_12)) ) {s = 288;}

                        else if ( ((LA59_233>=INT_13 && LA59_233<=INT_23)) ) {s = 289;}

                        else if ( ((LA59_233>=INT_24 && LA59_233<=INT_31)) && (synpred15_DateParser())) {s = 290;}

                        else if ( ((LA59_233>=INT_32 && LA59_233<=INT_59)) && (synpred15_DateParser())) {s = 291;}

                        else if ( ((LA59_233>=INT_60 && LA59_233<=INT_99)) && (synpred15_DateParser())) {s = 292;}

                         
                        input.seek(index59_233);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\103\uffff";
    static final String DFA54_eofS =
        "\103\uffff";
    static final String DFA54_minS =
        "\1\21\1\uffff\20\76\3\45\4\76\1\uffff\2\5\1\u00bb\3\76\1\5\1\66"+
        "\3\76\1\45\5\76\1\5\1\66\1\45\14\76\1\u00b5\2\76\1\u00b5\1\76\2"+
        "\u00b5\2\76";
    static final String DFA54_maxS =
        "\1\u00c7\1\uffff\20\76\2\u00bd\1\76\4\u00b4\1\uffff\1\27\2\u00bd"+
        "\3\76\2\u00bd\3\76\1\u00b5\5\76\2\66\1\u00b5\14\76\1\u00b5\2\76"+
        "\1\u00b5\1\76\2\u00b5\2\76";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\51\uffff";
    static final String DFA54_specialS =
        "\103\uffff}>";
    static final String[] DFA54_transitionS = {
            "\7\1\23\uffff\1\1\6\uffff\1\1\1\31\3\uffff\1\1\4\uffff\2\1\6"+
            "\uffff\1\31\3\uffff\11\25\1\uffff\11\26\3\25\13\27\10\30\104"+
            "\1\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\22\1\14\1\15\1"+
            "\16\1\17\1\20\1\21\1\23\1\24\1\3",
            "",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\34\30\uffff\1\33\174\uffff\1\37\1\36\1\35",
            "\1\41\20\uffff\1\45\7\uffff\1\40\167\uffff\1\51\1\44\1\42\1"+
            "\46\1\52\1\43\1\47\1\50",
            "\1\54\20\uffff\1\55\7\uffff\1\53",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "",
            "\14\31\7\1",
            "\14\31\7\1\u00a3\uffff\1\56\1\57\1\60",
            "\1\37\1\36\1\35",
            "\1\32",
            "\1\32",
            "\1\32",
            "\14\31\7\1\36\uffff\1\61\177\uffff\1\62\1\63\1\64\1\65\1\66"+
            "\1\67\1\70\1\71",
            "\1\45\177\uffff\1\51\1\44\1\42\1\46\1\52\1\43\1\47\1\50",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\72\u008f\uffff\1\73",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\14\31\7\1\36\uffff\1\74",
            "\1\55",
            "\1\75\u008f\uffff\1\76",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\77",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\73",
            "\1\32",
            "\1\100",
            "\1\76",
            "\1\32",
            "\1\101",
            "\1\102",
            "\1\32",
            "\1\32"
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "308:9: ( relaxed_day_of_week )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA57_eotS =
        "\103\uffff";
    static final String DFA57_eofS =
        "\103\uffff";
    static final String DFA57_minS =
        "\1\21\1\uffff\20\76\3\45\4\76\1\uffff\2\5\1\u00bb\3\76\1\5\1\66"+
        "\10\76\1\45\1\5\1\66\1\45\14\76\1\u00b5\2\76\1\u00b5\1\76\2\u00b5"+
        "\2\76";
    static final String DFA57_maxS =
        "\1\u00c7\1\uffff\20\76\2\u00bd\1\76\4\u00b4\1\uffff\1\27\2\u00bd"+
        "\3\76\2\u00bd\10\76\1\u00b5\2\66\1\u00b5\14\76\1\u00b5\2\76\1\u00b5"+
        "\1\76\2\u00b5\2\76";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\51\uffff";
    static final String DFA57_specialS =
        "\103\uffff}>";
    static final String[] DFA57_transitionS = {
            "\7\1\23\uffff\1\1\6\uffff\1\1\4\uffff\1\1\4\uffff\2\1\1\31\11"+
            "\uffff\11\25\1\uffff\11\26\3\25\13\27\10\30\104\1\1\2\1\4\1"+
            "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\22\1\14\1\15\1\16\1\17\1\20"+
            "\1\21\1\23\1\24\1\3",
            "",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\34\30\uffff\1\33\174\uffff\1\36\1\35\1\37",
            "\1\41\20\uffff\1\52\7\uffff\1\40\167\uffff\1\43\1\46\1\50\1"+
            "\45\1\42\1\47\1\51\1\44",
            "\1\54\20\uffff\1\55\7\uffff\1\53",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "",
            "\14\31\7\1",
            "\14\31\7\1\u00a3\uffff\1\56\1\57\1\60",
            "\1\36\1\35\1\37",
            "\1\32",
            "\1\32",
            "\1\32",
            "\14\31\7\1\36\uffff\1\61\177\uffff\1\62\1\63\1\64\1\65\1\66"+
            "\1\67\1\70\1\71",
            "\1\52\177\uffff\1\43\1\46\1\50\1\45\1\42\1\47\1\51\1\44",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\72\u008f\uffff\1\73",
            "\14\31\7\1\36\uffff\1\74",
            "\1\55",
            "\1\75\u008f\uffff\1\76",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\77",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\73",
            "\1\32",
            "\1\100",
            "\1\76",
            "\1\32",
            "\1\101",
            "\1\102",
            "\1\32",
            "\1\32"
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "312:38: ( relaxed_day_of_week )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA62_eotS =
        "\104\uffff";
    static final String DFA62_eofS =
        "\3\uffff\27\2\4\uffff\3\2\2\uffff\3\2\1\uffff\5\2\3\uffff\3\2\1"+
        "\uffff\10\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2";
    static final String DFA62_minS =
        "\1\63\1\5\1\uffff\27\5\1\uffff\2\5\1\u00bb\4\5\1\66\3\5\1\45\6\5"+
        "\1\66\1\45\3\5\1\76\10\5\1\u00b5\1\5\1\76\1\u00b5\1\5\2\u00b5\2"+
        "\5";
    static final String DFA62_maxS =
        "\2\u00c7\1\uffff\4\u00b4\20\104\2\u00bd\1\104\1\uffff\1\72\2\u00bd"+
        "\3\104\2\u00bd\3\104\1\u00b5\5\104\1\72\1\66\1\u00b5\3\104\1\76"+
        "\10\104\1\u00b5\1\104\1\76\1\u00b5\1\104\2\u00b5\2\104";
    static final String DFA62_acceptS =
        "\2\uffff\1\2\27\uffff\1\1\51\uffff";
    static final String DFA62_specialS =
        "\104\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\2\12\uffff\1\1\5\uffff\1\2\3\uffff\11\2\1\uffff\37\2\104"+
            "\uffff\23\2",
            "\14\2\13\uffff\1\2\26\uffff\1\32\4\uffff\2\2\4\uffff\1\32\5"+
            "\uffff\1\32\3\uffff\11\3\1\uffff\11\4\3\3\13\5\10\6\104\2\1"+
            "\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\27\1\21\1\22\1"+
            "\23\1\24\1\25\1\26\1\30\1\31\1\10",
            "",
            "\14\32\24\uffff\1\32\30\uffff\1\33\5\uffff\2\32\2\uffff\11"+
            "\2\1\uffff\143\2",
            "\14\32\24\uffff\1\32\30\uffff\1\33\5\uffff\2\32\2\uffff\11"+
            "\2\1\uffff\143\2",
            "\14\32\24\uffff\1\32\30\uffff\1\33\5\uffff\2\32\2\uffff\11"+
            "\2\1\uffff\143\2",
            "\14\32\24\uffff\1\32\30\uffff\1\33\5\uffff\2\32\2\uffff\11"+
            "\2\1\uffff\143\2",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\24\uffff\1\35\30\uffff\1\34\5\uffff\1\32\166\uffff\1"+
            "\37\1\40\1\36",
            "\14\32\24\uffff\1\42\20\uffff\1\46\7\uffff\1\41\5\uffff\1\32"+
            "\161\uffff\1\52\1\45\1\47\1\53\1\50\1\51\1\43\1\44",
            "\14\32\24\uffff\1\55\20\uffff\1\56\7\uffff\1\54\5\uffff\1\32",
            "",
            "\14\32\13\uffff\1\2\10\uffff\1\32\24\uffff\1\32",
            "\14\32\13\uffff\1\2\10\uffff\1\32\24\uffff\1\32\u0080\uffff"+
            "\1\57\1\60\1\61",
            "\1\37\1\40\1\36",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\13\uffff\1\2\10\uffff\1\32\20\uffff\1\62\3\uffff\1\32"+
            "\173\uffff\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72",
            "\1\46\177\uffff\1\52\1\45\1\47\1\53\1\50\1\51\1\43\1\44",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\1\73\u008f\uffff\1\74",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\13\uffff\1\2\10\uffff\1\32\20\uffff\1\75\3\uffff\1\32",
            "\1\56",
            "\1\76\u008f\uffff\1\77",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\1\100",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\1\74",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\1\101",
            "\1\77",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\1\102",
            "\1\103",
            "\14\32\55\uffff\1\33\5\uffff\1\32",
            "\14\32\55\uffff\1\33\5\uffff\1\32"
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "318:46: ( WHITE_SPACE )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA69_eotS =
        "\25\uffff";
    static final String DFA69_eofS =
        "\1\uffff\7\15\10\uffff\3\16\2\uffff";
    static final String DFA69_minS =
        "\1\5\7\76\4\uffff\1\45\2\uffff\1\76\3\30\1\63\1\30";
    static final String DFA69_maxS =
        "\1\u00c7\7\104\4\uffff\1\u00c7\2\uffff\1\76\3\u00b4\1\u00c7\1\150";
    static final String DFA69_acceptS =
        "\10\uffff\1\3\1\4\1\5\1\6\1\uffff\1\2\1\1\6\uffff";
    static final String DFA69_specialS =
        "\25\uffff}>";
    static final String[] DFA69_transitionS = {
            "\14\10\1\1\1\2\1\3\1\4\1\5\1\6\1\7\10\uffff\5\13\15\uffff\1"+
            "\12\10\uffff\1\13\6\uffff\1\12\5\uffff\11\11\1\uffff\166\11",
            "\1\14\5\uffff\1\15",
            "\1\14\5\uffff\1\15",
            "\1\14\5\uffff\1\15",
            "\1\14\5\uffff\1\15",
            "\1\14\5\uffff\1\15",
            "\1\14\5\uffff\1\15",
            "\1\14\5\uffff\1\15",
            "",
            "",
            "",
            "",
            "\1\15\2\uffff\2\15\1\uffff\1\16\5\15\1\uffff\1\17\2\uffff\3"+
            "\15\2\uffff\1\15\1\uffff\2\16\11\uffff\1\15\11\20\1\15\11\21"+
            "\3\20\13\22\137\16",
            "",
            "",
            "\1\23",
            "\2\15\44\uffff\1\24\4\uffff\1\15\1\16\3\uffff\11\16\1\uffff"+
            "\143\16",
            "\2\15\44\uffff\1\24\4\uffff\1\15\1\16\3\uffff\11\16\1\uffff"+
            "\143\16",
            "\2\15\44\uffff\1\24\4\uffff\1\15\1\16\3\uffff\11\16\1\uffff"+
            "\143\16",
            "\2\15\23\uffff\11\16\1\uffff\166\16",
            "\1\15\14\uffff\1\16\2\uffff\2\16\2\uffff\5\16\1\uffff\1\16"+
            "\2\uffff\3\16\2\uffff\1\16\14\uffff\42\16"
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "387:1: relative_date : ( day_of_week WHITE_SPACE relative_date_prefix -> ^( RELATIVE_DATE ^( SEEK relative_date_prefix day_of_week ) ) | day_of_week -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] day_of_week ) ) | relaxed_month -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) ) | spelled_or_int_optional_prefix WHITE_SPACE relative_target WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix relative_target ) ) | relative_date_direction WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE relative_target -> ^( RELATIVE_DATE ^( SEEK relative_date_direction SEEK_BY[\"by_day\"] spelled_or_int_optional_prefix relative_target ) ) | named_relative_date );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA71_eotS =
        "\u01fc\uffff";
    static final String DFA71_eofS =
        "\132\uffff\14\u00fa\u0095\uffff\1\127\1\uffff\4\127\37\uffff\1\127"+
        "\1\uffff\4\127\70\uffff\7\u01be\13\uffff\14\u00fa\u0080\uffff";
    static final String DFA71_minS =
        "\1\21\25\76\3\45\26\76\1\21\6\76\3\5\1\u00bb\3\76\1\5\1\66\1\45"+
        "\10\76\1\5\1\66\1\45\2\21\2\63\1\75\1\5\1\21\1\76\1\34\3\76\1\uffff"+
        "\16\76\23\uffff\1\76\1\uffff\4\76\1\uffff\24\76\1\u00b5\2\76\1\u00b5"+
        "\31\76\3\45\10\76\1\uffff\27\76\3\45\3\76\1\34\31\uffff\1\5\1\21"+
        "\1\110\2\5\1\45\1\uffff\1\76\1\uffff\4\76\1\uffff\1\34\2\5\2\u00b5"+
        "\1\5\1\21\1\u00bb\3\76\1\21\1\66\4\76\1\45\4\76\1\21\1\66\1\45\1"+
        "\5\2\33\2\5\6\76\2\5\1\u00bb\3\76\1\5\1\66\3\76\1\45\5\76\1\5\1"+
        "\66\1\45\5\76\1\34\1\64\1\76\10\uffff\1\76\23\uffff\3\30\4\76\1"+
        "\30\1\5\46\76\1\u00b5\2\76\1\u00b5\5\76\1\5\16\uffff\14\76\1\u00b5"+
        "\2\76\1\u00b5\2\76\1\63\1\0\1\uffff\4\0\1\uffff\1\30\10\uffff\1"+
        "\0\5\uffff\1\34\2\5\1\45\1\53\2\5\2\u00b5\1\5\2\u00b5\27\uffff\2"+
        "\76\3\uffff\6\76";
    static final String DFA71_maxS =
        "\1\u00cb\1\76\4\u00b4\20\76\2\u00bd\15\76\2\u00b4\1\76\7\104\1\u00cb"+
        "\6\76\3\u00c7\1\u00bd\3\76\1\u00c7\1\u00bd\1\u00b5\10\76\1\u00c7"+
        "\1\66\1\u00b5\1\27\1\33\1\u00c7\1\64\2\u00c7\1\27\1\76\1\u00c7\3"+
        "\76\1\uffff\2\76\14\104\23\uffff\1\u00b4\1\uffff\4\u00b4\1\uffff"+
        "\1\76\7\104\14\76\1\u00b5\2\76\1\u00b5\31\76\2\u00bd\1\76\4\u00b4"+
        "\4\76\1\uffff\2\76\5\u00b4\20\76\2\u00bd\1\76\1\u00b4\2\76\1\u00c7"+
        "\31\uffff\1\u00c7\1\33\4\u00c7\1\uffff\1\104\1\uffff\4\104\1\uffff"+
        "\3\u00c7\2\u00b5\1\u00c7\2\u00bd\3\76\2\u00bd\4\76\1\u00b5\4\76"+
        "\2\66\1\u00b5\1\u00c7\2\33\2\u00c7\1\104\1\76\4\104\1\35\2\u00bd"+
        "\3\76\2\u00bd\3\76\1\u00b5\5\76\2\66\1\u00b5\5\76\1\u00c7\1\64\1"+
        "\76\10\uffff\1\76\23\uffff\6\u00b4\1\104\1\u00b4\1\150\4\76\5\u00b4"+
        "\14\104\21\76\1\u00b5\2\76\1\u00b5\5\76\1\150\16\uffff\14\76\1\u00b5"+
        "\2\76\1\u00b5\2\76\1\u00c7\1\0\1\uffff\4\0\1\uffff\1\150\10\uffff"+
        "\1\0\5\uffff\7\u00c7\2\u00b5\1\u00c7\2\u00b5\27\uffff\2\76\3\uffff"+
        "\6\76";
    static final String DFA71_acceptS =
        "\127\uffff\1\7\16\uffff\23\1\1\uffff\1\1\4\uffff\1\2\74\uffff\1"+
        "\3\36\uffff\31\4\6\uffff\1\6\1\uffff\1\1\4\uffff\1\1\100\uffff\5"+
        "\1\3\2\1\uffff\23\2\71\uffff\1\4\15\1\24\uffff\1\2\4\uffff\1\2\1"+
        "\uffff\1\2\1\5\6\2\1\uffff\5\5\14\uffff\27\2\2\uffff\1\1\2\2\6\uffff";
    static final String DFA71_specialS =
        "\66\uffff\1\41\1\16\1\20\4\uffff\1\15\12\uffff\1\47\7\uffff\1\17"+
        "\2\uffff\1\57\45\uffff\1\25\1\uffff\1\26\1\23\1\53\1\24\133\uffff"+
        "\1\42\31\uffff\1\5\2\uffff\1\37\1\56\1\0\10\uffff\1\64\1\12\1\51"+
        "\2\uffff\1\60\23\uffff\1\10\2\uffff\1\14\1\1\6\uffff\1\22\1\21\4"+
        "\uffff\1\66\12\uffff\1\4\7\uffff\1\11\36\uffff\1\52\1\55\1\54\1"+
        "\32\1\44\1\33\1\27\1\34\1\46\57\uffff\1\36\40\uffff\1\2\1\65\1\uffff"+
        "\1\61\1\62\1\35\1\40\1\uffff\1\63\10\uffff\1\7\5\uffff\1\31\1\30"+
        "\1\3\1\13\1\6\1\50\1\43\2\uffff\1\45\44\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\21\uffff\1\37\1\uffff\1"+
            "\44\6\uffff\1\36\1\1\1\40\2\uffff\1\47\4\uffff\1\43\1\35\2\uffff"+
            "\1\41\1\42\6\uffff\11\2\1\uffff\11\3\3\2\13\4\10\5\34\45\50"+
            "\46\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\26\1\20\1"+
            "\21\1\22\1\23\1\24\1\25\1\27\1\30\1\7\1\31\1\32\1\33\1\34",
            "\1\57",
            "\1\66\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64\50"+
            "\65",
            "\1\66\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64\50"+
            "\65",
            "\1\66\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64\50"+
            "\65",
            "\1\66\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64\50"+
            "\65",
            "\1\66",
            "\1\67",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\71\30\uffff\1\70\174\uffff\1\73\1\74\1\72",
            "\1\76\20\uffff\1\77\7\uffff\1\75\167\uffff\1\102\1\103\1\101"+
            "\1\100\1\107\1\104\1\105\1\106",
            "\1\111\20\uffff\1\112\7\uffff\1\110",
            "\1\113",
            "\1\113",
            "\1\113",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\120",
            "\1\121",
            "\1\121",
            "\1\121\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64"+
            "\50\65",
            "\1\121\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64"+
            "\50\65",
            "\1\121",
            "\1\123\5\uffff\1\122",
            "\1\123\5\uffff\1\122",
            "\1\123\5\uffff\1\122",
            "\1\123\5\uffff\1\122",
            "\1\123\5\uffff\1\122",
            "\1\123\5\uffff\1\122",
            "\1\123\5\uffff\1\122",
            "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\23\uffff\1\44\6\uffff\1"+
            "\126\4\uffff\1\47\4\uffff\1\43\1\125\2\uffff\2\127\6\uffff\11"+
            "\2\1\uffff\11\3\3\2\13\4\10\5\34\45\50\46\1\6\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\16\1\17\1\26\1\20\1\21\1\22\1\23\1\24\1\25"+
            "\1\27\1\30\1\124\1\31\1\32\1\33\1\34",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\50\1\51\1\52\1\53\1\54\1\55\1\56\5\uffff\1\177"+
            "\32\uffff\1\131\1\130\15\uffff\1\127\11\171\1\uffff\11\172\3"+
            "\171\13\173\10\174\34\175\50\176\1\146\1\150\1\151\1\152\1\153"+
            "\1\154\1\155\1\156\1\157\1\166\1\160\1\161\1\162\1\163\1\164"+
            "\1\165\1\167\1\170\1\147",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\u0087\3\uffff\1\u0080\1\uffff\1\177\32\uffff\1\131\1\130"+
            "\15\uffff\1\127\11\171\1\uffff\11\172\3\171\13\173\10\174\34"+
            "\175\50\176\1\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156"+
            "\1\157\1\166\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170"+
            "\1\147",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\50\1\51\1\52\1\53\1\54\1\55\1\56\5\uffff\1\177"+
            "\32\uffff\1\131\1\130\15\uffff\1\127\11\171\1\uffff\11\172\3"+
            "\171\13\173\10\174\34\175\50\176\1\146\1\150\1\151\1\152\1\153"+
            "\1\154\1\u0088\1\u0089\1\u008a\1\166\1\160\1\161\1\162\1\163"+
            "\1\164\1\165\1\167\1\170\1\147",
            "\1\73\1\74\1\72",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\50\1\51\1\52\1\53\1\54\1\55\1\56\5\uffff\1\177"+
            "\30\uffff\1\u008b\1\uffff\1\131\1\130\15\uffff\1\127\11\171"+
            "\1\uffff\11\172\3\171\13\173\10\174\34\175\50\176\1\146\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\166"+
            "\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\77\177\uffff\1\102\1\103\1\101\1\100\1\107\1\104\1\105\1"+
            "\106",
            "\1\u0094\u008f\uffff\1\u0095",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\66",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\50\1\51\1\52\1\53\1\54\1\55\1\56\5\uffff\1\177"+
            "\30\uffff\1\u0096\1\uffff\1\131\1\130\15\uffff\1\127\11\171"+
            "\1\uffff\11\172\3\171\13\173\10\174\34\175\50\176\1\146\1\150"+
            "\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\166\1\160\1\161"+
            "\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\112",
            "\1\u0097\u008f\uffff\1\u0098",
            "\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f",
            "\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\3"+
            "\uffff\1\u00a0",
            "\1\127\1\40\23\uffff\11\u00b4\1\uffff\11\u00b5\3\u00b4\13\u00b6"+
            "\10\u00b7\34\45\50\46\1\u00a1\1\u00a3\1\u00a4\1\u00a5\1\u00a6"+
            "\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00b1\1\u00ab\1\u00ac\1\u00ad"+
            "\1\u00ae\1\u00af\1\u00b0\1\u00b2\1\u00b3\1\u00a2",
            "\1\127\1\40",
            "\1\u00bb\2\uffff\1\u00b8\1\u00ba\u0085\uffff\1\u00b9",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\32\uffff\1\u00be\1\u00bd"+
            "\15\uffff\1\127\11\u00bf\1\uffff\11\u00d7\3\u00bf\13\u00c0\10"+
            "\u00c1\34\u00c2\50\u00c3\1\u00c4\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
            "\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00d4\1\u00ce\1\u00cf\1\u00d0"+
            "\1\u00d1\1\u00d2\1\u00d3\1\u00d5\1\u00d6\1\u00c5",
            "\1\50\1\51\1\52\1\53\1\54\1\55\1\56",
            "\1\123",
            "\1\u00bc\33\uffff\1\u00d9\1\u00d8\4\uffff\1\u00da\11\uffff"+
            "\11\u00ee\1\uffff\11\u00ef\3\u00ee\13\u00f0\10\u00f1\34\u00f2"+
            "\50\u00f3\1\u00db\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1"+
            "\u00e2\1\u00e3\1\u00e4\1\u00eb\1\u00e5\1\u00e6\1\u00e7\1\u00e8"+
            "\1\u00e9\1\u00ea\1\u00ec\1\u00ed\1\u00dc",
            "\1\u00f4",
            "\1\u00f5",
            "\1\u00f6",
            "",
            "\1\u00f7",
            "\1\u00f8",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "\1\u00f9\5\uffff\1\u00fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0101\10\uffff\1\127\11\u00fb\1\uffff\11\u00fc\3\u00fb\13"+
            "\u00fd\10\u00fe\34\u00ff\50\u0100",
            "",
            "\1\u0101\10\uffff\1\127\11\u00fb\1\uffff\11\u00fc\3\u00fb\13"+
            "\u00fd\10\u00fe\34\u00ff\50\u0100",
            "\1\u0101\10\uffff\1\127\11\u00fb\1\uffff\11\u00fc\3\u00fb\13"+
            "\u00fd\10\u00fe\34\u00ff\50\u0100",
            "\1\u0101\10\uffff\1\127\11\u00fb\1\uffff\11\u00fc\3\u00fb\13"+
            "\u00fd\10\u00fe\34\u00ff\50\u0100",
            "\1\u0101\10\uffff\1\127\11\u00fb\1\uffff\11\u00fc\3\u00fb\13"+
            "\u00fd\10\u00fe\34\u00ff\50\u0100",
            "",
            "\1\u0102",
            "\1\u0103\5\uffff\1\122",
            "\1\u0103\5\uffff\1\122",
            "\1\u0103\5\uffff\1\122",
            "\1\u0103\5\uffff\1\122",
            "\1\u0103\5\uffff\1\122",
            "\1\u0103\5\uffff\1\122",
            "\1\u0103\5\uffff\1\122",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0105",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0104",
            "\1\u0095",
            "\1\66",
            "\1\u0106",
            "\1\u0098",
            "\1\66",
            "\1\u0107",
            "\1\u0107",
            "\1\u0107",
            "\1\u0107",
            "\1\u0107",
            "\1\u0107",
            "\1\u0107",
            "\1\120",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\u0109\30\uffff\1\u0108\174\uffff\1\u010b\1\u010c\1\u010a",
            "\1\u010e\20\uffff\1\u0113\7\uffff\1\u010d\167\uffff\1\u0116"+
            "\1\u010f\1\u0112\1\u0115\1\u0117\1\u0110\1\u0111\1\u0114",
            "\1\u0119\20\uffff\1\u011a\7\uffff\1\u0118",
            "\1\121\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64"+
            "\50\65",
            "\1\121\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64"+
            "\50\65",
            "\1\121\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64"+
            "\50\65",
            "\1\121\11\uffff\11\60\1\uffff\11\61\3\60\13\62\10\63\34\64"+
            "\50\65",
            "\1\u011b",
            "\1\u011c",
            "\1\u011b",
            "\1\u011d",
            "",
            "\1\u011e",
            "\1\u011f",
            "\1\u0126\10\uffff\1\127\11\u0120\1\uffff\11\u0121\3\u0120\13"+
            "\u0122\10\u0123\34\u0124\50\u0125",
            "\1\u0126\10\uffff\1\127\11\u0120\1\uffff\11\u0121\3\u0120\13"+
            "\u0122\10\u0123\34\u0124\50\u0125",
            "\1\u0126\10\uffff\1\127\11\u0120\1\uffff\11\u0121\3\u0120\13"+
            "\u0122\10\u0123\34\u0124\50\u0125",
            "\1\u0126\10\uffff\1\127\11\u0120\1\uffff\11\u0121\3\u0120\13"+
            "\u0122\10\u0123\34\u0124\50\u0125",
            "\1\u0126\10\uffff\1\127\11\u0120\1\uffff\11\u0121\3\u0120\13"+
            "\u0122\10\u0123\34\u0124\50\u0125",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0128\30\uffff\1\u0127\174\uffff\1\u0129\1\u012a\1\u012b",
            "\1\u012d\20\uffff\1\u0131\7\uffff\1\u012c\167\uffff\1\u0132"+
            "\1\u0133\1\u012f\1\u0136\1\u0134\1\u0130\1\u012e\1\u0135",
            "\1\u0138\20\uffff\1\u0139\7\uffff\1\u0137",
            "\1\u0126\11\uffff\11\u013a\1\uffff\11\u0121\3\u013a\13\u013b"+
            "\10\u013c\34\u013d\50\u013e",
            "\1\u013f",
            "\1\u0140",
            "\1\u00bc\33\uffff\1\u00d9\1\u00d8\16\uffff\11\u00ee\1\uffff"+
            "\11\u00ef\3\u00ee\13\u00f0\10\u00f1\34\u00f2\50\u00f3\1\u00db"+
            "\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4"+
            "\1\u00eb\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00ec"+
            "\1\u00ed\1\u00dc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086"+
            "\1\u0087\5\uffff\1\177\32\uffff\1\131\1\130\15\uffff\1\127\11"+
            "\171\1\uffff\11\172\3\171\13\173\10\174\34\175\50\176\1\146"+
            "\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\166\1\160"+
            "\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\3"+
            "\uffff\1\127",
            "\11\u00b4\1\uffff\11\u00b5\3\u00b4\13\u00b6\10\u00b7\34\45"+
            "\50\46\1\u00a1\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8"+
            "\1\u00a9\1\u00aa\1\u00b1\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af"+
            "\1\u00b0\1\u00b2\1\u00b3\1\u00a2",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\14\uffff\1\177\51\uffff\1\127\11\171\1\uffff\11"+
            "\172\3\171\13\173\10\174\34\175\50\176\1\146\1\150\1\151\1\152"+
            "\1\153\1\154\1\155\1\156\1\157\1\166\1\160\1\161\1\162\1\163"+
            "\1\164\1\165\1\167\1\170\1\147",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\14\uffff\1\177\26\uffff\1\u0141\23\uffff\11\u0142"+
            "\1\uffff\11\172\3\u0142\13\u0143\10\u0144\34\u0145\50\u0146"+
            "\1\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\166"+
            "\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\u00fa\2\uffff\2\u00fa\1\uffff\1\u0149\5\u00fa\1\uffff\1"+
            "\u014a\2\uffff\2\u00fa\1\u0164\2\uffff\1\u00fa\1\uffff\1\u0148"+
            "\1\u0147\11\uffff\1\u0165\11\u015e\1\u00fa\11\u015f\3\u015e"+
            "\13\u0160\10\u0161\34\u0162\50\u0163\1\u014b\1\u014d\1\u014e"+
            "\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u015b\1\u0155"+
            "\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015c\1\u015d\1\u014c",
            "",
            "\1\u0166\5\uffff\1\127",
            "",
            "\1\u0166\5\uffff\1\127",
            "\1\u0166\5\uffff\1\127",
            "\1\u0166\5\uffff\1\127",
            "\1\u0166\5\uffff\1\127",
            "",
            "\1\u00bc\33\uffff\1\u0168\1\u0167\16\uffff\11\u00ee\1\uffff"+
            "\11\u00ef\3\u00ee\13\u00f0\10\u00f1\34\u00f2\50\u00f3\1\u00db"+
            "\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4"+
            "\1\u00eb\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00ec"+
            "\1\u00ed\1\u00dc",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\32\uffff\1\u016a\1\u0169"+
            "\4\uffff\1\u00da\11\uffff\11\u016b\1\uffff\11\u00d7\3\u016b"+
            "\13\u016c\10\u016d\34\u016e\50\u016f\1\u00c4\1\u00c6\1\u00c7"+
            "\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00d4\1\u00ce"+
            "\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d5\1\u00d6\1\u00c5",
            "\1\u0170\1\u0171\1\u0172\1\u0173\1\u0174\1\u0175\1\u0176\1"+
            "\u0177\1\u0178\1\u0179\1\u017a\1\u017b\1\50\1\51\1\52\1\53\1"+
            "\54\1\55\1\56\5\uffff\1\u017c\32\uffff\1\131\1\130\15\uffff"+
            "\1\127\11\171\1\uffff\11\172\3\171\13\173\10\174\34\175\50\176"+
            "\1\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\166"+
            "\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\u017d",
            "\1\u017e",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\14\uffff\1\177\32\uffff\1\u0180\1\u017f\16\uffff"+
            "\11\u0142\1\uffff\11\172\3\u0142\13\u0143\10\u0144\34\u0145"+
            "\50\u0146\1\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1"+
            "\157\1\166\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1"+
            "\147",
            "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\u00a3\uffff\1\u0181\1\u0182"+
            "\1\u0183",
            "\1\u010b\1\u010c\1\u010a",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\36\uffff\1\u0184\177\uffff"+
            "\1\u0185\1\u0186\1\u0187\1\u0188\1\u0189\1\u018a\1\u018b\1\u018c",
            "\1\u0113\177\uffff\1\u0116\1\u010f\1\u0112\1\u0115\1\u0117"+
            "\1\u0110\1\u0111\1\u0114",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\u018d\u008f\uffff\1\u018e",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\36\uffff\1\u018f",
            "\1\u011a",
            "\1\u0190\u008f\uffff\1\u0191",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\32\uffff\1\u0193\1\u0192"+
            "\16\uffff\11\u016b\1\uffff\11\u00d7\3\u016b\13\u016c\10\u016d"+
            "\34\u016e\50\u016f\1\u00c4\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1"+
            "\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00d4\1\u00ce\1\u00cf\1\u00d0"+
            "\1\u00d1\1\u00d2\1\u00d3\1\u00d5\1\u00d6\1\u00c5",
            "\1\u0080",
            "\1\u0194",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\51\uffff\1\127\11\u00bf"+
            "\1\uffff\11\u00d7\3\u00bf\13\u00c0\10\u00c1\34\u00c2\50\u00c3"+
            "\1\u00c4\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc"+
            "\1\u00cd\1\u00d4\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3"+
            "\1\u00d5\1\u00d6\1\u00c5",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\26\uffff\1\u0195\22\uffff"+
            "\1\127\11\u00bf\1\uffff\11\u00d7\3\u00bf\13\u00c0\10\u00c1\34"+
            "\u00c2\50\u00c3\1\u00c4\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca"+
            "\1\u00cb\1\u00cc\1\u00cd\1\u00d4\1\u00ce\1\u00cf\1\u00d0\1\u00d1"+
            "\1\u00d2\1\u00d3\1\u00d5\1\u00d6\1\u00c5",
            "\1\u0196\5\uffff\1\127",
            "\1\u0126",
            "\1\u0196\5\uffff\1\127",
            "\1\u0196\5\uffff\1\127",
            "\1\u0196\5\uffff\1\127",
            "\1\u0196\5\uffff\1\127",
            "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1"+
            "\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\13\uffff\1\u0197\1\u01a4",
            "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1"+
            "\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\13\uffff\1\u0197\1\u01a4"+
            "\u009d\uffff\1\u01a5\1\u01a6\1\u01a7",
            "\1\u0129\1\u012a\1\u012b",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1"+
            "\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\13\uffff\1\u0197\1\u01a4"+
            "\30\uffff\1\u01a8\177\uffff\1\u01a9\1\u01aa\1\u01ab\1\u01ac"+
            "\1\u01ad\1\u01ae\1\u01af\1\u01b0",
            "\1\u0131\177\uffff\1\u0132\1\u0133\1\u012f\1\u0136\1\u0134"+
            "\1\u0130\1\u012e\1\u0135",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u01b1\u008f\uffff\1\u01b2",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1"+
            "\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\13\uffff\1\u0197\1\u01a4"+
            "\30\uffff\1\u01b3",
            "\1\u0139",
            "\1\u01b4\u008f\uffff\1\u01b5",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u00bc\53\uffff\11\u00ee\1\uffff\11\u00ef\3\u00ee\13\u00f0"+
            "\10\u00f1\34\u00f2\50\u00f3\1\u00db\1\u00dd\1\u00de\1\u00df"+
            "\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00eb\1\u00e5\1\u00e6"+
            "\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00ec\1\u00ed\1\u00dc",
            "\1\u01b6",
            "\1\u00f7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01b7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\u00fa\44\uffff\1\u01bf\4\uffff\1\u00fa\1\u01c0\2\uffff\1"+
            "\u01c1\11\u01b8\1\uffff\11\u01b9\3\u01b8\13\u01ba\10\u01bb\34"+
            "\u01bc\50\u01bd",
            "\2\u00fa\44\uffff\1\u01bf\4\uffff\1\u00fa\1\u01c0\3\uffff\11"+
            "\u01c2\1\uffff\11\u01b9\3\u01c2\13\u01c3\10\u01c4\34\u01c5\50"+
            "\u01c6",
            "\2\u00fa\44\uffff\1\u01bf\4\uffff\1\u00fa\1\u01c0\2\uffff\1"+
            "\u01c1\11\u01b8\1\uffff\11\u01b9\3\u01b8\13\u01ba\10\u01bb\34"+
            "\u01bc\50\u01bd",
            "\1\u01c7\5\uffff\1\u01c0\2\uffff\1\u01c1\11\u01b8\1\uffff\11"+
            "\u01b9\3\u01b8\13\u01ba\10\u01bb\34\u01bc\50\u01bd",
            "\1\u01c7\5\uffff\1\u01c0\2\uffff\1\u01c1\11\u01b8\1\uffff\11"+
            "\u01b9\3\u01b8\13\u01ba\10\u01bb\34\u01bc\50\u01bd",
            "\1\u01c7\5\uffff\1\u01c0\2\uffff\1\u01c1\11\u01b8\1\uffff\11"+
            "\u01b9\3\u01b8\13\u01ba\10\u01bb\34\u01bc\50\u01bd",
            "\1\u01c8\5\uffff\1\u01c0",
            "\2\u00fa\44\uffff\1\u00fa\4\uffff\1\u00fa\3\uffff\1\u01c1\11"+
            "\u01c9\12\uffff\3\u01c9\13\u01ca\10\u01cb\34\u01cc\50\u01cd",
            "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1"+
            "\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\14\uffff\1\u01a4\7\uffff"+
            "\1\127\2\uffff\2\127\2\uffff\5\127\1\uffff\1\127\2\uffff\3\127"+
            "\2\uffff\1\127\14\uffff\42\127",
            "\1\u013f",
            "\1\u01ce",
            "\1\u01cf",
            "\1\u01d0",
            "\1\u0126\11\uffff\11\u013a\1\uffff\11\u0121\3\u013a\13\u013b"+
            "\10\u013c\34\u013d\50\u013e",
            "\1\u0126\11\uffff\11\u013a\1\uffff\11\u0121\3\u013a\13\u013b"+
            "\10\u013c\34\u013d\50\u013e",
            "\1\u0126\11\uffff\11\u013a\1\uffff\11\u0121\3\u013a\13\u013b"+
            "\10\u013c\34\u013d\50\u013e",
            "\1\u0126\11\uffff\11\u013a\1\uffff\11\u0121\3\u013a\13\u013b"+
            "\10\u013c\34\u013d\50\u013e",
            "\1\u0126\11\uffff\11\u013a\1\uffff\11\u0121\3\u013a\13\u013b"+
            "\10\u013c\34\u013d\50\u013e",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d1\5\uffff\1\u00fa",
            "\1\u01d2",
            "\1\66",
            "\1\66",
            "\1\u01d3",
            "\1\u01d4",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\u01d5",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\121",
            "\1\u018e",
            "\1\121",
            "\1\u01d6",
            "\1\u0191",
            "\1\121",
            "\1\u01cf",
            "\1\u01d7",
            "\1\u011b",
            "\1\u011e",
            "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1"+
            "\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\13\uffff\1\u0197\1\u01a4"+
            "\7\uffff\1\127\2\uffff\2\127\2\uffff\5\127\1\uffff\1\127\2\uffff"+
            "\3\127\2\uffff\1\127\14\uffff\42\127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u01d8",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u0126",
            "\1\u01b2",
            "\1\u0126",
            "\1\u01d9",
            "\1\u01b5",
            "\1\u0126",
            "\1\u013f",
            "\2\u00fa\23\uffff\11\u01da\1\uffff\11\u01db\3\u01da\13\u01dc"+
            "\10\u01dd\34\u01de\50\u01df\1\u014b\1\u014d\1\u014e\1\u014f"+
            "\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u015b\1\u0155\1\u0156"+
            "\1\u0157\1\u0158\1\u0159\1\u015a\1\u015c\1\u015d\1\u014c",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\u00fa\14\uffff\1\u01e3\2\uffff\1\u01e1\1\u01e4\2\uffff\1"+
            "\u01ef\1\u01ec\1\u01ed\1\u01f0\1\u01ee\1\uffff\1\u01eb\2\uffff"+
            "\2\u01e0\1\u01ea\2\uffff\1\u01e2\14\uffff\1\u01e5\11\u01e8\1"+
            "\u01e6\11\u01e7\3\u01e8\13\u01e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\u00bc\27\uffff\1\u01f1\23\uffff\11\u00ee\1\uffff\11\u00ef"+
            "\3\u00ee\13\u00f0\10\u00f1\34\u00f2\50\u00f3\1\u00db\1\u00dd"+
            "\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00eb"+
            "\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00ec\1\u00ed"+
            "\1\u00dc",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\52\uffff\11\u016b\1\uffff"+
            "\11\u00d7\3\u016b\13\u016c\10\u016d\34\u016e\50\u016f\1\u00c4"+
            "\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd"+
            "\1\u00d4\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d5"+
            "\1\u00d6\1\u00c5",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\14\uffff\1\177\26\uffff\1\u01f2\23\uffff\11\u0142"+
            "\1\uffff\11\172\3\u0142\13\u0143\10\u0144\34\u0145\50\u0146"+
            "\1\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\166"+
            "\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\u00fa\2\uffff\2\u00fa\1\uffff\1\u0149\5\u00fa\1\uffff\1"+
            "\u014a\2\uffff\2\u00fa\1\u0164\2\uffff\1\u00fa\1\uffff\1\u0148"+
            "\1\u0147\1\uffff\1\u01f3\7\uffff\1\u0165\11\u015e\1\u00fa\11"+
            "\u015f\3\u015e\13\u0160\10\u0161\34\u0162\50\u0163\1\u014b\1"+
            "\u014d\1\u014e\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154"+
            "\1\u015b\1\u0155\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015c"+
            "\1\u015d\1\u014c",
            "\1\u0149\6\uffff\1\u01f4\4\uffff\1\u01f5\4\uffff\1\u0148\1"+
            "\u0147\1\uffff\1\u01f3\10\uffff\11\u01da\1\uffff\11\u01db\3"+
            "\u01da\13\u01dc\10\u01dd\34\u01de\50\u01df\1\u014b\1\u014d\1"+
            "\u014e\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u015b"+
            "\1\u0155\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015c\1\u015d"+
            "\1\u014c",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\14\uffff\1\177\52\uffff\11\u0142\1\uffff\11\172"+
            "\3\u0142\13\u0143\10\u0144\34\u0145\50\u0146\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\166\1\160\1\161\1\162"+
            "\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\14\uffff\1\177\26\uffff\1\u01f6\23\uffff\11\u0142"+
            "\1\uffff\11\172\3\u0142\13\u0143\10\u0144\34\u0145\50\u0146"+
            "\1\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\166"+
            "\1\160\1\161\1\162\1\163\1\164\1\165\1\167\1\170\1\147",
            "\1\u01f7",
            "\1\u01f8",
            "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\13\uffff\1\u00bc\1\177\26\uffff\1\u01f9\23\uffff"+
            "\11\u016b\1\uffff\11\u00d7\3\u016b\13\u016c\10\u016d\34\u016e"+
            "\50\u016f\1\u00c4\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1"+
            "\u00cb\1\u00cc\1\u00cd\1\u00d4\1\u00ce\1\u00cf\1\u00d0\1\u00d1"+
            "\1\u00d2\1\u00d3\1\u00d5\1\u00d6\1\u00c5",
            "\1\u01fa",
            "\1\u01fb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u013f",
            "\1\u01cf",
            "",
            "",
            "",
            "\1\u01d3",
            "\1\121",
            "\1\121",
            "\1\u01cf",
            "\1\u0126",
            "\1\u0126"
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "421:1: explicit_relative_date : ( ( explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_month_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE explicit_relative_month WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix explicit_relative_month ) explicit_day_of_month_part ) | ( explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix )=> explicit_day_of_month_part WHITE_SPACE explicit_relative_month WHITE_SPACE prefix -> ^( RELATIVE_DATE ^( SEEK prefix explicit_relative_month ) explicit_day_of_month_part ) | ( explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix )=> explicit_day_of_week_part WHITE_SPACE SEMAINE WHITE_SPACE prefix -> ^( RELATIVE_DATE ^( SEEK prefix SPAN[\"week\"] ) explicit_day_of_week_part ) | ( explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix )=> explicit_day_of_week_part WHITE_SPACE spelled_or_int_optional_prefix WHITE_SPACE SEMAINE WHITE_SPACE relative_date_suffix -> ^( RELATIVE_DATE ^( SEEK relative_date_suffix spelled_or_int_optional_prefix SPAN[\"week\"] ) explicit_day_of_week_part ) | ( explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year )=> explicit_day_of_month_part WHITE_SPACE relaxed_month WHITE_SPACE relaxed_year -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ^( EXPLICIT_SEEK relaxed_year ) ) | explicit_day_of_month_part WHITE_SPACE relaxed_month -> ^( RELATIVE_DATE ^( SEEK DIRECTION[\">\"] SEEK_BY[\"by_day\"] INT[\"0\"] relaxed_month ) explicit_day_of_month_part ) | explicit_day_of_year_part WHITE_SPACE relaxed_year -> ^( RELATIVE_DATE ^( EXPLICIT_SEEK relaxed_year ) explicit_day_of_year_part ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_249 = input.LA(1);

                         
                        int index71_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_249==DASH||(LA71_249>=JUSQU_A && LA71_249<=A)||(LA71_249>=MINUIT && LA71_249<=NUIT)||(LA71_249>=OU && LA71_249<=ET)||LA71_249==AU||LA71_249==INT_0) ) {s = 250;}

                        else if ( (LA71_249==DERNIER) && (synpred17_DateParser())) {s = 327;}

                        else if ( (LA71_249==SUIVANT) && (synpred17_DateParser())) {s = 328;}

                        else if ( (LA71_249==PASSE) && (synpred17_DateParser())) {s = 329;}

                        else if ( (LA71_249==DANS) ) {s = 330;}

                        else if ( (LA71_249==UN) && (synpred17_DateParser())) {s = 331;}

                        else if ( (LA71_249==PREMIER) && (synpred17_DateParser())) {s = 332;}

                        else if ( (LA71_249==DEUX) && (synpred17_DateParser())) {s = 333;}

                        else if ( (LA71_249==TROIS) && (synpred17_DateParser())) {s = 334;}

                        else if ( (LA71_249==QUATRE) && (synpred17_DateParser())) {s = 335;}

                        else if ( (LA71_249==CINQ) && (synpred17_DateParser())) {s = 336;}

                        else if ( (LA71_249==SIX) && (synpred17_DateParser())) {s = 337;}

                        else if ( (LA71_249==SEPT) && (synpred17_DateParser())) {s = 338;}

                        else if ( (LA71_249==HUIT) && (synpred17_DateParser())) {s = 339;}

                        else if ( (LA71_249==NEUF) && (synpred17_DateParser())) {s = 340;}

                        else if ( (LA71_249==ONZE) && (synpred17_DateParser())) {s = 341;}

                        else if ( (LA71_249==DOUZE) && (synpred17_DateParser())) {s = 342;}

                        else if ( (LA71_249==TREIZE) && (synpred17_DateParser())) {s = 343;}

                        else if ( (LA71_249==QUATORZE) && (synpred17_DateParser())) {s = 344;}

                        else if ( (LA71_249==QUINZE) && (synpred17_DateParser())) {s = 345;}

                        else if ( (LA71_249==SEIZE) && (synpred17_DateParser())) {s = 346;}

                        else if ( (LA71_249==DIX) && (synpred17_DateParser())) {s = 347;}

                        else if ( (LA71_249==VINGT) && (synpred17_DateParser())) {s = 348;}

                        else if ( (LA71_249==TRENTE) && (synpred17_DateParser())) {s = 349;}

                        else if ( ((LA71_249>=INT_01 && LA71_249<=INT_09)||(LA71_249>=INT_10 && LA71_249<=INT_12)) ) {s = 350;}

                        else if ( ((LA71_249>=INT_1 && LA71_249<=INT_9)) ) {s = 351;}

                        else if ( ((LA71_249>=INT_13 && LA71_249<=INT_23)) ) {s = 352;}

                        else if ( ((LA71_249>=INT_24 && LA71_249<=INT_31)) ) {s = 353;}

                        else if ( ((LA71_249>=INT_32 && LA71_249<=INT_59)) ) {s = 354;}

                        else if ( ((LA71_249>=INT_60 && LA71_249<=INT_99)) ) {s = 355;}

                        else if ( (LA71_249==CE) ) {s = 356;}

                        else if ( (LA71_249==INT_00) ) {s = 357;}

                         
                        input.seek(index71_249);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_287 = input.LA(1);

                         
                        int index71_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_287==LA) ) {s = 405;}

                        else if ( (LA71_287==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_287==JANVIER) ) {s = 90;}

                        else if ( (LA71_287==FEVRIER) ) {s = 91;}

                        else if ( (LA71_287==MARS) ) {s = 92;}

                        else if ( (LA71_287==AVRIL) ) {s = 93;}

                        else if ( (LA71_287==MAI) ) {s = 94;}

                        else if ( (LA71_287==JUIN) ) {s = 95;}

                        else if ( (LA71_287==JUILLET) ) {s = 96;}

                        else if ( (LA71_287==AOUT) ) {s = 97;}

                        else if ( (LA71_287==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_287==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_287==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_287==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_287==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_287==INT_00) ) {s = 87;}

                        else if ( ((LA71_287>=INT_01 && LA71_287<=INT_09)||(LA71_287>=INT_10 && LA71_287<=INT_12)) ) {s = 191;}

                        else if ( ((LA71_287>=INT_13 && LA71_287<=INT_23)) ) {s = 192;}

                        else if ( ((LA71_287>=INT_24 && LA71_287<=INT_31)) ) {s = 193;}

                        else if ( ((LA71_287>=INT_32 && LA71_287<=INT_59)) ) {s = 194;}

                        else if ( ((LA71_287>=INT_60 && LA71_287<=INT_99)) ) {s = 195;}

                        else if ( (LA71_287==UN) ) {s = 196;}

                        else if ( (LA71_287==PREMIER) ) {s = 197;}

                        else if ( (LA71_287==DEUX) ) {s = 198;}

                        else if ( (LA71_287==TROIS) ) {s = 199;}

                        else if ( (LA71_287==QUATRE) ) {s = 200;}

                        else if ( (LA71_287==CINQ) ) {s = 201;}

                        else if ( (LA71_287==SIX) ) {s = 202;}

                        else if ( (LA71_287==SEPT) ) {s = 203;}

                        else if ( (LA71_287==HUIT) ) {s = 204;}

                        else if ( (LA71_287==NEUF) ) {s = 205;}

                        else if ( (LA71_287==ONZE) ) {s = 206;}

                        else if ( (LA71_287==DOUZE) ) {s = 207;}

                        else if ( (LA71_287==TREIZE) ) {s = 208;}

                        else if ( (LA71_287==QUATORZE) ) {s = 209;}

                        else if ( (LA71_287==QUINZE) ) {s = 210;}

                        else if ( (LA71_287==SEIZE) ) {s = 211;}

                        else if ( (LA71_287==DIX) ) {s = 212;}

                        else if ( (LA71_287==VINGT) ) {s = 213;}

                        else if ( (LA71_287==TRENTE) ) {s = 214;}

                        else if ( ((LA71_287>=INT_1 && LA71_287<=INT_9)) ) {s = 215;}

                         
                        input.seek(index71_287);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_439 = input.LA(1);

                         
                        int index71_439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_439>=LE && LA71_439<=LA)) ) {s = 250;}

                        else if ( (LA71_439==UN) && (synpred17_DateParser())) {s = 331;}

                        else if ( (LA71_439==PREMIER) && (synpred17_DateParser())) {s = 332;}

                        else if ( (LA71_439==DEUX) && (synpred17_DateParser())) {s = 333;}

                        else if ( (LA71_439==TROIS) && (synpred17_DateParser())) {s = 334;}

                        else if ( (LA71_439==QUATRE) && (synpred17_DateParser())) {s = 335;}

                        else if ( (LA71_439==CINQ) && (synpred17_DateParser())) {s = 336;}

                        else if ( (LA71_439==SIX) && (synpred17_DateParser())) {s = 337;}

                        else if ( (LA71_439==SEPT) && (synpred17_DateParser())) {s = 338;}

                        else if ( (LA71_439==HUIT) && (synpred17_DateParser())) {s = 339;}

                        else if ( (LA71_439==NEUF) && (synpred17_DateParser())) {s = 340;}

                        else if ( (LA71_439==ONZE) && (synpred17_DateParser())) {s = 341;}

                        else if ( (LA71_439==DOUZE) && (synpred17_DateParser())) {s = 342;}

                        else if ( (LA71_439==TREIZE) && (synpred17_DateParser())) {s = 343;}

                        else if ( (LA71_439==QUATORZE) && (synpred17_DateParser())) {s = 344;}

                        else if ( (LA71_439==QUINZE) && (synpred17_DateParser())) {s = 345;}

                        else if ( (LA71_439==SEIZE) && (synpred17_DateParser())) {s = 346;}

                        else if ( (LA71_439==DIX) && (synpred17_DateParser())) {s = 347;}

                        else if ( (LA71_439==VINGT) && (synpred17_DateParser())) {s = 348;}

                        else if ( (LA71_439==TRENTE) && (synpred17_DateParser())) {s = 349;}

                        else if ( ((LA71_439>=INT_01 && LA71_439<=INT_09)||(LA71_439>=INT_10 && LA71_439<=INT_12)) && (synpred17_DateParser())) {s = 474;}

                        else if ( ((LA71_439>=INT_1 && LA71_439<=INT_9)) && (synpred17_DateParser())) {s = 475;}

                        else if ( ((LA71_439>=INT_13 && LA71_439<=INT_23)) && (synpred17_DateParser())) {s = 476;}

                        else if ( ((LA71_439>=INT_24 && LA71_439<=INT_31)) && (synpred17_DateParser())) {s = 477;}

                        else if ( ((LA71_439>=INT_32 && LA71_439<=INT_59)) && (synpred17_DateParser())) {s = 478;}

                        else if ( ((LA71_439>=INT_60 && LA71_439<=INT_99)) && (synpred17_DateParser())) {s = 479;}

                         
                        input.seek(index71_439);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA71_464 = input.LA(1);

                         
                        int index71_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_464==LA) ) {s = 498;}

                        else if ( (LA71_464==JANVIER) ) {s = 90;}

                        else if ( (LA71_464==FEVRIER) ) {s = 91;}

                        else if ( (LA71_464==MARS) ) {s = 92;}

                        else if ( (LA71_464==AVRIL) ) {s = 93;}

                        else if ( (LA71_464==MAI) ) {s = 94;}

                        else if ( (LA71_464==JUIN) ) {s = 95;}

                        else if ( (LA71_464==JUILLET) ) {s = 96;}

                        else if ( (LA71_464==AOUT) ) {s = 97;}

                        else if ( (LA71_464==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_464==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_464==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_464==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_464==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_464==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_464==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_464==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_464==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_464==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_464==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_464==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_464==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_464==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_464==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_464==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_464==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_464==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_464==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_464==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_464==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_464==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_464==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_464>=INT_01 && LA71_464<=INT_09)||(LA71_464>=INT_10 && LA71_464<=INT_12)) && (synpred16_DateParser())) {s = 322;}

                        else if ( ((LA71_464>=INT_1 && LA71_464<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_464>=INT_13 && LA71_464<=INT_23)) && (synpred16_DateParser())) {s = 323;}

                        else if ( ((LA71_464>=INT_24 && LA71_464<=INT_31)) && (synpred16_DateParser())) {s = 324;}

                        else if ( ((LA71_464>=INT_32 && LA71_464<=INT_59)) && (synpred16_DateParser())) {s = 325;}

                        else if ( ((LA71_464>=INT_60 && LA71_464<=INT_99)) && (synpred16_DateParser())) {s = 326;}

                        else if ( (LA71_464==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_464);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA71_311 = input.LA(1);

                         
                        int index71_311 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_311==ET) ) {s = 435;}

                        else if ( (LA71_311==SEMAINE) && (synpred19_DateParser())) {s = 407;}

                        else if ( (LA71_311==JANVIER) && (synpred16_DateParser())) {s = 408;}

                        else if ( (LA71_311==FEVRIER) && (synpred16_DateParser())) {s = 409;}

                        else if ( (LA71_311==MARS) && (synpred16_DateParser())) {s = 410;}

                        else if ( (LA71_311==AVRIL) && (synpred16_DateParser())) {s = 411;}

                        else if ( (LA71_311==MAI) && (synpred16_DateParser())) {s = 412;}

                        else if ( (LA71_311==JUIN) && (synpred16_DateParser())) {s = 413;}

                        else if ( (LA71_311==JUILLET) && (synpred16_DateParser())) {s = 414;}

                        else if ( (LA71_311==AOUT) && (synpred16_DateParser())) {s = 415;}

                        else if ( (LA71_311==SEPTEMBRE) && (synpred16_DateParser())) {s = 416;}

                        else if ( (LA71_311==OCTOBRE) && (synpred16_DateParser())) {s = 417;}

                        else if ( (LA71_311==NOVEMBRE) && (synpred16_DateParser())) {s = 418;}

                        else if ( (LA71_311==DECEMBRE) && (synpred16_DateParser())) {s = 419;}

                        else if ( (LA71_311==MOIS) && (synpred16_DateParser())) {s = 420;}

                         
                        input.seek(index71_311);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA71_244 = input.LA(1);

                         
                        int index71_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_244==JANVIER) ) {s = 90;}

                        else if ( (LA71_244==FEVRIER) ) {s = 91;}

                        else if ( (LA71_244==MARS) ) {s = 92;}

                        else if ( (LA71_244==AVRIL) ) {s = 93;}

                        else if ( (LA71_244==MAI) ) {s = 94;}

                        else if ( (LA71_244==JUIN) ) {s = 95;}

                        else if ( (LA71_244==JUILLET) ) {s = 96;}

                        else if ( (LA71_244==AOUT) ) {s = 97;}

                        else if ( (LA71_244==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_244==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_244==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_244==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_244==DIMANCHE) ) {s = 129;}

                        else if ( (LA71_244==LUNDI) ) {s = 130;}

                        else if ( (LA71_244==MARDI) ) {s = 131;}

                        else if ( (LA71_244==MERCREDI) ) {s = 132;}

                        else if ( (LA71_244==JEUDI) ) {s = 133;}

                        else if ( (LA71_244==VENDREDI) ) {s = 134;}

                        else if ( (LA71_244==SAMEDI) ) {s = 135;}

                        else if ( (LA71_244==DU) ) {s = 88;}

                        else if ( (LA71_244==DE) ) {s = 89;}

                        else if ( (LA71_244==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_244==INT_00) ) {s = 87;}

                        else if ( ((LA71_244>=INT_01 && LA71_244<=INT_09)||(LA71_244>=INT_10 && LA71_244<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_244>=INT_13 && LA71_244<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_244>=INT_24 && LA71_244<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_244>=INT_32 && LA71_244<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_244>=INT_60 && LA71_244<=INT_99)) ) {s = 126;}

                        else if ( (LA71_244==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_244==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_244==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_244==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_244==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_244==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_244==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_244==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_244==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_244==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_244==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_244==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_244==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_244==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_244==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_244==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_244==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_244==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_244==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_244>=INT_1 && LA71_244<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                         
                        input.seek(index71_244);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA71_466 = input.LA(1);

                         
                        int index71_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_466==DERNIER) && (synpred17_DateParser())) {s = 327;}

                        else if ( (LA71_466==SUIVANT) && (synpred17_DateParser())) {s = 328;}

                        else if ( (LA71_466==PASSE) && (synpred17_DateParser())) {s = 329;}

                        else if ( (LA71_466==DANS) && (synpred17_DateParser())) {s = 500;}

                        else if ( (LA71_466==UN) && (synpred17_DateParser())) {s = 331;}

                        else if ( (LA71_466==PREMIER) && (synpred17_DateParser())) {s = 332;}

                        else if ( (LA71_466==DEUX) && (synpred17_DateParser())) {s = 333;}

                        else if ( (LA71_466==TROIS) && (synpred17_DateParser())) {s = 334;}

                        else if ( (LA71_466==QUATRE) && (synpred17_DateParser())) {s = 335;}

                        else if ( (LA71_466==CINQ) && (synpred17_DateParser())) {s = 336;}

                        else if ( (LA71_466==SIX) && (synpred17_DateParser())) {s = 337;}

                        else if ( (LA71_466==SEPT) && (synpred17_DateParser())) {s = 338;}

                        else if ( (LA71_466==HUIT) && (synpred17_DateParser())) {s = 339;}

                        else if ( (LA71_466==NEUF) && (synpred17_DateParser())) {s = 340;}

                        else if ( (LA71_466==ONZE) && (synpred17_DateParser())) {s = 341;}

                        else if ( (LA71_466==DOUZE) && (synpred17_DateParser())) {s = 342;}

                        else if ( (LA71_466==TREIZE) && (synpred17_DateParser())) {s = 343;}

                        else if ( (LA71_466==QUATORZE) && (synpred17_DateParser())) {s = 344;}

                        else if ( (LA71_466==QUINZE) && (synpred17_DateParser())) {s = 345;}

                        else if ( (LA71_466==SEIZE) && (synpred17_DateParser())) {s = 346;}

                        else if ( (LA71_466==DIX) && (synpred17_DateParser())) {s = 347;}

                        else if ( (LA71_466==VINGT) && (synpred17_DateParser())) {s = 348;}

                        else if ( (LA71_466==TRENTE) && (synpred17_DateParser())) {s = 349;}

                        else if ( ((LA71_466>=INT_01 && LA71_466<=INT_09)||(LA71_466>=INT_10 && LA71_466<=INT_12)) && (synpred17_DateParser())) {s = 474;}

                        else if ( ((LA71_466>=INT_1 && LA71_466<=INT_9)) && (synpred17_DateParser())) {s = 475;}

                        else if ( ((LA71_466>=INT_13 && LA71_466<=INT_23)) && (synpred17_DateParser())) {s = 476;}

                        else if ( ((LA71_466>=INT_24 && LA71_466<=INT_31)) && (synpred17_DateParser())) {s = 477;}

                        else if ( ((LA71_466>=INT_32 && LA71_466<=INT_59)) && (synpred17_DateParser())) {s = 478;}

                        else if ( ((LA71_466>=INT_60 && LA71_466<=INT_99)) && (synpred17_DateParser())) {s = 479;}

                        else if ( (LA71_466==CE) && (synpred17_DateParser())) {s = 501;}

                        else if ( (LA71_466==AVANT) && (synpred16_DateParser())) {s = 499;}

                         
                        input.seek(index71_466);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA71_456 = input.LA(1);

                         
                        int index71_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DateParser()) ) {s = 496;}

                        else if ( (true) ) {s = 250;}

                         
                        input.seek(index71_456);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA71_283 = input.LA(1);

                         
                        int index71_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_283==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_283==DU) ) {s = 402;}

                        else if ( (LA71_283==DE) ) {s = 403;}

                        else if ( (LA71_283==JANVIER) ) {s = 90;}

                        else if ( (LA71_283==FEVRIER) ) {s = 91;}

                        else if ( (LA71_283==MARS) ) {s = 92;}

                        else if ( (LA71_283==AVRIL) ) {s = 93;}

                        else if ( (LA71_283==MAI) ) {s = 94;}

                        else if ( (LA71_283==JUIN) ) {s = 95;}

                        else if ( (LA71_283==JUILLET) ) {s = 96;}

                        else if ( (LA71_283==AOUT) ) {s = 97;}

                        else if ( (LA71_283==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_283==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_283==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_283==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_283==UN) ) {s = 196;}

                        else if ( (LA71_283==PREMIER) ) {s = 197;}

                        else if ( (LA71_283==DEUX) ) {s = 198;}

                        else if ( (LA71_283==TROIS) ) {s = 199;}

                        else if ( (LA71_283==QUATRE) ) {s = 200;}

                        else if ( (LA71_283==CINQ) ) {s = 201;}

                        else if ( (LA71_283==SIX) ) {s = 202;}

                        else if ( (LA71_283==SEPT) ) {s = 203;}

                        else if ( (LA71_283==HUIT) ) {s = 204;}

                        else if ( (LA71_283==NEUF) ) {s = 205;}

                        else if ( (LA71_283==ONZE) ) {s = 206;}

                        else if ( (LA71_283==DOUZE) ) {s = 207;}

                        else if ( (LA71_283==TREIZE) ) {s = 208;}

                        else if ( (LA71_283==QUATORZE) ) {s = 209;}

                        else if ( (LA71_283==QUINZE) ) {s = 210;}

                        else if ( (LA71_283==SEIZE) ) {s = 211;}

                        else if ( (LA71_283==DIX) ) {s = 212;}

                        else if ( (LA71_283==VINGT) ) {s = 213;}

                        else if ( (LA71_283==TRENTE) ) {s = 214;}

                        else if ( ((LA71_283>=INT_01 && LA71_283<=INT_09)||(LA71_283>=INT_10 && LA71_283<=INT_12)) ) {s = 363;}

                        else if ( ((LA71_283>=INT_1 && LA71_283<=INT_9)) ) {s = 215;}

                        else if ( ((LA71_283>=INT_13 && LA71_283<=INT_23)) ) {s = 364;}

                        else if ( ((LA71_283>=INT_24 && LA71_283<=INT_31)) ) {s = 365;}

                        else if ( ((LA71_283>=INT_32 && LA71_283<=INT_59)) ) {s = 366;}

                        else if ( ((LA71_283>=INT_60 && LA71_283<=INT_99)) ) {s = 367;}

                        else if ( (LA71_283==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_283);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA71_319 = input.LA(1);

                         
                        int index71_319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_319==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_319==UN) && (synpred19_DateParser())) {s = 219;}

                        else if ( (LA71_319==PREMIER) && (synpred19_DateParser())) {s = 220;}

                        else if ( (LA71_319==DEUX) && (synpred19_DateParser())) {s = 221;}

                        else if ( (LA71_319==TROIS) && (synpred19_DateParser())) {s = 222;}

                        else if ( (LA71_319==QUATRE) && (synpred19_DateParser())) {s = 223;}

                        else if ( (LA71_319==CINQ) && (synpred19_DateParser())) {s = 224;}

                        else if ( (LA71_319==SIX) && (synpred19_DateParser())) {s = 225;}

                        else if ( (LA71_319==SEPT) && (synpred19_DateParser())) {s = 226;}

                        else if ( (LA71_319==HUIT) && (synpred19_DateParser())) {s = 227;}

                        else if ( (LA71_319==NEUF) && (synpred19_DateParser())) {s = 228;}

                        else if ( (LA71_319==ONZE) && (synpred19_DateParser())) {s = 229;}

                        else if ( (LA71_319==DOUZE) && (synpred19_DateParser())) {s = 230;}

                        else if ( (LA71_319==TREIZE) && (synpred19_DateParser())) {s = 231;}

                        else if ( (LA71_319==QUATORZE) && (synpred19_DateParser())) {s = 232;}

                        else if ( (LA71_319==QUINZE) && (synpred19_DateParser())) {s = 233;}

                        else if ( (LA71_319==SEIZE) && (synpred19_DateParser())) {s = 234;}

                        else if ( (LA71_319==DIX) && (synpred19_DateParser())) {s = 235;}

                        else if ( (LA71_319==VINGT) && (synpred19_DateParser())) {s = 236;}

                        else if ( (LA71_319==TRENTE) && (synpred19_DateParser())) {s = 237;}

                        else if ( ((LA71_319>=INT_01 && LA71_319<=INT_09)||(LA71_319>=INT_10 && LA71_319<=INT_12)) && (synpred19_DateParser())) {s = 238;}

                        else if ( ((LA71_319>=INT_1 && LA71_319<=INT_9)) && (synpred19_DateParser())) {s = 239;}

                        else if ( ((LA71_319>=INT_13 && LA71_319<=INT_23)) && (synpred19_DateParser())) {s = 240;}

                        else if ( ((LA71_319>=INT_24 && LA71_319<=INT_31)) && (synpred19_DateParser())) {s = 241;}

                        else if ( ((LA71_319>=INT_32 && LA71_319<=INT_59)) && (synpred19_DateParser())) {s = 242;}

                        else if ( ((LA71_319>=INT_60 && LA71_319<=INT_99)) && (synpred19_DateParser())) {s = 243;}

                         
                        input.seek(index71_319);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA71_259 = input.LA(1);

                         
                        int index71_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_259==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_259==JANVIER) ) {s = 90;}

                        else if ( (LA71_259==FEVRIER) ) {s = 91;}

                        else if ( (LA71_259==MARS) ) {s = 92;}

                        else if ( (LA71_259==AVRIL) ) {s = 93;}

                        else if ( (LA71_259==MAI) ) {s = 94;}

                        else if ( (LA71_259==JUIN) ) {s = 95;}

                        else if ( (LA71_259==JUILLET) ) {s = 96;}

                        else if ( (LA71_259==AOUT) ) {s = 97;}

                        else if ( (LA71_259==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_259==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_259==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_259==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_259==DU) ) {s = 361;}

                        else if ( (LA71_259==DE) ) {s = 362;}

                        else if ( (LA71_259==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_259==WHITE_SPACE) ) {s = 218;}

                        else if ( (LA71_259==UN) ) {s = 196;}

                        else if ( (LA71_259==PREMIER) ) {s = 197;}

                        else if ( (LA71_259==DEUX) ) {s = 198;}

                        else if ( (LA71_259==TROIS) ) {s = 199;}

                        else if ( (LA71_259==QUATRE) ) {s = 200;}

                        else if ( (LA71_259==CINQ) ) {s = 201;}

                        else if ( (LA71_259==SIX) ) {s = 202;}

                        else if ( (LA71_259==SEPT) ) {s = 203;}

                        else if ( (LA71_259==HUIT) ) {s = 204;}

                        else if ( (LA71_259==NEUF) ) {s = 205;}

                        else if ( (LA71_259==ONZE) ) {s = 206;}

                        else if ( (LA71_259==DOUZE) ) {s = 207;}

                        else if ( (LA71_259==TREIZE) ) {s = 208;}

                        else if ( (LA71_259==QUATORZE) ) {s = 209;}

                        else if ( (LA71_259==QUINZE) ) {s = 210;}

                        else if ( (LA71_259==SEIZE) ) {s = 211;}

                        else if ( (LA71_259==DIX) ) {s = 212;}

                        else if ( (LA71_259==VINGT) ) {s = 213;}

                        else if ( (LA71_259==TRENTE) ) {s = 214;}

                        else if ( ((LA71_259>=INT_01 && LA71_259<=INT_09)||(LA71_259>=INT_10 && LA71_259<=INT_12)) ) {s = 363;}

                        else if ( ((LA71_259>=INT_1 && LA71_259<=INT_9)) ) {s = 215;}

                        else if ( ((LA71_259>=INT_13 && LA71_259<=INT_23)) ) {s = 364;}

                        else if ( ((LA71_259>=INT_24 && LA71_259<=INT_31)) ) {s = 365;}

                        else if ( ((LA71_259>=INT_32 && LA71_259<=INT_59)) ) {s = 366;}

                        else if ( ((LA71_259>=INT_60 && LA71_259<=INT_99)) ) {s = 367;}

                         
                        input.seek(index71_259);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA71_465 = input.LA(1);

                         
                        int index71_465 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_465==DASH||(LA71_465>=JUSQU_A && LA71_465<=A)||(LA71_465>=MINUIT && LA71_465<=NUIT)||(LA71_465>=OU && LA71_465<=ET)||LA71_465==AU||LA71_465==INT_0) ) {s = 250;}

                        else if ( (LA71_465==AVANT) && (synpred16_DateParser())) {s = 499;}

                        else if ( (LA71_465==DERNIER) && (synpred17_DateParser())) {s = 327;}

                        else if ( (LA71_465==SUIVANT) && (synpred17_DateParser())) {s = 328;}

                        else if ( (LA71_465==PASSE) && (synpred17_DateParser())) {s = 329;}

                        else if ( (LA71_465==DANS) ) {s = 330;}

                        else if ( (LA71_465==UN) && (synpred17_DateParser())) {s = 331;}

                        else if ( (LA71_465==PREMIER) && (synpred17_DateParser())) {s = 332;}

                        else if ( (LA71_465==DEUX) && (synpred17_DateParser())) {s = 333;}

                        else if ( (LA71_465==TROIS) && (synpred17_DateParser())) {s = 334;}

                        else if ( (LA71_465==QUATRE) && (synpred17_DateParser())) {s = 335;}

                        else if ( (LA71_465==CINQ) && (synpred17_DateParser())) {s = 336;}

                        else if ( (LA71_465==SIX) && (synpred17_DateParser())) {s = 337;}

                        else if ( (LA71_465==SEPT) && (synpred17_DateParser())) {s = 338;}

                        else if ( (LA71_465==HUIT) && (synpred17_DateParser())) {s = 339;}

                        else if ( (LA71_465==NEUF) && (synpred17_DateParser())) {s = 340;}

                        else if ( (LA71_465==ONZE) && (synpred17_DateParser())) {s = 341;}

                        else if ( (LA71_465==DOUZE) && (synpred17_DateParser())) {s = 342;}

                        else if ( (LA71_465==TREIZE) && (synpred17_DateParser())) {s = 343;}

                        else if ( (LA71_465==QUATORZE) && (synpred17_DateParser())) {s = 344;}

                        else if ( (LA71_465==QUINZE) && (synpred17_DateParser())) {s = 345;}

                        else if ( (LA71_465==SEIZE) && (synpred17_DateParser())) {s = 346;}

                        else if ( (LA71_465==DIX) && (synpred17_DateParser())) {s = 347;}

                        else if ( (LA71_465==VINGT) && (synpred17_DateParser())) {s = 348;}

                        else if ( (LA71_465==TRENTE) && (synpred17_DateParser())) {s = 349;}

                        else if ( ((LA71_465>=INT_01 && LA71_465<=INT_09)||(LA71_465>=INT_10 && LA71_465<=INT_12)) ) {s = 350;}

                        else if ( ((LA71_465>=INT_1 && LA71_465<=INT_9)) ) {s = 351;}

                        else if ( ((LA71_465>=INT_13 && LA71_465<=INT_23)) ) {s = 352;}

                        else if ( ((LA71_465>=INT_24 && LA71_465<=INT_31)) ) {s = 353;}

                        else if ( ((LA71_465>=INT_32 && LA71_465<=INT_59)) ) {s = 354;}

                        else if ( ((LA71_465>=INT_60 && LA71_465<=INT_99)) ) {s = 355;}

                        else if ( (LA71_465==CE) ) {s = 356;}

                        else if ( (LA71_465==INT_00) ) {s = 357;}

                         
                        input.seek(index71_465);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA71_286 = input.LA(1);

                         
                        int index71_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_286==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_286==JANVIER) ) {s = 90;}

                        else if ( (LA71_286==FEVRIER) ) {s = 91;}

                        else if ( (LA71_286==MARS) ) {s = 92;}

                        else if ( (LA71_286==AVRIL) ) {s = 93;}

                        else if ( (LA71_286==MAI) ) {s = 94;}

                        else if ( (LA71_286==JUIN) ) {s = 95;}

                        else if ( (LA71_286==JUILLET) ) {s = 96;}

                        else if ( (LA71_286==AOUT) ) {s = 97;}

                        else if ( (LA71_286==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_286==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_286==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_286==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_286==UN) ) {s = 196;}

                        else if ( (LA71_286==PREMIER) ) {s = 197;}

                        else if ( (LA71_286==DEUX) ) {s = 198;}

                        else if ( (LA71_286==TROIS) ) {s = 199;}

                        else if ( (LA71_286==QUATRE) ) {s = 200;}

                        else if ( (LA71_286==CINQ) ) {s = 201;}

                        else if ( (LA71_286==SIX) ) {s = 202;}

                        else if ( (LA71_286==SEPT) ) {s = 203;}

                        else if ( (LA71_286==HUIT) ) {s = 204;}

                        else if ( (LA71_286==NEUF) ) {s = 205;}

                        else if ( (LA71_286==ONZE) ) {s = 206;}

                        else if ( (LA71_286==DOUZE) ) {s = 207;}

                        else if ( (LA71_286==TREIZE) ) {s = 208;}

                        else if ( (LA71_286==QUATORZE) ) {s = 209;}

                        else if ( (LA71_286==QUINZE) ) {s = 210;}

                        else if ( (LA71_286==SEIZE) ) {s = 211;}

                        else if ( (LA71_286==DIX) ) {s = 212;}

                        else if ( (LA71_286==VINGT) ) {s = 213;}

                        else if ( (LA71_286==TRENTE) ) {s = 214;}

                        else if ( ((LA71_286>=INT_01 && LA71_286<=INT_09)||(LA71_286>=INT_10 && LA71_286<=INT_12)) ) {s = 191;}

                        else if ( ((LA71_286>=INT_1 && LA71_286<=INT_9)) ) {s = 215;}

                        else if ( ((LA71_286>=INT_13 && LA71_286<=INT_23)) ) {s = 192;}

                        else if ( ((LA71_286>=INT_24 && LA71_286<=INT_31)) ) {s = 193;}

                        else if ( ((LA71_286>=INT_32 && LA71_286<=INT_59)) ) {s = 194;}

                        else if ( ((LA71_286>=INT_60 && LA71_286<=INT_99)) ) {s = 195;}

                        else if ( (LA71_286==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_286==INT_00) ) {s = 87;}

                         
                        input.seek(index71_286);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA71_61 = input.LA(1);

                         
                        int index71_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_61==ET) ) {s = 139;}

                        else if ( (LA71_61==DEUX) ) {s = 140;}

                        else if ( (LA71_61==TROIS) ) {s = 141;}

                        else if ( (LA71_61==QUATRE) ) {s = 142;}

                        else if ( (LA71_61==CINQ) ) {s = 143;}

                        else if ( (LA71_61==SIX) ) {s = 144;}

                        else if ( (LA71_61==SEPT) ) {s = 145;}

                        else if ( (LA71_61==HUIT) ) {s = 146;}

                        else if ( (LA71_61==NEUF) ) {s = 147;}

                        else if ( (LA71_61==JANVIER) ) {s = 90;}

                        else if ( (LA71_61==FEVRIER) ) {s = 91;}

                        else if ( (LA71_61==MARS) ) {s = 92;}

                        else if ( (LA71_61==AVRIL) ) {s = 93;}

                        else if ( (LA71_61==MAI) ) {s = 94;}

                        else if ( (LA71_61==JUIN) ) {s = 95;}

                        else if ( (LA71_61==JUILLET) ) {s = 96;}

                        else if ( (LA71_61==AOUT) ) {s = 97;}

                        else if ( (LA71_61==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_61==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_61==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_61==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_61==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_61==DU) ) {s = 88;}

                        else if ( (LA71_61==DE) ) {s = 89;}

                        else if ( (LA71_61==DIMANCHE) ) {s = 40;}

                        else if ( (LA71_61==LUNDI) ) {s = 41;}

                        else if ( (LA71_61==MARDI) ) {s = 42;}

                        else if ( (LA71_61==MERCREDI) ) {s = 43;}

                        else if ( (LA71_61==JEUDI) ) {s = 44;}

                        else if ( (LA71_61==VENDREDI) ) {s = 45;}

                        else if ( (LA71_61==SAMEDI) ) {s = 46;}

                        else if ( (LA71_61==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_61==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_61==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_61==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_61==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_61==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_61==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_61==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_61==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_61==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_61==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_61>=INT_01 && LA71_61<=INT_09)||(LA71_61>=INT_10 && LA71_61<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_61>=INT_1 && LA71_61<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_61>=INT_13 && LA71_61<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_61>=INT_24 && LA71_61<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_61>=INT_32 && LA71_61<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_61>=INT_60 && LA71_61<=INT_99)) ) {s = 126;}

                        else if ( (LA71_61==INT_00) ) {s = 87;}

                         
                        input.seek(index71_61);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA71_55 = input.LA(1);

                         
                        int index71_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_55==JOUR) ) {s = 128;}

                        else if ( (LA71_55==JANVIER) ) {s = 90;}

                        else if ( (LA71_55==FEVRIER) ) {s = 91;}

                        else if ( (LA71_55==MARS) ) {s = 92;}

                        else if ( (LA71_55==AVRIL) ) {s = 93;}

                        else if ( (LA71_55==MAI) ) {s = 94;}

                        else if ( (LA71_55==JUIN) ) {s = 95;}

                        else if ( (LA71_55==JUILLET) ) {s = 96;}

                        else if ( (LA71_55==AOUT) ) {s = 97;}

                        else if ( (LA71_55==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_55==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_55==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_55==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_55==DIMANCHE) ) {s = 129;}

                        else if ( (LA71_55==LUNDI) ) {s = 130;}

                        else if ( (LA71_55==MARDI) ) {s = 131;}

                        else if ( (LA71_55==MERCREDI) ) {s = 132;}

                        else if ( (LA71_55==JEUDI) ) {s = 133;}

                        else if ( (LA71_55==VENDREDI) ) {s = 134;}

                        else if ( (LA71_55==SAMEDI) ) {s = 135;}

                        else if ( (LA71_55==DU) ) {s = 88;}

                        else if ( (LA71_55==DE) ) {s = 89;}

                        else if ( (LA71_55==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_55==INT_00) ) {s = 87;}

                        else if ( ((LA71_55>=INT_01 && LA71_55<=INT_09)||(LA71_55>=INT_10 && LA71_55<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_55>=INT_13 && LA71_55<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_55>=INT_24 && LA71_55<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_55>=INT_32 && LA71_55<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_55>=INT_60 && LA71_55<=INT_99)) ) {s = 126;}

                        else if ( (LA71_55==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_55==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_55==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_55==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_55==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_55==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_55==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_55==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_55==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_55==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_55==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_55==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_55==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_55==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_55==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_55==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_55==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_55==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_55==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_55>=INT_1 && LA71_55<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                         
                        input.seek(index71_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA71_80 = input.LA(1);

                         
                        int index71_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_80==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_80==JANVIER) ) {s = 90;}

                        else if ( (LA71_80==FEVRIER) ) {s = 91;}

                        else if ( (LA71_80==MARS) ) {s = 92;}

                        else if ( (LA71_80==AVRIL) ) {s = 93;}

                        else if ( (LA71_80==MAI) ) {s = 94;}

                        else if ( (LA71_80==JUIN) ) {s = 95;}

                        else if ( (LA71_80==JUILLET) ) {s = 96;}

                        else if ( (LA71_80==AOUT) ) {s = 97;}

                        else if ( (LA71_80==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_80==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_80==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_80==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_80==DU) ) {s = 189;}

                        else if ( (LA71_80==DE) ) {s = 190;}

                        else if ( (LA71_80==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_80==INT_00) ) {s = 87;}

                        else if ( ((LA71_80>=INT_01 && LA71_80<=INT_09)||(LA71_80>=INT_10 && LA71_80<=INT_12)) ) {s = 191;}

                        else if ( ((LA71_80>=INT_13 && LA71_80<=INT_23)) ) {s = 192;}

                        else if ( ((LA71_80>=INT_24 && LA71_80<=INT_31)) ) {s = 193;}

                        else if ( ((LA71_80>=INT_32 && LA71_80<=INT_59)) ) {s = 194;}

                        else if ( ((LA71_80>=INT_60 && LA71_80<=INT_99)) ) {s = 195;}

                        else if ( (LA71_80==UN) ) {s = 196;}

                        else if ( (LA71_80==PREMIER) ) {s = 197;}

                        else if ( (LA71_80==DEUX) ) {s = 198;}

                        else if ( (LA71_80==TROIS) ) {s = 199;}

                        else if ( (LA71_80==QUATRE) ) {s = 200;}

                        else if ( (LA71_80==CINQ) ) {s = 201;}

                        else if ( (LA71_80==SIX) ) {s = 202;}

                        else if ( (LA71_80==SEPT) ) {s = 203;}

                        else if ( (LA71_80==HUIT) ) {s = 204;}

                        else if ( (LA71_80==NEUF) ) {s = 205;}

                        else if ( (LA71_80==ONZE) ) {s = 206;}

                        else if ( (LA71_80==DOUZE) ) {s = 207;}

                        else if ( (LA71_80==TREIZE) ) {s = 208;}

                        else if ( (LA71_80==QUATORZE) ) {s = 209;}

                        else if ( (LA71_80==QUINZE) ) {s = 210;}

                        else if ( (LA71_80==SEIZE) ) {s = 211;}

                        else if ( (LA71_80==DIX) ) {s = 212;}

                        else if ( (LA71_80==VINGT) ) {s = 213;}

                        else if ( (LA71_80==TRENTE) ) {s = 214;}

                        else if ( ((LA71_80>=INT_1 && LA71_80<=INT_9)) ) {s = 215;}

                         
                        input.seek(index71_80);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA71_56 = input.LA(1);

                         
                        int index71_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_56==SEPT) ) {s = 136;}

                        else if ( (LA71_56==HUIT) ) {s = 137;}

                        else if ( (LA71_56==NEUF) ) {s = 138;}

                        else if ( (LA71_56==JANVIER) ) {s = 90;}

                        else if ( (LA71_56==FEVRIER) ) {s = 91;}

                        else if ( (LA71_56==MARS) ) {s = 92;}

                        else if ( (LA71_56==AVRIL) ) {s = 93;}

                        else if ( (LA71_56==MAI) ) {s = 94;}

                        else if ( (LA71_56==JUIN) ) {s = 95;}

                        else if ( (LA71_56==JUILLET) ) {s = 96;}

                        else if ( (LA71_56==AOUT) ) {s = 97;}

                        else if ( (LA71_56==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_56==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_56==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_56==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_56==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_56==INT_00) ) {s = 87;}

                        else if ( ((LA71_56>=INT_01 && LA71_56<=INT_09)||(LA71_56>=INT_10 && LA71_56<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_56>=INT_13 && LA71_56<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_56>=INT_24 && LA71_56<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_56>=INT_32 && LA71_56<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_56>=INT_60 && LA71_56<=INT_99)) ) {s = 126;}

                        else if ( (LA71_56==DU) ) {s = 88;}

                        else if ( (LA71_56==DE) ) {s = 89;}

                        else if ( (LA71_56==DIMANCHE) ) {s = 40;}

                        else if ( (LA71_56==LUNDI) ) {s = 41;}

                        else if ( (LA71_56==MARDI) ) {s = 42;}

                        else if ( (LA71_56==MERCREDI) ) {s = 43;}

                        else if ( (LA71_56==JEUDI) ) {s = 44;}

                        else if ( (LA71_56==VENDREDI) ) {s = 45;}

                        else if ( (LA71_56==SAMEDI) ) {s = 46;}

                        else if ( (LA71_56==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_56==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_56==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_56==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_56==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_56==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_56==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_56==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_56==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_56==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_56==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_56==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_56==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_56==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_56==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_56==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_56>=INT_1 && LA71_56<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                         
                        input.seek(index71_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA71_295 = input.LA(1);

                         
                        int index71_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_295==SEPT) ) {s = 421;}

                        else if ( (LA71_295==HUIT) ) {s = 422;}

                        else if ( (LA71_295==NEUF) ) {s = 423;}

                        else if ( (LA71_295==SEMAINE) && (synpred19_DateParser())) {s = 407;}

                        else if ( (LA71_295==JANVIER) && (synpred16_DateParser())) {s = 408;}

                        else if ( (LA71_295==FEVRIER) && (synpred16_DateParser())) {s = 409;}

                        else if ( (LA71_295==MARS) && (synpred16_DateParser())) {s = 410;}

                        else if ( (LA71_295==AVRIL) && (synpred16_DateParser())) {s = 411;}

                        else if ( (LA71_295==MAI) && (synpred16_DateParser())) {s = 412;}

                        else if ( (LA71_295==JUIN) && (synpred16_DateParser())) {s = 413;}

                        else if ( (LA71_295==JUILLET) && (synpred16_DateParser())) {s = 414;}

                        else if ( (LA71_295==AOUT) && (synpred16_DateParser())) {s = 415;}

                        else if ( (LA71_295==SEPTEMBRE) && (synpred16_DateParser())) {s = 416;}

                        else if ( (LA71_295==OCTOBRE) && (synpred16_DateParser())) {s = 417;}

                        else if ( (LA71_295==NOVEMBRE) && (synpred16_DateParser())) {s = 418;}

                        else if ( (LA71_295==DECEMBRE) && (synpred16_DateParser())) {s = 419;}

                        else if ( (LA71_295==MOIS) && (synpred16_DateParser())) {s = 420;}

                         
                        input.seek(index71_295);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA71_294 = input.LA(1);

                         
                        int index71_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_294==SEMAINE) && (synpred19_DateParser())) {s = 407;}

                        else if ( (LA71_294==JANVIER) && (synpred16_DateParser())) {s = 408;}

                        else if ( (LA71_294==FEVRIER) && (synpred16_DateParser())) {s = 409;}

                        else if ( (LA71_294==MARS) && (synpred16_DateParser())) {s = 410;}

                        else if ( (LA71_294==AVRIL) && (synpred16_DateParser())) {s = 411;}

                        else if ( (LA71_294==MAI) && (synpred16_DateParser())) {s = 412;}

                        else if ( (LA71_294==JUIN) && (synpred16_DateParser())) {s = 413;}

                        else if ( (LA71_294==JUILLET) && (synpred16_DateParser())) {s = 414;}

                        else if ( (LA71_294==AOUT) && (synpred16_DateParser())) {s = 415;}

                        else if ( (LA71_294==SEPTEMBRE) && (synpred16_DateParser())) {s = 416;}

                        else if ( (LA71_294==OCTOBRE) && (synpred16_DateParser())) {s = 417;}

                        else if ( (LA71_294==NOVEMBRE) && (synpred16_DateParser())) {s = 418;}

                        else if ( (LA71_294==DECEMBRE) && (synpred16_DateParser())) {s = 419;}

                        else if ( (LA71_294==MOIS) && (synpred16_DateParser())) {s = 420;}

                         
                        input.seek(index71_294);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA71_124 = input.LA(1);

                         
                        int index71_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_124>=INT_01 && LA71_124<=INT_09)||(LA71_124>=INT_10 && LA71_124<=INT_12)) ) {s = 251;}

                        else if ( ((LA71_124>=INT_1 && LA71_124<=INT_9)) && (synpred16_DateParser())) {s = 252;}

                        else if ( ((LA71_124>=INT_13 && LA71_124<=INT_23)) ) {s = 253;}

                        else if ( ((LA71_124>=INT_24 && LA71_124<=INT_31)) ) {s = 254;}

                        else if ( ((LA71_124>=INT_32 && LA71_124<=INT_59)) ) {s = 255;}

                        else if ( ((LA71_124>=INT_60 && LA71_124<=INT_99)) ) {s = 256;}

                        else if ( (LA71_124==WHITE_SPACE) && (synpred16_DateParser())) {s = 257;}

                        else if ( (LA71_124==INT_00) ) {s = 87;}

                         
                        input.seek(index71_124);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA71_126 = input.LA(1);

                         
                        int index71_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_126==INT_00) ) {s = 87;}

                        else if ( ((LA71_126>=INT_01 && LA71_126<=INT_09)||(LA71_126>=INT_10 && LA71_126<=INT_12)) ) {s = 251;}

                        else if ( ((LA71_126>=INT_13 && LA71_126<=INT_23)) ) {s = 253;}

                        else if ( ((LA71_126>=INT_24 && LA71_126<=INT_31)) ) {s = 254;}

                        else if ( ((LA71_126>=INT_32 && LA71_126<=INT_59)) ) {s = 255;}

                        else if ( ((LA71_126>=INT_60 && LA71_126<=INT_99)) ) {s = 256;}

                        else if ( ((LA71_126>=INT_1 && LA71_126<=INT_9)) && (synpred16_DateParser())) {s = 252;}

                        else if ( (LA71_126==WHITE_SPACE) && (synpred16_DateParser())) {s = 257;}

                         
                        input.seek(index71_126);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA71_121 = input.LA(1);

                         
                        int index71_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_121>=INT_01 && LA71_121<=INT_09)||(LA71_121>=INT_10 && LA71_121<=INT_12)) ) {s = 251;}

                        else if ( ((LA71_121>=INT_1 && LA71_121<=INT_9)) && (synpred16_DateParser())) {s = 252;}

                        else if ( ((LA71_121>=INT_13 && LA71_121<=INT_23)) ) {s = 253;}

                        else if ( ((LA71_121>=INT_24 && LA71_121<=INT_31)) ) {s = 254;}

                        else if ( ((LA71_121>=INT_32 && LA71_121<=INT_59)) ) {s = 255;}

                        else if ( ((LA71_121>=INT_60 && LA71_121<=INT_99)) ) {s = 256;}

                        else if ( (LA71_121==WHITE_SPACE) && (synpred16_DateParser())) {s = 257;}

                        else if ( (LA71_121==INT_00) ) {s = 87;}

                         
                        input.seek(index71_121);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA71_123 = input.LA(1);

                         
                        int index71_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_123>=INT_01 && LA71_123<=INT_09)||(LA71_123>=INT_10 && LA71_123<=INT_12)) ) {s = 251;}

                        else if ( ((LA71_123>=INT_1 && LA71_123<=INT_9)) && (synpred16_DateParser())) {s = 252;}

                        else if ( ((LA71_123>=INT_13 && LA71_123<=INT_23)) ) {s = 253;}

                        else if ( ((LA71_123>=INT_24 && LA71_123<=INT_31)) ) {s = 254;}

                        else if ( ((LA71_123>=INT_32 && LA71_123<=INT_59)) ) {s = 255;}

                        else if ( ((LA71_123>=INT_60 && LA71_123<=INT_99)) ) {s = 256;}

                        else if ( (LA71_123==WHITE_SPACE) && (synpred16_DateParser())) {s = 257;}

                        else if ( (LA71_123==INT_00) ) {s = 87;}

                         
                        input.seek(index71_123);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA71_356 = input.LA(1);

                         
                        int index71_356 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_356==WHITE_SPACE) ) {s = 456;}

                        else if ( (LA71_356==COMMA) && (synpred17_DateParser())) {s = 448;}

                        else if ( (LA71_356==EOF) && (synpred17_DateParser())) {s = 446;}

                         
                        input.seek(index71_356);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA71_463 = input.LA(1);

                         
                        int index71_463 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_463==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_463==JANVIER) ) {s = 90;}

                        else if ( (LA71_463==FEVRIER) ) {s = 91;}

                        else if ( (LA71_463==MARS) ) {s = 92;}

                        else if ( (LA71_463==AVRIL) ) {s = 93;}

                        else if ( (LA71_463==MAI) ) {s = 94;}

                        else if ( (LA71_463==JUIN) ) {s = 95;}

                        else if ( (LA71_463==JUILLET) ) {s = 96;}

                        else if ( (LA71_463==AOUT) ) {s = 97;}

                        else if ( (LA71_463==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_463==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_463==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_463==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_463==UN) ) {s = 196;}

                        else if ( (LA71_463==PREMIER) ) {s = 197;}

                        else if ( (LA71_463==DEUX) ) {s = 198;}

                        else if ( (LA71_463==TROIS) ) {s = 199;}

                        else if ( (LA71_463==QUATRE) ) {s = 200;}

                        else if ( (LA71_463==CINQ) ) {s = 201;}

                        else if ( (LA71_463==SIX) ) {s = 202;}

                        else if ( (LA71_463==SEPT) ) {s = 203;}

                        else if ( (LA71_463==HUIT) ) {s = 204;}

                        else if ( (LA71_463==NEUF) ) {s = 205;}

                        else if ( (LA71_463==ONZE) ) {s = 206;}

                        else if ( (LA71_463==DOUZE) ) {s = 207;}

                        else if ( (LA71_463==TREIZE) ) {s = 208;}

                        else if ( (LA71_463==QUATORZE) ) {s = 209;}

                        else if ( (LA71_463==QUINZE) ) {s = 210;}

                        else if ( (LA71_463==SEIZE) ) {s = 211;}

                        else if ( (LA71_463==DIX) ) {s = 212;}

                        else if ( (LA71_463==VINGT) ) {s = 213;}

                        else if ( (LA71_463==TRENTE) ) {s = 214;}

                        else if ( ((LA71_463>=INT_01 && LA71_463<=INT_09)||(LA71_463>=INT_10 && LA71_463<=INT_12)) ) {s = 363;}

                        else if ( ((LA71_463>=INT_1 && LA71_463<=INT_9)) ) {s = 215;}

                        else if ( ((LA71_463>=INT_13 && LA71_463<=INT_23)) ) {s = 364;}

                        else if ( ((LA71_463>=INT_24 && LA71_463<=INT_31)) ) {s = 365;}

                        else if ( ((LA71_463>=INT_32 && LA71_463<=INT_59)) ) {s = 366;}

                        else if ( ((LA71_463>=INT_60 && LA71_463<=INT_99)) ) {s = 367;}

                        else if ( (LA71_463==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_463);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA71_462 = input.LA(1);

                         
                        int index71_462 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_462==LA) ) {s = 497;}

                        else if ( (LA71_462==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_462==UN) && (synpred19_DateParser())) {s = 219;}

                        else if ( (LA71_462==PREMIER) && (synpred19_DateParser())) {s = 220;}

                        else if ( (LA71_462==DEUX) && (synpred19_DateParser())) {s = 221;}

                        else if ( (LA71_462==TROIS) && (synpred19_DateParser())) {s = 222;}

                        else if ( (LA71_462==QUATRE) && (synpred19_DateParser())) {s = 223;}

                        else if ( (LA71_462==CINQ) && (synpred19_DateParser())) {s = 224;}

                        else if ( (LA71_462==SIX) && (synpred19_DateParser())) {s = 225;}

                        else if ( (LA71_462==SEPT) && (synpred19_DateParser())) {s = 226;}

                        else if ( (LA71_462==HUIT) && (synpred19_DateParser())) {s = 227;}

                        else if ( (LA71_462==NEUF) && (synpred19_DateParser())) {s = 228;}

                        else if ( (LA71_462==ONZE) && (synpred19_DateParser())) {s = 229;}

                        else if ( (LA71_462==DOUZE) && (synpred19_DateParser())) {s = 230;}

                        else if ( (LA71_462==TREIZE) && (synpred19_DateParser())) {s = 231;}

                        else if ( (LA71_462==QUATORZE) && (synpred19_DateParser())) {s = 232;}

                        else if ( (LA71_462==QUINZE) && (synpred19_DateParser())) {s = 233;}

                        else if ( (LA71_462==SEIZE) && (synpred19_DateParser())) {s = 234;}

                        else if ( (LA71_462==DIX) && (synpred19_DateParser())) {s = 235;}

                        else if ( (LA71_462==VINGT) && (synpred19_DateParser())) {s = 236;}

                        else if ( (LA71_462==TRENTE) && (synpred19_DateParser())) {s = 237;}

                        else if ( ((LA71_462>=INT_01 && LA71_462<=INT_09)||(LA71_462>=INT_10 && LA71_462<=INT_12)) && (synpred19_DateParser())) {s = 238;}

                        else if ( ((LA71_462>=INT_1 && LA71_462<=INT_9)) && (synpred19_DateParser())) {s = 239;}

                        else if ( ((LA71_462>=INT_13 && LA71_462<=INT_23)) && (synpred19_DateParser())) {s = 240;}

                        else if ( ((LA71_462>=INT_24 && LA71_462<=INT_31)) && (synpred19_DateParser())) {s = 241;}

                        else if ( ((LA71_462>=INT_32 && LA71_462<=INT_59)) && (synpred19_DateParser())) {s = 242;}

                        else if ( ((LA71_462>=INT_60 && LA71_462<=INT_99)) && (synpred19_DateParser())) {s = 243;}

                         
                        input.seek(index71_462);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA71_353 = input.LA(1);

                         
                        int index71_353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_353==INT_00) && (synpred20_DateParser())) {s = 449;}

                        else if ( ((LA71_353>=INT_01 && LA71_353<=INT_09)||(LA71_353>=INT_10 && LA71_353<=INT_12)) ) {s = 440;}

                        else if ( ((LA71_353>=INT_13 && LA71_353<=INT_23)) ) {s = 442;}

                        else if ( ((LA71_353>=INT_24 && LA71_353<=INT_31)) ) {s = 443;}

                        else if ( ((LA71_353>=INT_32 && LA71_353<=INT_59)) ) {s = 444;}

                        else if ( ((LA71_353>=INT_60 && LA71_353<=INT_99)) ) {s = 445;}

                        else if ( ((LA71_353>=INT_1 && LA71_353<=INT_9)) && (synpred17_DateParser())) {s = 441;}

                        else if ( (LA71_353==EOF) && (synpred17_DateParser())) {s = 446;}

                        else if ( (LA71_353==WHITE_SPACE) && (synpred17_DateParser())) {s = 455;}

                        else if ( (LA71_353==COMMA) && (synpred17_DateParser())) {s = 448;}

                         
                        input.seek(index71_353);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA71_355 = input.LA(1);

                         
                        int index71_355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_355==INT_00) && (synpred20_DateParser())) {s = 449;}

                        else if ( ((LA71_355>=INT_01 && LA71_355<=INT_09)||(LA71_355>=INT_10 && LA71_355<=INT_12)) ) {s = 440;}

                        else if ( ((LA71_355>=INT_13 && LA71_355<=INT_23)) ) {s = 442;}

                        else if ( ((LA71_355>=INT_24 && LA71_355<=INT_31)) ) {s = 443;}

                        else if ( ((LA71_355>=INT_32 && LA71_355<=INT_59)) ) {s = 444;}

                        else if ( ((LA71_355>=INT_60 && LA71_355<=INT_99)) ) {s = 445;}

                        else if ( ((LA71_355>=INT_1 && LA71_355<=INT_9)) && (synpred17_DateParser())) {s = 441;}

                        else if ( (LA71_355==EOF) && (synpred17_DateParser())) {s = 446;}

                        else if ( (LA71_355==WHITE_SPACE) && (synpred17_DateParser())) {s = 455;}

                        else if ( (LA71_355==COMMA) && (synpred17_DateParser())) {s = 448;}

                         
                        input.seek(index71_355);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA71_357 = input.LA(1);

                         
                        int index71_357 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_357>=HEURE && LA71_357<=HEURE_SHORT)||LA71_357==WHITE_SPACE||LA71_357==COLON) ) {s = 250;}

                        else if ( (LA71_357==INT_00) && (synpred20_DateParser())) {s = 449;}

                        else if ( ((LA71_357>=INT_01 && LA71_357<=INT_09)||(LA71_357>=INT_10 && LA71_357<=INT_12)) && (synpred20_DateParser())) {s = 457;}

                        else if ( ((LA71_357>=INT_13 && LA71_357<=INT_23)) && (synpred20_DateParser())) {s = 458;}

                        else if ( ((LA71_357>=INT_24 && LA71_357<=INT_31)) && (synpred20_DateParser())) {s = 459;}

                        else if ( ((LA71_357>=INT_32 && LA71_357<=INT_59)) && (synpred20_DateParser())) {s = 460;}

                        else if ( ((LA71_357>=INT_60 && LA71_357<=INT_99)) && (synpred20_DateParser())) {s = 461;}

                         
                        input.seek(index71_357);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA71_444 = input.LA(1);

                         
                        int index71_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DateParser()) ) {s = 479;}

                        else if ( (synpred20_DateParser()) ) {s = 461;}

                         
                        input.seek(index71_444);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA71_406 = input.LA(1);

                         
                        int index71_406 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_406==DASH||(LA71_406>=JUSQU_A && LA71_406<=A)||(LA71_406>=MINUIT && LA71_406<=NUIT)||LA71_406==DANS||(LA71_406>=OU && LA71_406<=CE)||LA71_406==AU||(LA71_406>=INT_00 && LA71_406<=INT_23)) ) {s = 87;}

                        else if ( (LA71_406==SEMAINE) && (synpred19_DateParser())) {s = 407;}

                        else if ( (LA71_406==JANVIER) && (synpred16_DateParser())) {s = 408;}

                        else if ( (LA71_406==FEVRIER) && (synpred16_DateParser())) {s = 409;}

                        else if ( (LA71_406==MARS) && (synpred16_DateParser())) {s = 410;}

                        else if ( (LA71_406==AVRIL) && (synpred16_DateParser())) {s = 411;}

                        else if ( (LA71_406==MAI) && (synpred16_DateParser())) {s = 412;}

                        else if ( (LA71_406==JUIN) && (synpred16_DateParser())) {s = 413;}

                        else if ( (LA71_406==JUILLET) && (synpred16_DateParser())) {s = 414;}

                        else if ( (LA71_406==AOUT) && (synpred16_DateParser())) {s = 415;}

                        else if ( (LA71_406==SEPTEMBRE) && (synpred16_DateParser())) {s = 416;}

                        else if ( (LA71_406==OCTOBRE) && (synpred16_DateParser())) {s = 417;}

                        else if ( (LA71_406==NOVEMBRE) && (synpred16_DateParser())) {s = 418;}

                        else if ( (LA71_406==DECEMBRE) && (synpred16_DateParser())) {s = 419;}

                        else if ( (LA71_406==MOIS) && (synpred16_DateParser())) {s = 420;}

                         
                        input.seek(index71_406);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA71_247 = input.LA(1);

                         
                        int index71_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_247==JANVIER) ) {s = 90;}

                        else if ( (LA71_247==FEVRIER) ) {s = 91;}

                        else if ( (LA71_247==MARS) ) {s = 92;}

                        else if ( (LA71_247==AVRIL) ) {s = 93;}

                        else if ( (LA71_247==MAI) ) {s = 94;}

                        else if ( (LA71_247==JUIN) ) {s = 95;}

                        else if ( (LA71_247==JUILLET) ) {s = 96;}

                        else if ( (LA71_247==AOUT) ) {s = 97;}

                        else if ( (LA71_247==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_247==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_247==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_247==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_247==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_247==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_247==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_247==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_247==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_247==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_247==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_247==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_247==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_247==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_247==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_247==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_247==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_247==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_247==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_247==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_247==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_247==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_247==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_247>=INT_01 && LA71_247<=INT_09)||(LA71_247>=INT_10 && LA71_247<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_247>=INT_1 && LA71_247<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_247>=INT_13 && LA71_247<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_247>=INT_24 && LA71_247<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_247>=INT_32 && LA71_247<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_247>=INT_60 && LA71_247<=INT_99)) ) {s = 126;}

                        else if ( (LA71_247==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_247==INT_00) ) {s = 87;}

                         
                        input.seek(index71_247);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA71_445 = input.LA(1);

                         
                        int index71_445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DateParser()) ) {s = 479;}

                        else if ( (synpred20_DateParser()) ) {s = 461;}

                         
                        input.seek(index71_445);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA71_54 = input.LA(1);

                         
                        int index71_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_54==DU) ) {s = 88;}

                        else if ( (LA71_54==DE) ) {s = 89;}

                        else if ( (LA71_54==JANVIER) ) {s = 90;}

                        else if ( (LA71_54==FEVRIER) ) {s = 91;}

                        else if ( (LA71_54==MARS) ) {s = 92;}

                        else if ( (LA71_54==AVRIL) ) {s = 93;}

                        else if ( (LA71_54==MAI) ) {s = 94;}

                        else if ( (LA71_54==JUIN) ) {s = 95;}

                        else if ( (LA71_54==JUILLET) ) {s = 96;}

                        else if ( (LA71_54==AOUT) ) {s = 97;}

                        else if ( (LA71_54==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_54==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_54==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_54==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_54==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_54==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_54==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_54==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_54==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_54==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_54==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_54==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_54==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_54==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_54==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_54==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_54==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_54==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_54==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_54==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_54==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_54==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_54==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_54>=INT_01 && LA71_54<=INT_09)||(LA71_54>=INT_10 && LA71_54<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_54>=INT_1 && LA71_54<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_54>=INT_13 && LA71_54<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_54>=INT_24 && LA71_54<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_54>=INT_32 && LA71_54<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_54>=INT_60 && LA71_54<=INT_99)) ) {s = 126;}

                        else if ( (LA71_54==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_54==DIMANCHE) ) {s = 40;}

                        else if ( (LA71_54==LUNDI) ) {s = 41;}

                        else if ( (LA71_54==MARDI) ) {s = 42;}

                        else if ( (LA71_54==MERCREDI) ) {s = 43;}

                        else if ( (LA71_54==JEUDI) ) {s = 44;}

                        else if ( (LA71_54==VENDREDI) ) {s = 45;}

                        else if ( (LA71_54==SAMEDI) ) {s = 46;}

                        else if ( (LA71_54==INT_00) ) {s = 87;}

                         
                        input.seek(index71_54);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA71_218 = input.LA(1);

                         
                        int index71_218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_218==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_218==DU) ) {s = 216;}

                        else if ( (LA71_218==DE) ) {s = 217;}

                        else if ( (LA71_218==UN) && (synpred19_DateParser())) {s = 219;}

                        else if ( (LA71_218==PREMIER) && (synpred19_DateParser())) {s = 220;}

                        else if ( (LA71_218==DEUX) && (synpred19_DateParser())) {s = 221;}

                        else if ( (LA71_218==TROIS) && (synpred19_DateParser())) {s = 222;}

                        else if ( (LA71_218==QUATRE) && (synpred19_DateParser())) {s = 223;}

                        else if ( (LA71_218==CINQ) && (synpred19_DateParser())) {s = 224;}

                        else if ( (LA71_218==SIX) && (synpred19_DateParser())) {s = 225;}

                        else if ( (LA71_218==SEPT) && (synpred19_DateParser())) {s = 226;}

                        else if ( (LA71_218==HUIT) && (synpred19_DateParser())) {s = 227;}

                        else if ( (LA71_218==NEUF) && (synpred19_DateParser())) {s = 228;}

                        else if ( (LA71_218==ONZE) && (synpred19_DateParser())) {s = 229;}

                        else if ( (LA71_218==DOUZE) && (synpred19_DateParser())) {s = 230;}

                        else if ( (LA71_218==TREIZE) && (synpred19_DateParser())) {s = 231;}

                        else if ( (LA71_218==QUATORZE) && (synpred19_DateParser())) {s = 232;}

                        else if ( (LA71_218==QUINZE) && (synpred19_DateParser())) {s = 233;}

                        else if ( (LA71_218==SEIZE) && (synpred19_DateParser())) {s = 234;}

                        else if ( (LA71_218==DIX) && (synpred19_DateParser())) {s = 235;}

                        else if ( (LA71_218==VINGT) && (synpred19_DateParser())) {s = 236;}

                        else if ( (LA71_218==TRENTE) && (synpred19_DateParser())) {s = 237;}

                        else if ( ((LA71_218>=INT_01 && LA71_218<=INT_09)||(LA71_218>=INT_10 && LA71_218<=INT_12)) && (synpred19_DateParser())) {s = 238;}

                        else if ( ((LA71_218>=INT_1 && LA71_218<=INT_9)) && (synpred19_DateParser())) {s = 239;}

                        else if ( ((LA71_218>=INT_13 && LA71_218<=INT_23)) && (synpred19_DateParser())) {s = 240;}

                        else if ( ((LA71_218>=INT_24 && LA71_218<=INT_31)) && (synpred19_DateParser())) {s = 241;}

                        else if ( ((LA71_218>=INT_32 && LA71_218<=INT_59)) && (synpred19_DateParser())) {s = 242;}

                        else if ( ((LA71_218>=INT_60 && LA71_218<=INT_99)) && (synpred19_DateParser())) {s = 243;}

                         
                        input.seek(index71_218);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA71_468 = input.LA(1);

                         
                        int index71_468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_468==LA) ) {s = 502;}

                        else if ( (LA71_468==JANVIER) ) {s = 90;}

                        else if ( (LA71_468==FEVRIER) ) {s = 91;}

                        else if ( (LA71_468==MARS) ) {s = 92;}

                        else if ( (LA71_468==AVRIL) ) {s = 93;}

                        else if ( (LA71_468==MAI) ) {s = 94;}

                        else if ( (LA71_468==JUIN) ) {s = 95;}

                        else if ( (LA71_468==JUILLET) ) {s = 96;}

                        else if ( (LA71_468==AOUT) ) {s = 97;}

                        else if ( (LA71_468==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_468==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_468==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_468==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_468==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_468==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_468==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_468==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_468==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_468==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_468==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_468==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_468==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_468==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_468==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_468==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_468==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_468==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_468==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_468==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_468==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_468==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_468==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_468>=INT_01 && LA71_468<=INT_09)||(LA71_468>=INT_10 && LA71_468<=INT_12)) && (synpred16_DateParser())) {s = 322;}

                        else if ( ((LA71_468>=INT_1 && LA71_468<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_468>=INT_13 && LA71_468<=INT_23)) && (synpred16_DateParser())) {s = 323;}

                        else if ( ((LA71_468>=INT_24 && LA71_468<=INT_31)) && (synpred16_DateParser())) {s = 324;}

                        else if ( ((LA71_468>=INT_32 && LA71_468<=INT_59)) && (synpred16_DateParser())) {s = 325;}

                        else if ( ((LA71_468>=INT_60 && LA71_468<=INT_99)) && (synpred16_DateParser())) {s = 326;}

                        else if ( (LA71_468==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_468);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA71_354 = input.LA(1);

                         
                        int index71_354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_354>=INT_01 && LA71_354<=INT_09)||(LA71_354>=INT_10 && LA71_354<=INT_12)) ) {s = 440;}

                        else if ( ((LA71_354>=INT_1 && LA71_354<=INT_9)) && (synpred17_DateParser())) {s = 441;}

                        else if ( ((LA71_354>=INT_13 && LA71_354<=INT_23)) ) {s = 442;}

                        else if ( ((LA71_354>=INT_24 && LA71_354<=INT_31)) ) {s = 443;}

                        else if ( ((LA71_354>=INT_32 && LA71_354<=INT_59)) ) {s = 444;}

                        else if ( ((LA71_354>=INT_60 && LA71_354<=INT_99)) ) {s = 445;}

                        else if ( (LA71_354==EOF) && (synpred17_DateParser())) {s = 446;}

                        else if ( (LA71_354==WHITE_SPACE) && (synpred17_DateParser())) {s = 455;}

                        else if ( (LA71_354==COMMA) && (synpred17_DateParser())) {s = 448;}

                        else if ( (LA71_354==INT_00) && (synpred20_DateParser())) {s = 449;}

                         
                        input.seek(index71_354);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA71_471 = input.LA(1);

                         
                        int index71_471 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_471==LA) ) {s = 505;}

                        else if ( (LA71_471==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_471==JANVIER) ) {s = 90;}

                        else if ( (LA71_471==FEVRIER) ) {s = 91;}

                        else if ( (LA71_471==MARS) ) {s = 92;}

                        else if ( (LA71_471==AVRIL) ) {s = 93;}

                        else if ( (LA71_471==MAI) ) {s = 94;}

                        else if ( (LA71_471==JUIN) ) {s = 95;}

                        else if ( (LA71_471==JUILLET) ) {s = 96;}

                        else if ( (LA71_471==AOUT) ) {s = 97;}

                        else if ( (LA71_471==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_471==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_471==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_471==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_471==UN) ) {s = 196;}

                        else if ( (LA71_471==PREMIER) ) {s = 197;}

                        else if ( (LA71_471==DEUX) ) {s = 198;}

                        else if ( (LA71_471==TROIS) ) {s = 199;}

                        else if ( (LA71_471==QUATRE) ) {s = 200;}

                        else if ( (LA71_471==CINQ) ) {s = 201;}

                        else if ( (LA71_471==SIX) ) {s = 202;}

                        else if ( (LA71_471==SEPT) ) {s = 203;}

                        else if ( (LA71_471==HUIT) ) {s = 204;}

                        else if ( (LA71_471==NEUF) ) {s = 205;}

                        else if ( (LA71_471==ONZE) ) {s = 206;}

                        else if ( (LA71_471==DOUZE) ) {s = 207;}

                        else if ( (LA71_471==TREIZE) ) {s = 208;}

                        else if ( (LA71_471==QUATORZE) ) {s = 209;}

                        else if ( (LA71_471==QUINZE) ) {s = 210;}

                        else if ( (LA71_471==SEIZE) ) {s = 211;}

                        else if ( (LA71_471==DIX) ) {s = 212;}

                        else if ( (LA71_471==VINGT) ) {s = 213;}

                        else if ( (LA71_471==TRENTE) ) {s = 214;}

                        else if ( ((LA71_471>=INT_01 && LA71_471<=INT_09)||(LA71_471>=INT_10 && LA71_471<=INT_12)) ) {s = 363;}

                        else if ( ((LA71_471>=INT_1 && LA71_471<=INT_9)) ) {s = 215;}

                        else if ( ((LA71_471>=INT_13 && LA71_471<=INT_23)) ) {s = 364;}

                        else if ( ((LA71_471>=INT_24 && LA71_471<=INT_31)) ) {s = 365;}

                        else if ( ((LA71_471>=INT_32 && LA71_471<=INT_59)) ) {s = 366;}

                        else if ( ((LA71_471>=INT_60 && LA71_471<=INT_99)) ) {s = 367;}

                        else if ( (LA71_471==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_471);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA71_358 = input.LA(1);

                         
                        int index71_358 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_358==DASH||(LA71_358>=JUSQU_A && LA71_358<=A)||(LA71_358>=MINUIT && LA71_358<=NUIT)||LA71_358==DANS||(LA71_358>=OU && LA71_358<=CE)||LA71_358==AU||(LA71_358>=INT_00 && LA71_358<=INT_23)) ) {s = 87;}

                        else if ( (LA71_358==JANVIER) && (synpred16_DateParser())) {s = 408;}

                        else if ( (LA71_358==FEVRIER) && (synpred16_DateParser())) {s = 409;}

                        else if ( (LA71_358==MARS) && (synpred16_DateParser())) {s = 410;}

                        else if ( (LA71_358==AVRIL) && (synpred16_DateParser())) {s = 411;}

                        else if ( (LA71_358==MAI) && (synpred16_DateParser())) {s = 412;}

                        else if ( (LA71_358==JUIN) && (synpred16_DateParser())) {s = 413;}

                        else if ( (LA71_358==JUILLET) && (synpred16_DateParser())) {s = 414;}

                        else if ( (LA71_358==AOUT) && (synpred16_DateParser())) {s = 415;}

                        else if ( (LA71_358==SEPTEMBRE) && (synpred16_DateParser())) {s = 416;}

                        else if ( (LA71_358==OCTOBRE) && (synpred16_DateParser())) {s = 417;}

                        else if ( (LA71_358==NOVEMBRE) && (synpred16_DateParser())) {s = 418;}

                        else if ( (LA71_358==DECEMBRE) && (synpred16_DateParser())) {s = 419;}

                        else if ( (LA71_358==MOIS) && (synpred16_DateParser())) {s = 420;}

                         
                        input.seek(index71_358);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA71_72 = input.LA(1);

                         
                        int index71_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_72==ET) ) {s = 150;}

                        else if ( (LA71_72==JANVIER) ) {s = 90;}

                        else if ( (LA71_72==FEVRIER) ) {s = 91;}

                        else if ( (LA71_72==MARS) ) {s = 92;}

                        else if ( (LA71_72==AVRIL) ) {s = 93;}

                        else if ( (LA71_72==MAI) ) {s = 94;}

                        else if ( (LA71_72==JUIN) ) {s = 95;}

                        else if ( (LA71_72==JUILLET) ) {s = 96;}

                        else if ( (LA71_72==AOUT) ) {s = 97;}

                        else if ( (LA71_72==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_72==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_72==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_72==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_72==DU) ) {s = 88;}

                        else if ( (LA71_72==DE) ) {s = 89;}

                        else if ( (LA71_72==MOIS) && (synpred17_DateParser())) {s = 127;}

                        else if ( (LA71_72==INT_00) ) {s = 87;}

                        else if ( ((LA71_72>=INT_01 && LA71_72<=INT_09)||(LA71_72>=INT_10 && LA71_72<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_72>=INT_13 && LA71_72<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_72>=INT_24 && LA71_72<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_72>=INT_32 && LA71_72<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_72>=INT_60 && LA71_72<=INT_99)) ) {s = 126;}

                        else if ( (LA71_72==DIMANCHE) ) {s = 40;}

                        else if ( (LA71_72==LUNDI) ) {s = 41;}

                        else if ( (LA71_72==MARDI) ) {s = 42;}

                        else if ( (LA71_72==MERCREDI) ) {s = 43;}

                        else if ( (LA71_72==JEUDI) ) {s = 44;}

                        else if ( (LA71_72==VENDREDI) ) {s = 45;}

                        else if ( (LA71_72==SAMEDI) ) {s = 46;}

                        else if ( (LA71_72==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_72==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_72==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_72==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_72==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_72==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_72==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_72==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_72==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_72==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_72==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_72==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_72==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_72==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_72==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_72==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_72==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_72==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_72==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_72>=INT_1 && LA71_72<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                         
                        input.seek(index71_72);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA71_467 = input.LA(1);

                         
                        int index71_467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_467==JANVIER) ) {s = 90;}

                        else if ( (LA71_467==FEVRIER) ) {s = 91;}

                        else if ( (LA71_467==MARS) ) {s = 92;}

                        else if ( (LA71_467==AVRIL) ) {s = 93;}

                        else if ( (LA71_467==MAI) ) {s = 94;}

                        else if ( (LA71_467==JUIN) ) {s = 95;}

                        else if ( (LA71_467==JUILLET) ) {s = 96;}

                        else if ( (LA71_467==AOUT) ) {s = 97;}

                        else if ( (LA71_467==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_467==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_467==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_467==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_467==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_467==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_467==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_467==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_467==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_467==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_467==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_467==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_467==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_467==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_467==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_467==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_467==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_467==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_467==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_467==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_467==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_467==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_467==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_467>=INT_01 && LA71_467<=INT_09)||(LA71_467>=INT_10 && LA71_467<=INT_12)) && (synpred16_DateParser())) {s = 322;}

                        else if ( ((LA71_467>=INT_1 && LA71_467<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_467>=INT_13 && LA71_467<=INT_23)) && (synpred16_DateParser())) {s = 323;}

                        else if ( ((LA71_467>=INT_24 && LA71_467<=INT_31)) && (synpred16_DateParser())) {s = 324;}

                        else if ( ((LA71_467>=INT_32 && LA71_467<=INT_59)) && (synpred16_DateParser())) {s = 325;}

                        else if ( ((LA71_467>=INT_60 && LA71_467<=INT_99)) && (synpred16_DateParser())) {s = 326;}

                        else if ( (LA71_467==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_467);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA71_260 = input.LA(1);

                         
                        int index71_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_260==JANVIER) ) {s = 368;}

                        else if ( (LA71_260==FEVRIER) ) {s = 369;}

                        else if ( (LA71_260==MARS) ) {s = 370;}

                        else if ( (LA71_260==AVRIL) ) {s = 371;}

                        else if ( (LA71_260==MAI) ) {s = 372;}

                        else if ( (LA71_260==JUIN) ) {s = 373;}

                        else if ( (LA71_260==JUILLET) ) {s = 374;}

                        else if ( (LA71_260==AOUT) ) {s = 375;}

                        else if ( (LA71_260==SEPTEMBRE) ) {s = 376;}

                        else if ( (LA71_260==OCTOBRE) ) {s = 377;}

                        else if ( (LA71_260==NOVEMBRE) ) {s = 378;}

                        else if ( (LA71_260==DECEMBRE) ) {s = 379;}

                        else if ( (LA71_260==DU) ) {s = 88;}

                        else if ( (LA71_260==DE) ) {s = 89;}

                        else if ( (LA71_260==MOIS) ) {s = 380;}

                        else if ( (LA71_260==INT_00) ) {s = 87;}

                        else if ( ((LA71_260>=INT_01 && LA71_260<=INT_09)||(LA71_260>=INT_10 && LA71_260<=INT_12)) ) {s = 121;}

                        else if ( ((LA71_260>=INT_13 && LA71_260<=INT_23)) ) {s = 123;}

                        else if ( ((LA71_260>=INT_24 && LA71_260<=INT_31)) ) {s = 124;}

                        else if ( ((LA71_260>=INT_32 && LA71_260<=INT_59)) ) {s = 125;}

                        else if ( ((LA71_260>=INT_60 && LA71_260<=INT_99)) ) {s = 126;}

                        else if ( (LA71_260==DIMANCHE) ) {s = 40;}

                        else if ( (LA71_260==LUNDI) ) {s = 41;}

                        else if ( (LA71_260==MARDI) ) {s = 42;}

                        else if ( (LA71_260==MERCREDI) ) {s = 43;}

                        else if ( (LA71_260==JEUDI) ) {s = 44;}

                        else if ( (LA71_260==VENDREDI) ) {s = 45;}

                        else if ( (LA71_260==SAMEDI) ) {s = 46;}

                        else if ( (LA71_260==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_260==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_260==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_260==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_260==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_260==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_260==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_260==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_260==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_260==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_260==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_260==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_260==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_260==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_260==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_260==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_260==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_260==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_260==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_260>=INT_1 && LA71_260<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                         
                        input.seek(index71_260);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA71_350 = input.LA(1);

                         
                        int index71_350 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_350>=INT_01 && LA71_350<=INT_09)||(LA71_350>=INT_10 && LA71_350<=INT_12)) ) {s = 440;}

                        else if ( ((LA71_350>=INT_1 && LA71_350<=INT_9)) && (synpred17_DateParser())) {s = 441;}

                        else if ( ((LA71_350>=INT_13 && LA71_350<=INT_23)) ) {s = 442;}

                        else if ( ((LA71_350>=INT_24 && LA71_350<=INT_31)) ) {s = 443;}

                        else if ( ((LA71_350>=INT_32 && LA71_350<=INT_59)) ) {s = 444;}

                        else if ( ((LA71_350>=INT_60 && LA71_350<=INT_99)) ) {s = 445;}

                        else if ( (LA71_350==EOF) && (synpred17_DateParser())) {s = 446;}

                        else if ( (LA71_350==WHITE_SPACE) ) {s = 447;}

                        else if ( (LA71_350==COMMA) && (synpred17_DateParser())) {s = 448;}

                        else if ( ((LA71_350>=HEURE && LA71_350<=HEURE_SHORT)||LA71_350==COLON) ) {s = 250;}

                        else if ( (LA71_350==INT_00) && (synpred20_DateParser())) {s = 449;}

                         
                        input.seek(index71_350);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA71_125 = input.LA(1);

                         
                        int index71_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_125==INT_00) ) {s = 87;}

                        else if ( ((LA71_125>=INT_01 && LA71_125<=INT_09)||(LA71_125>=INT_10 && LA71_125<=INT_12)) ) {s = 251;}

                        else if ( ((LA71_125>=INT_13 && LA71_125<=INT_23)) ) {s = 253;}

                        else if ( ((LA71_125>=INT_24 && LA71_125<=INT_31)) ) {s = 254;}

                        else if ( ((LA71_125>=INT_32 && LA71_125<=INT_59)) ) {s = 255;}

                        else if ( ((LA71_125>=INT_60 && LA71_125<=INT_99)) ) {s = 256;}

                        else if ( ((LA71_125>=INT_1 && LA71_125<=INT_9)) && (synpred16_DateParser())) {s = 252;}

                        else if ( (LA71_125==WHITE_SPACE) && (synpred16_DateParser())) {s = 257;}

                         
                        input.seek(index71_125);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA71_352 = input.LA(1);

                         
                        int index71_352 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_352==EOF) && (synpred17_DateParser())) {s = 446;}

                        else if ( ((LA71_352>=HEURE && LA71_352<=HEURE_SHORT)||LA71_352==COLON) ) {s = 250;}

                        else if ( (LA71_352==WHITE_SPACE) ) {s = 447;}

                        else if ( (LA71_352==INT_00) && (synpred20_DateParser())) {s = 449;}

                        else if ( ((LA71_352>=INT_01 && LA71_352<=INT_09)||(LA71_352>=INT_10 && LA71_352<=INT_12)) ) {s = 440;}

                        else if ( ((LA71_352>=INT_13 && LA71_352<=INT_23)) ) {s = 442;}

                        else if ( ((LA71_352>=INT_24 && LA71_352<=INT_31)) ) {s = 443;}

                        else if ( ((LA71_352>=INT_32 && LA71_352<=INT_59)) ) {s = 444;}

                        else if ( ((LA71_352>=INT_60 && LA71_352<=INT_99)) ) {s = 445;}

                        else if ( ((LA71_352>=INT_1 && LA71_352<=INT_9)) && (synpred17_DateParser())) {s = 441;}

                        else if ( (LA71_352==COMMA) && (synpred17_DateParser())) {s = 448;}

                         
                        input.seek(index71_352);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA71_351 = input.LA(1);

                         
                        int index71_351 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_351==EOF) && (synpred17_DateParser())) {s = 446;}

                        else if ( ((LA71_351>=HEURE && LA71_351<=HEURE_SHORT)||LA71_351==COLON) ) {s = 250;}

                        else if ( (LA71_351==WHITE_SPACE) ) {s = 447;}

                        else if ( ((LA71_351>=INT_01 && LA71_351<=INT_09)||(LA71_351>=INT_10 && LA71_351<=INT_12)) && (synpred17_DateParser())) {s = 450;}

                        else if ( ((LA71_351>=INT_1 && LA71_351<=INT_9)) && (synpred17_DateParser())) {s = 441;}

                        else if ( ((LA71_351>=INT_13 && LA71_351<=INT_23)) && (synpred17_DateParser())) {s = 451;}

                        else if ( ((LA71_351>=INT_24 && LA71_351<=INT_31)) && (synpred17_DateParser())) {s = 452;}

                        else if ( ((LA71_351>=INT_32 && LA71_351<=INT_59)) && (synpred17_DateParser())) {s = 453;}

                        else if ( ((LA71_351>=INT_60 && LA71_351<=INT_99)) && (synpred17_DateParser())) {s = 454;}

                        else if ( (LA71_351==COMMA) && (synpred17_DateParser())) {s = 448;}

                         
                        input.seek(index71_351);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA71_248 = input.LA(1);

                         
                        int index71_248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_248==LA) ) {s = 321;}

                        else if ( (LA71_248==JANVIER) ) {s = 90;}

                        else if ( (LA71_248==FEVRIER) ) {s = 91;}

                        else if ( (LA71_248==MARS) ) {s = 92;}

                        else if ( (LA71_248==AVRIL) ) {s = 93;}

                        else if ( (LA71_248==MAI) ) {s = 94;}

                        else if ( (LA71_248==JUIN) ) {s = 95;}

                        else if ( (LA71_248==JUILLET) ) {s = 96;}

                        else if ( (LA71_248==AOUT) ) {s = 97;}

                        else if ( (LA71_248==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_248==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_248==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_248==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_248==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_248==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_248==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_248==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_248==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_248==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_248==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_248==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_248==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_248==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_248==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_248==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_248==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_248==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_248==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_248==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_248==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_248==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_248==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_248>=INT_01 && LA71_248<=INT_09)||(LA71_248>=INT_10 && LA71_248<=INT_12)) && (synpred16_DateParser())) {s = 322;}

                        else if ( ((LA71_248>=INT_1 && LA71_248<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_248>=INT_13 && LA71_248<=INT_23)) && (synpred16_DateParser())) {s = 323;}

                        else if ( ((LA71_248>=INT_24 && LA71_248<=INT_31)) && (synpred16_DateParser())) {s = 324;}

                        else if ( ((LA71_248>=INT_32 && LA71_248<=INT_59)) && (synpred16_DateParser())) {s = 325;}

                        else if ( ((LA71_248>=INT_60 && LA71_248<=INT_99)) && (synpred16_DateParser())) {s = 326;}

                        else if ( (LA71_248==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_248);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA71_83 = input.LA(1);

                         
                        int index71_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_83==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_83==DU) ) {s = 216;}

                        else if ( (LA71_83==DE) ) {s = 217;}

                        else if ( (LA71_83==WHITE_SPACE) ) {s = 218;}

                        else if ( (LA71_83==UN) && (synpred19_DateParser())) {s = 219;}

                        else if ( (LA71_83==PREMIER) && (synpred19_DateParser())) {s = 220;}

                        else if ( (LA71_83==DEUX) && (synpred19_DateParser())) {s = 221;}

                        else if ( (LA71_83==TROIS) && (synpred19_DateParser())) {s = 222;}

                        else if ( (LA71_83==QUATRE) && (synpred19_DateParser())) {s = 223;}

                        else if ( (LA71_83==CINQ) && (synpred19_DateParser())) {s = 224;}

                        else if ( (LA71_83==SIX) && (synpred19_DateParser())) {s = 225;}

                        else if ( (LA71_83==SEPT) && (synpred19_DateParser())) {s = 226;}

                        else if ( (LA71_83==HUIT) && (synpred19_DateParser())) {s = 227;}

                        else if ( (LA71_83==NEUF) && (synpred19_DateParser())) {s = 228;}

                        else if ( (LA71_83==ONZE) && (synpred19_DateParser())) {s = 229;}

                        else if ( (LA71_83==DOUZE) && (synpred19_DateParser())) {s = 230;}

                        else if ( (LA71_83==TREIZE) && (synpred19_DateParser())) {s = 231;}

                        else if ( (LA71_83==QUATORZE) && (synpred19_DateParser())) {s = 232;}

                        else if ( (LA71_83==QUINZE) && (synpred19_DateParser())) {s = 233;}

                        else if ( (LA71_83==SEIZE) && (synpred19_DateParser())) {s = 234;}

                        else if ( (LA71_83==DIX) && (synpred19_DateParser())) {s = 235;}

                        else if ( (LA71_83==VINGT) && (synpred19_DateParser())) {s = 236;}

                        else if ( (LA71_83==TRENTE) && (synpred19_DateParser())) {s = 237;}

                        else if ( ((LA71_83>=INT_01 && LA71_83<=INT_09)||(LA71_83>=INT_10 && LA71_83<=INT_12)) && (synpred19_DateParser())) {s = 238;}

                        else if ( ((LA71_83>=INT_1 && LA71_83<=INT_9)) && (synpred19_DateParser())) {s = 239;}

                        else if ( ((LA71_83>=INT_13 && LA71_83<=INT_23)) && (synpred19_DateParser())) {s = 240;}

                        else if ( ((LA71_83>=INT_24 && LA71_83<=INT_31)) && (synpred19_DateParser())) {s = 241;}

                        else if ( ((LA71_83>=INT_32 && LA71_83<=INT_59)) && (synpred19_DateParser())) {s = 242;}

                        else if ( ((LA71_83>=INT_60 && LA71_83<=INT_99)) && (synpred19_DateParser())) {s = 243;}

                         
                        input.seek(index71_83);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA71_263 = input.LA(1);

                         
                        int index71_263 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_263==JANVIER) ) {s = 90;}

                        else if ( (LA71_263==FEVRIER) ) {s = 91;}

                        else if ( (LA71_263==MARS) ) {s = 92;}

                        else if ( (LA71_263==AVRIL) ) {s = 93;}

                        else if ( (LA71_263==MAI) ) {s = 94;}

                        else if ( (LA71_263==JUIN) ) {s = 95;}

                        else if ( (LA71_263==JUILLET) ) {s = 96;}

                        else if ( (LA71_263==AOUT) ) {s = 97;}

                        else if ( (LA71_263==SEPTEMBRE) ) {s = 98;}

                        else if ( (LA71_263==OCTOBRE) ) {s = 99;}

                        else if ( (LA71_263==NOVEMBRE) ) {s = 100;}

                        else if ( (LA71_263==DECEMBRE) ) {s = 101;}

                        else if ( (LA71_263==DU) ) {s = 383;}

                        else if ( (LA71_263==DE) ) {s = 384;}

                        else if ( (LA71_263==UN) && (synpred16_DateParser())) {s = 102;}

                        else if ( (LA71_263==PREMIER) && (synpred16_DateParser())) {s = 103;}

                        else if ( (LA71_263==DEUX) && (synpred16_DateParser())) {s = 104;}

                        else if ( (LA71_263==TROIS) && (synpred16_DateParser())) {s = 105;}

                        else if ( (LA71_263==QUATRE) && (synpred16_DateParser())) {s = 106;}

                        else if ( (LA71_263==CINQ) && (synpred16_DateParser())) {s = 107;}

                        else if ( (LA71_263==SIX) && (synpred16_DateParser())) {s = 108;}

                        else if ( (LA71_263==SEPT) && (synpred16_DateParser())) {s = 109;}

                        else if ( (LA71_263==HUIT) && (synpred16_DateParser())) {s = 110;}

                        else if ( (LA71_263==NEUF) && (synpred16_DateParser())) {s = 111;}

                        else if ( (LA71_263==ONZE) && (synpred16_DateParser())) {s = 112;}

                        else if ( (LA71_263==DOUZE) && (synpred16_DateParser())) {s = 113;}

                        else if ( (LA71_263==TREIZE) && (synpred16_DateParser())) {s = 114;}

                        else if ( (LA71_263==QUATORZE) && (synpred16_DateParser())) {s = 115;}

                        else if ( (LA71_263==QUINZE) && (synpred16_DateParser())) {s = 116;}

                        else if ( (LA71_263==SEIZE) && (synpred16_DateParser())) {s = 117;}

                        else if ( (LA71_263==DIX) && (synpred16_DateParser())) {s = 118;}

                        else if ( (LA71_263==VINGT) && (synpred16_DateParser())) {s = 119;}

                        else if ( (LA71_263==TRENTE) && (synpred16_DateParser())) {s = 120;}

                        else if ( ((LA71_263>=INT_01 && LA71_263<=INT_09)||(LA71_263>=INT_10 && LA71_263<=INT_12)) && (synpred16_DateParser())) {s = 322;}

                        else if ( ((LA71_263>=INT_1 && LA71_263<=INT_9)) && (synpred16_DateParser())) {s = 122;}

                        else if ( ((LA71_263>=INT_13 && LA71_263<=INT_23)) && (synpred16_DateParser())) {s = 323;}

                        else if ( ((LA71_263>=INT_24 && LA71_263<=INT_31)) && (synpred16_DateParser())) {s = 324;}

                        else if ( ((LA71_263>=INT_32 && LA71_263<=INT_59)) && (synpred16_DateParser())) {s = 325;}

                        else if ( ((LA71_263>=INT_60 && LA71_263<=INT_99)) && (synpred16_DateParser())) {s = 326;}

                        else if ( (LA71_263==MOIS) && (synpred17_DateParser())) {s = 127;}

                         
                        input.seek(index71_263);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA71_442 = input.LA(1);

                         
                        int index71_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DateParser()) ) {s = 479;}

                        else if ( (synpred20_DateParser()) ) {s = 461;}

                         
                        input.seek(index71_442);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA71_443 = input.LA(1);

                         
                        int index71_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DateParser()) ) {s = 479;}

                        else if ( (synpred20_DateParser()) ) {s = 461;}

                         
                        input.seek(index71_443);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA71_447 = input.LA(1);

                         
                        int index71_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA71_447>=OU && LA71_447<=ET)) && (synpred17_DateParser())) {s = 480;}

                        else if ( (LA71_447==JUSQU_A) && (synpred17_DateParser())) {s = 481;}

                        else if ( (LA71_447==HEURE) ) {s = 250;}

                        else if ( (LA71_447==AU) && (synpred17_DateParser())) {s = 482;}

                        else if ( (LA71_447==DASH) && (synpred17_DateParser())) {s = 483;}

                        else if ( (LA71_447==A) && (synpred17_DateParser())) {s = 484;}

                        else if ( (LA71_447==INT_00) && (synpred17_DateParser())) {s = 485;}

                        else if ( (LA71_447==INT_0) && (synpred17_DateParser())) {s = 486;}

                        else if ( ((LA71_447>=INT_1 && LA71_447<=INT_9)) && (synpred17_DateParser())) {s = 487;}

                        else if ( ((LA71_447>=INT_01 && LA71_447<=INT_09)||(LA71_447>=INT_10 && LA71_447<=INT_12)) && (synpred17_DateParser())) {s = 488;}

                        else if ( ((LA71_447>=INT_13 && LA71_447<=INT_23)) && (synpred17_DateParser())) {s = 489;}

                        else if ( (LA71_447==CE) && (synpred17_DateParser())) {s = 490;}

                        else if ( (LA71_447==DANS) && (synpred17_DateParser())) {s = 491;}

                        else if ( (LA71_447==APRES_MIDI) && (synpred17_DateParser())) {s = 492;}

                        else if ( (LA71_447==MATIN) && (synpred17_DateParser())) {s = 493;}

                        else if ( (LA71_447==NUIT) && (synpred17_DateParser())) {s = 494;}

                        else if ( (LA71_447==MINUIT) && (synpred17_DateParser())) {s = 495;}

                        else if ( (LA71_447==SOIR) && (synpred17_DateParser())) {s = 496;}

                         
                        input.seek(index71_447);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA71_258 = input.LA(1);

                         
                        int index71_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_258==SEMAINE) && (synpred18_DateParser())) {s = 188;}

                        else if ( (LA71_258==UN) && (synpred19_DateParser())) {s = 219;}

                        else if ( (LA71_258==PREMIER) && (synpred19_DateParser())) {s = 220;}

                        else if ( (LA71_258==DEUX) && (synpred19_DateParser())) {s = 221;}

                        else if ( (LA71_258==TROIS) && (synpred19_DateParser())) {s = 222;}

                        else if ( (LA71_258==QUATRE) && (synpred19_DateParser())) {s = 223;}

                        else if ( (LA71_258==CINQ) && (synpred19_DateParser())) {s = 224;}

                        else if ( (LA71_258==SIX) && (synpred19_DateParser())) {s = 225;}

                        else if ( (LA71_258==SEPT) && (synpred19_DateParser())) {s = 226;}

                        else if ( (LA71_258==HUIT) && (synpred19_DateParser())) {s = 227;}

                        else if ( (LA71_258==NEUF) && (synpred19_DateParser())) {s = 228;}

                        else if ( (LA71_258==ONZE) && (synpred19_DateParser())) {s = 229;}

                        else if ( (LA71_258==DOUZE) && (synpred19_DateParser())) {s = 230;}

                        else if ( (LA71_258==TREIZE) && (synpred19_DateParser())) {s = 231;}

                        else if ( (LA71_258==QUATORZE) && (synpred19_DateParser())) {s = 232;}

                        else if ( (LA71_258==QUINZE) && (synpred19_DateParser())) {s = 233;}

                        else if ( (LA71_258==SEIZE) && (synpred19_DateParser())) {s = 234;}

                        else if ( (LA71_258==DIX) && (synpred19_DateParser())) {s = 235;}

                        else if ( (LA71_258==VINGT) && (synpred19_DateParser())) {s = 236;}

                        else if ( (LA71_258==TRENTE) && (synpred19_DateParser())) {s = 237;}

                        else if ( ((LA71_258>=INT_01 && LA71_258<=INT_09)||(LA71_258>=INT_10 && LA71_258<=INT_12)) && (synpred19_DateParser())) {s = 238;}

                        else if ( ((LA71_258>=INT_1 && LA71_258<=INT_9)) && (synpred19_DateParser())) {s = 239;}

                        else if ( ((LA71_258>=INT_13 && LA71_258<=INT_23)) && (synpred19_DateParser())) {s = 240;}

                        else if ( ((LA71_258>=INT_24 && LA71_258<=INT_31)) && (synpred19_DateParser())) {s = 241;}

                        else if ( ((LA71_258>=INT_32 && LA71_258<=INT_59)) && (synpred19_DateParser())) {s = 242;}

                        else if ( ((LA71_258>=INT_60 && LA71_258<=INT_99)) && (synpred19_DateParser())) {s = 243;}

                        else if ( (LA71_258==DU) ) {s = 359;}

                        else if ( (LA71_258==DE) ) {s = 360;}

                         
                        input.seek(index71_258);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA71_440 = input.LA(1);

                         
                        int index71_440 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DateParser()) ) {s = 479;}

                        else if ( (synpred20_DateParser()) ) {s = 461;}

                         
                        input.seek(index71_440);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA71_300 = input.LA(1);

                         
                        int index71_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_300==ET) ) {s = 424;}

                        else if ( (LA71_300==DEUX) ) {s = 425;}

                        else if ( (LA71_300==TROIS) ) {s = 426;}

                        else if ( (LA71_300==QUATRE) ) {s = 427;}

                        else if ( (LA71_300==CINQ) ) {s = 428;}

                        else if ( (LA71_300==SIX) ) {s = 429;}

                        else if ( (LA71_300==SEPT) ) {s = 430;}

                        else if ( (LA71_300==HUIT) ) {s = 431;}

                        else if ( (LA71_300==NEUF) ) {s = 432;}

                        else if ( (LA71_300==SEMAINE) && (synpred19_DateParser())) {s = 407;}

                        else if ( (LA71_300==JANVIER) && (synpred16_DateParser())) {s = 408;}

                        else if ( (LA71_300==FEVRIER) && (synpred16_DateParser())) {s = 409;}

                        else if ( (LA71_300==MARS) && (synpred16_DateParser())) {s = 410;}

                        else if ( (LA71_300==AVRIL) && (synpred16_DateParser())) {s = 411;}

                        else if ( (LA71_300==MAI) && (synpred16_DateParser())) {s = 412;}

                        else if ( (LA71_300==JUIN) && (synpred16_DateParser())) {s = 413;}

                        else if ( (LA71_300==JUILLET) && (synpred16_DateParser())) {s = 414;}

                        else if ( (LA71_300==AOUT) && (synpred16_DateParser())) {s = 415;}

                        else if ( (LA71_300==SEPTEMBRE) && (synpred16_DateParser())) {s = 416;}

                        else if ( (LA71_300==OCTOBRE) && (synpred16_DateParser())) {s = 417;}

                        else if ( (LA71_300==NOVEMBRE) && (synpred16_DateParser())) {s = 418;}

                        else if ( (LA71_300==DECEMBRE) && (synpred16_DateParser())) {s = 419;}

                        else if ( (LA71_300==MOIS) && (synpred16_DateParser())) {s = 420;}

                         
                        input.seek(index71_300);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA86_eotS =
        "\12\uffff";
    static final String DFA86_eofS =
        "\12\uffff";
    static final String DFA86_minS =
        "\1\51\1\76\1\uffff\1\76\1\uffff\1\76\1\uffff\1\75\1\5\1\21";
    static final String DFA86_maxS =
        "\1\u00cb\1\76\1\uffff\1\104\1\uffff\1\76\1\uffff\1\u00cb\1\u00c7"+
        "\1\33";
    static final String DFA86_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\uffff\1\3\3\uffff";
    static final String DFA86_specialS =
        "\12\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\6\10\uffff\1\6\1\1\1\6\10\uffff\1\5\2\uffff\2\6\6\uffff\11"+
            "\2\1\uffff\37\2\104\uffff\22\2\1\3\4\4",
            "\1\7",
            "",
            "\1\10\5\uffff\1\2",
            "",
            "\1\11",
            "",
            "\1\4\12\uffff\11\2\1\uffff\37\2\104\uffff\22\2\1\3\4\4",
            "\14\2\7\4\5\uffff\1\2\27\uffff\2\2\1\uffff\2\2\16\uffff\11"+
            "\2\1\uffff\166\2",
            "\7\4\3\uffff\1\6"
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "468:1: explicit_day_of_month_part : ( ( LE WHITE_SPACE )? relaxed_day_of_month ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> ^( EXPLICIT_SEEK relaxed_day_of_month ) | ( LE WHITE_SPACE )? relative_occurrence_index WHITE_SPACE day_of_week ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> ^( EXPLICIT_SEEK relative_occurrence_index day_of_week ) | ( ( ( DANS | A ) WHITE_SPACE )? LA WHITE_SPACE )? explicit_day_of_month_bound ( WHITE_SPACE ( DU | DE ( WHITE_SPACE LA )? ) )? -> explicit_day_of_month_bound );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA139_eotS =
        "\23\uffff";
    static final String DFA139_eofS =
        "\7\uffff\1\13\1\uffff\1\13\2\uffff\1\13\1\12\3\21\2\uffff";
    static final String DFA139_minS =
        "\1\51\5\30\1\uffff\1\76\1\30\1\76\2\uffff\1\5\4\32\2\uffff";
    static final String DFA139_maxS =
        "\1\150\5\103\1\uffff\1\u008c\1\30\1\104\2\uffff\1\u00cb\4\u00b4"+
        "\2\uffff";
    static final String DFA139_acceptS =
        "\6\uffff\1\3\3\uffff\1\1\1\2\5\uffff\2\1";
    static final String DFA139_specialS =
        "\23\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\6\2\uffff\5\6\1\uffff\1\6\4\uffff\1\6\17\uffff\1\1\11\4\1"+
            "\2\11\3\3\4\13\5",
            "\1\11\1\7\44\uffff\1\10\4\uffff\1\12",
            "\1\11\1\7\44\uffff\1\10\4\uffff\1\12",
            "\1\11\1\7\44\uffff\1\10\4\uffff\1\12",
            "\1\11\1\7\44\uffff\1\10\4\uffff\1\12",
            "\1\11\1\7\44\uffff\1\10\4\uffff\1\12",
            "",
            "\1\13\5\uffff\1\13\2\uffff\12\12\12\uffff\62\12",
            "\1\11",
            "\1\14\5\uffff\1\13",
            "",
            "",
            "\23\13\3\uffff\1\13\4\uffff\6\13\2\uffff\2\13\1\uffff\1\13"+
            "\6\uffff\6\13\2\uffff\5\13\1\uffff\3\13\1\uffff\1\13\2\uffff"+
            "\1\12\11\15\1\uffff\11\13\3\15\13\16\10\17\34\20\77\13",
            "\1\21\12\uffff\1\13\30\uffff\1\21\4\uffff\2\21\1\13\2\uffff"+
            "\11\13\1\uffff\143\13",
            "\1\21\12\uffff\1\13\30\uffff\1\21\4\uffff\2\21\1\13\2\uffff"+
            "\11\13\1\uffff\143\13",
            "\1\21\12\uffff\1\13\30\uffff\1\21\4\uffff\2\21\1\13\2\uffff"+
            "\11\13\1\uffff\143\13",
            "\1\22\43\uffff\1\22\4\uffff\2\22\3\uffff\11\13\1\uffff\143"+
            "\13",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "649:1: explicit_time : ( hours ( COLON | HEURE_SHORT | ( ( WHITE_SPACE )? HEURE WHITE_SPACE ) ) minutes ( ( COLON | ( ( WHITE_SPACE )? MINUTE WHITE_SPACE ) ) seconds )? -> ^( EXPLICIT_TIME hours minutes ( seconds )? ) | hours ( HEURE_SHORT | ( ( WHITE_SPACE )? HEURE ( WHITE_SPACE )? ) ) -> ^( EXPLICIT_TIME hours ^( MINUTES_OF_HOUR INT[\"0\"] ) ) | ( CE WHITE_SPACE )? named_time -> ^( EXPLICIT_TIME named_time ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA136_eotS =
        "\22\uffff";
    static final String DFA136_eofS =
        "\1\2\1\3\20\uffff";
    static final String DFA136_minS =
        "\1\76\1\5\3\uffff\1\5\14\uffff";
    static final String DFA136_maxS =
        "\1\104\1\u00cb\3\uffff\1\u00cb\14\uffff";
    static final String DFA136_acceptS =
        "\2\uffff\1\2\2\1\1\uffff\14\1";
    static final String DFA136_specialS =
        "\22\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\1\5\uffff\1\2",
            "\23\2\3\uffff\1\2\4\uffff\6\2\2\uffff\2\2\1\uffff\1\2\6\uffff"+
            "\6\2\2\uffff\4\2\1\5\1\uffff\3\2\1\uffff\1\4\3\uffff\11\2\1"+
            "\uffff\172\2",
            "",
            "",
            "",
            "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\10\21"+
            "\3\uffff\1\21\4\uffff\6\21\2\uffff\1\4\1\21\1\uffff\1\21\6\uffff"+
            "\3\21\2\4\1\21\2\uffff\5\21\1\uffff\3\21\1\uffff\1\21\3\uffff"+
            "\11\21\1\uffff\172\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "653:46: ( WHITE_SPACE )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA145_eotS =
        "\12\uffff";
    static final String DFA145_eofS =
        "\12\uffff";
    static final String DFA145_minS =
        "\1\51\1\76\5\uffff\1\63\1\76\1\56";
    static final String DFA145_maxS =
        "\1\62\1\76\5\uffff\1\64\1\76\1\60";
    static final String DFA145_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\3\uffff";
    static final String DFA145_specialS =
        "\12\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\5\2\uffff\1\5\1\2\1\3\1\6\1\4\1\uffff\1\1",
            "\1\7",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\10",
            "\1\11",
            "\1\3\1\6\1\4"
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "672:1: named_time : ( ( DANS WHITE_SPACE LE WHITE_SPACE )? APRES_MIDI -> ^( HOURS_OF_DAY INT[\"12\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? MATIN -> ^( HOURS_OF_DAY INT[\"8\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? NUIT -> ^( HOURS_OF_DAY INT[\"20\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( A WHITE_SPACE )? MINUIT -> ^( HOURS_OF_DAY INT[\"0\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) | ( DANS WHITE_SPACE LA WHITE_SPACE )? SOIR -> ^( HOURS_OF_DAY INT[\"19\"] ) ^( MINUTES_OF_HOUR INT[\"0\"] ) ^( SECONDS_OF_MINUTE INT[\"0\"] ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA151_eotS =
        "\103\uffff";
    static final String DFA151_eofS =
        "\103\uffff";
    static final String DFA151_minS =
        "\1\21\1\uffff\20\76\3\45\4\76\1\uffff\2\21\1\u00bb\3\76\1\21\1\66"+
        "\1\76\1\45\7\76\1\21\1\66\1\45\14\76\1\u00b5\2\76\1\u00b5\1\76\2"+
        "\u00b5\2\76";
    static final String DFA151_maxS =
        "\1\u00c7\1\uffff\20\104\2\u00bd\1\104\4\u00b4\1\uffff\1\72\2\u00bd"+
        "\3\104\2\u00bd\1\104\1\u00b5\7\104\1\72\1\66\1\u00b5\3\104\1\76"+
        "\10\104\1\u00b5\1\104\1\76\1\u00b5\1\104\2\u00b5\2\104";
    static final String DFA151_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\51\uffff";
    static final String DFA151_specialS =
        "\103\uffff}>";
    static final String[] DFA151_transitionS = {
            "\7\1\23\uffff\1\1\6\uffff\1\1\4\uffff\1\1\4\uffff\2\1\12\uffff"+
            "\11\25\1\uffff\11\26\3\25\13\27\10\30\104\1\1\2\1\4\1\5\1\6"+
            "\1\7\1\10\1\11\1\12\1\13\1\22\1\14\1\15\1\16\1\17\1\20\1\21"+
            "\1\23\1\24\1\3",
            "",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\34\30\uffff\1\33\5\uffff\1\31\166\uffff\1\37\1\36\1\35",
            "\1\41\20\uffff\1\43\7\uffff\1\40\5\uffff\1\31\161\uffff\1\46"+
            "\1\50\1\45\1\47\1\44\1\51\1\52\1\42",
            "\1\54\20\uffff\1\55\7\uffff\1\53\5\uffff\1\31",
            "\1\32\5\uffff\1\31\3\uffff\11\1\1\uffff\143\1",
            "\1\32\5\uffff\1\31\3\uffff\11\1\1\uffff\143\1",
            "\1\32\5\uffff\1\31\3\uffff\11\1\1\uffff\143\1",
            "\1\32\5\uffff\1\31\3\uffff\11\1\1\uffff\143\1",
            "",
            "\7\1\15\uffff\1\31\24\uffff\1\31",
            "\7\1\15\uffff\1\31\24\uffff\1\31\u0080\uffff\1\56\1\57\1\60",
            "\1\37\1\36\1\35",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\7\1\15\uffff\1\31\20\uffff\1\61\3\uffff\1\31\173\uffff\1\62"+
            "\1\63\1\64\1\65\1\66\1\67\1\70\1\71",
            "\1\43\177\uffff\1\46\1\50\1\45\1\47\1\44\1\51\1\52\1\42",
            "\1\32\5\uffff\1\31",
            "\1\72\u008f\uffff\1\73",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\7\1\15\uffff\1\31\20\uffff\1\74\3\uffff\1\31",
            "\1\55",
            "\1\75\u008f\uffff\1\76",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\77",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31",
            "\1\73",
            "\1\32\5\uffff\1\31",
            "\1\100",
            "\1\76",
            "\1\32\5\uffff\1\31",
            "\1\101",
            "\1\102",
            "\1\32\5\uffff\1\31",
            "\1\32\5\uffff\1\31"
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "176:6: ( relaxed_day_of_week )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA154_eotS =
        "\103\uffff";
    static final String DFA154_eofS =
        "\103\uffff";
    static final String DFA154_minS =
        "\1\21\1\uffff\20\76\3\45\4\76\1\uffff\2\5\1\u00bb\3\76\1\5\1\66"+
        "\4\76\1\45\4\76\1\5\1\66\1\45\14\76\1\u00b5\2\76\1\u00b5\1\76\2"+
        "\u00b5\2\76";
    static final String DFA154_maxS =
        "\1\u00c7\1\uffff\20\76\2\u00bd\1\76\4\u00b4\1\uffff\1\27\2\u00bd"+
        "\3\76\2\u00bd\4\76\1\u00b5\4\76\2\66\1\u00b5\14\76\1\u00b5\2\76"+
        "\1\u00b5\1\76\2\u00b5\2\76";
    static final String DFA154_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\51\uffff";
    static final String DFA154_specialS =
        "\103\uffff}>";
    static final String[] DFA154_transitionS = {
            "\7\1\23\uffff\1\1\6\uffff\1\1\1\31\3\uffff\1\1\4\uffff\2\1\6"+
            "\uffff\1\31\3\uffff\11\25\1\uffff\11\26\3\25\13\27\10\30\104"+
            "\1\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\22\1\14\1\15\1"+
            "\16\1\17\1\20\1\21\1\23\1\24\1\3",
            "",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\34\30\uffff\1\33\174\uffff\1\37\1\36\1\35",
            "\1\41\20\uffff\1\46\7\uffff\1\40\167\uffff\1\50\1\51\1\43\1"+
            "\45\1\47\1\52\1\42\1\44",
            "\1\54\20\uffff\1\55\7\uffff\1\53",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "\1\32\11\uffff\11\1\1\uffff\143\1",
            "",
            "\14\31\7\1",
            "\14\31\7\1\u00a3\uffff\1\56\1\57\1\60",
            "\1\37\1\36\1\35",
            "\1\32",
            "\1\32",
            "\1\32",
            "\14\31\7\1\36\uffff\1\61\177\uffff\1\62\1\63\1\64\1\65\1\66"+
            "\1\67\1\70\1\71",
            "\1\46\177\uffff\1\50\1\51\1\43\1\45\1\47\1\52\1\42\1\44",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\72\u008f\uffff\1\73",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\14\31\7\1\36\uffff\1\74",
            "\1\55",
            "\1\75\u008f\uffff\1\76",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\77",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\32",
            "\1\73",
            "\1\32",
            "\1\100",
            "\1\76",
            "\1\32",
            "\1\101",
            "\1\102",
            "\1\32",
            "\1\32"
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "306:4: ( relaxed_day_of_week )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_empty_in_parse181 = new BitSet(new long[]{0x789FFADF7DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_recurrence_in_parse188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_time_alternative_in_parse192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAQUE_in_recurrence208 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_recurrence210 = new BitSet(new long[]{0x789FFADF7DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_date_time_alternative_in_recurrence212 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_recurrence215 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_JUSQU_A_in_recurrence217 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_recurrence219 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_date_time_in_recurrence221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_in_date_time280 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_date_time283 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_date_time285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_time_in_date_time297 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_time_date_separator_in_date_time300 = new BitSet(new long[]{0x789C0A1F08FFFFE0L,0xFFFFFFFFFFFDFF17L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_date_in_date_time302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_time_in_date_time328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_separator352 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_A_in_date_time_separator355 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_separator357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_date_time_separator365 = new BitSet(new long[]{0x4000020000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_separator367 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_A_in_date_time_separator371 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_separator373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_time_date_separator390 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_LE_in_time_date_separator393 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_time_date_separator395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_time_date_separator403 = new BitSet(new long[]{0x4008000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_time_date_separator405 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_LE_in_time_date_separator409 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_time_date_separator411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formal_date_in_date428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_date_in_date434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_date_in_date440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_relative_date_in_date446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_date_prefix_in_date452 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date454 = new BitSet(new long[]{0x789C0A1F08FFFFE0L,0xFFFFFFFFFFFDFF17L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_date_in_date456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CE_in_date_time_alternative498 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative500 = new BitSet(new long[]{0x0000004070000000L});
    public static final BitSet FOLLOW_this_suffix_in_date_time_alternative502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_month_in_date_time_alternative555 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative557 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_date_time_alternative571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUIVANT_in_date_time_alternative757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_date_time_alternative913 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_LA_in_date_time_alternative917 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative920 = new BitSet(new long[]{0x0018004070000000L});
    public static final BitSet FOLLOW_relative_date_interval_in_date_time_alternative924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_in_date_time_alternative973 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_date_time_alternative976 = new BitSet(new long[]{0x789C0A1F08FFFFE0L,0xFFFFFFFFFFFDFF17L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_interval_conjunction_in_date_time_alternative980 = new BitSet(new long[]{0x789C0A1F08FFFFE0L,0xFFFFFFFFFFFDFF17L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_global_date_prefix_in_date_time_alternative983 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_date_time_alternative986 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_date_time_alternative988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alternative_day_of_week_list_in_date_time_alternative1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alternative_day_of_month_list_in_date_time_alternative1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CE_in_date_time_alternative1136 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1138 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_date_time_alternative1142 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_date_time_alternative1145 = new BitSet(new long[]{0x7080000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interval_conjunction_in_date_time_alternative1149 = new BitSet(new long[]{0x7080000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_alternative_direction_in_date_time_alternative1152 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_date_time_alternative1155 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_date_time_alternative1157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_year_part_in_date_time_alternative1296 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_date_time_alternative1299 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_interval_conjunction_in_date_time_alternative1303 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_year_part_in_date_time_alternative1308 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1310 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_date_time_alternative1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PENDANT_in_date_time_alternative1429 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1431 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_date_time_alternative1433 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1435 = new BitSet(new long[]{0x789DFA1F7DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_relative_date_span_in_date_time_alternative1444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_time_span_in_date_time_alternative1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_date_time_alternative1661 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1663 = new BitSet(new long[]{0x2000080000000000L});
    public static final BitSet FOLLOW_DERNIER_in_date_time_alternative1666 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_PASSE_in_date_time_alternative1670 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1673 = new BitSet(new long[]{0x789DFA1F7DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_relative_date_span_in_date_time_alternative1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_time_span_in_date_time_alternative1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_date_time_alternative1899 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_date_time_alternative1904 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interval_conjunction_in_date_time_alternative1906 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_date_time_alternative1910 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1912 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_date_time_alternative1914 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_date_time_alternative1917 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_date_time_alternative1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_time_in_date_time_alternative2028 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_date_time_alternative2031 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_interval_conjunction_in_date_time_alternative2035 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_date_time_in_date_time_alternative2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_time_in_date_time_alternative2069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_conjunction2094 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_conjunction2097 = new BitSet(new long[]{0x0060000000000000L});
    public static final BitSet FOLLOW_set_in_conjunction2099 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_conjunction2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_interval_conjunction2121 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_interval_conjunction2124 = new BitSet(new long[]{0x0400002000000000L});
    public static final BitSet FOLLOW_AU_in_interval_conjunction2127 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_DASH_in_interval_conjunction2131 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_interval_conjunction2134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMAINE_in_this_suffix2153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOIS_in_this_suffix2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANNEE_in_this_suffix2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKEND_in_this_suffix2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMAINE_in_relative_date_interval2427 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date_interval2429 = new BitSet(new long[]{0x3000080000000000L});
    public static final BitSet FOLLOW_interval_direction_prefix_in_relative_date_interval2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOIS_in_relative_date_interval2522 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date_interval2524 = new BitSet(new long[]{0x3000080000000000L});
    public static final BitSet FOLLOW_interval_direction_prefix_in_relative_date_interval2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANNEE_in_relative_date_interval2620 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date_interval2622 = new BitSet(new long[]{0x3000080000000000L});
    public static final BitSet FOLLOW_interval_direction_prefix_in_relative_date_interval2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKEND_in_relative_date_interval2717 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date_interval2719 = new BitSet(new long[]{0x3000080000000000L});
    public static final BitSet FOLLOW_interval_direction_prefix_in_relative_date_interval2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_interval_direction_prefix2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUIVANT_in_interval_direction_prefix2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PASSE_in_interval_direction_prefix2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_alternative_day_of_month_list2882 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_alternative_day_of_month_list2885 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_alternative_day_of_month_list2887 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list2889 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_alternative_day_of_month_list2893 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_interval_conjunction_in_alternative_day_of_month_list2897 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_alternative_day_of_month_list2900 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_alternative_day_of_month_list2906 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_alternative_day_of_month_list2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list2970 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_alternative_day_of_month_list2972 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list2976 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list2978 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_alternative_day_of_month_list2980 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_alternative_day_of_month_list2983 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_alternative_day_of_month_list2985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list3085 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_alternative_day_of_month_list3087 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_alternative_day_of_month_list3091 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list3093 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_alternative_day_of_month_list3095 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_alternative_day_of_month_list3097 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_alternative_day_of_month_list3099 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_alternative_day_of_month_list3102 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_alternative_day_of_month_list3104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_of_week_in_alternative_day_of_week_list3186 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_alternative_day_of_week_list3188 = new BitSet(new long[]{0x7080000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_alternative_direction_in_alternative_day_of_week_list3190 = new BitSet(new long[]{0x7080000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_day_of_week_list_separator_in_alternative_day_of_week_list3193 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_alternative_day_of_week_list3195 = new BitSet(new long[]{0x7080000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_date_time_separator_in_alternative_day_of_week_list3200 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_time_in_alternative_day_of_week_list3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_day_of_week_list_separator3247 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_day_of_week_list_separator3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_day_of_week_list_separator3254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_day_of_week_list_separator3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUIVANT_in_alternative_direction3274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_alternative_direction3291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CE_in_alternative_direction3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_global_date_prefix3353 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3355 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_JOUR_in_global_date_prefix3359 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3361 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3391 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3393 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_JOUR_in_global_date_prefix3395 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3397 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3430 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3432 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SEMAINE_in_global_date_prefix3434 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3436 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3469 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3471 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_MOIS_in_global_date_prefix3473 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3475 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3504 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3506 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_ANNEE_in_global_date_prefix3508 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3510 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_global_date_prefix3544 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3546 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_global_date_prefix3550 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3552 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_global_date_prefix3584 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3586 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_global_date_prefix3588 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_global_date_prefix3590 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_prefix_direction_in_global_date_prefix3592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APRES_in_prefix_direction3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVANT_in_prefix_direction3636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_relaxed_date3703 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_prefix_in_relaxed_date3706 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_relaxed_date3709 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_date3724 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_relaxed_date3726 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_date3728 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_relaxed_date3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_month_prefix_in_relaxed_date3746 = new BitSet(new long[]{0x708C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_relaxed_date3749 = new BitSet(new long[]{0x708C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_relaxed_date3752 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_date3767 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_relaxed_date3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_relaxed_day_of_week3808 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_day_of_week3810 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_relaxed_day_of_week3814 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_relaxed_day_of_week3816 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_day_of_week3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_relaxed_day_of_month_prefix3840 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_day_of_month_prefix3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_relaxed_day_of_month_prefix3848 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relaxed_day_of_month_prefix3850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JANVIER_in_relaxed_month3867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FEVRIER_in_relaxed_month3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARS_in_relaxed_month3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVRIL_in_relaxed_month3921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAI_in_relaxed_month3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JUIN_in_relaxed_month3961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JUILLET_in_relaxed_month3981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AOUT_in_relaxed_month3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEPTEMBRE_in_relaxed_month4018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCTOBRE_in_relaxed_month4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOVEMBRE_in_relaxed_month4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECEMBRE_in_relaxed_month4066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_01_to_31_optional_prefix_in_relaxed_day_of_month4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_01_to_31_optional_prefix_in_relaxed_day_of_year4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_four_digits_in_relaxed_year4149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_formal_date4185 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_formal_day_of_month_in_formal_date4188 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_formal_date_separator_in_formal_date4190 = new BitSet(new long[]{0x0000000000000000L,0x000000003FFDFF00L});
    public static final BitSet FOLLOW_formal_month_of_year_in_formal_date4192 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_formal_date_separator_in_formal_date4195 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_formal_year_in_formal_date4197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_01_to_12_optional_prefix_in_formal_month_of_year4236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_01_to_31_optional_prefix_in_formal_day_of_month4259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formal_year_four_digits_in_formal_year4282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_00_to_99_mandatory_prefix_in_formal_year4288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_four_digits_in_formal_year_four_digits4311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_formal_date_separator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_of_week_in_relative_date4363 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date4365 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relative_date_prefix_in_relative_date4367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_of_week_in_relative_date4399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_month_in_relative_date4445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_relative_date4484 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date4486 = new BitSet(new long[]{0x3084080078FFFFE0L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relative_target_in_relative_date4488 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date4490 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_relative_date_suffix_in_relative_date4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_date_direction_in_relative_date4527 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date4529 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_relative_date4531 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date4533 = new BitSet(new long[]{0x3084080078FFFFE0L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relative_target_in_relative_date4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_relative_date_in_relative_date4573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_relative_date_direction4586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IL_Y_A_in_relative_date_direction4599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_explicit_relative_date4638 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4640 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_explicit_relative_date4642 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4653 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_explicit_relative_date4655 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4657 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_relative_date_suffix_in_explicit_relative_date4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_explicit_relative_date4712 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4714 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_explicit_relative_date4716 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4718 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_explicit_relative_date4720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_week_part_in_explicit_relative_date4794 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4796 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SEMAINE_in_explicit_relative_date4798 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4801 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_explicit_relative_date4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_week_part_in_explicit_relative_date4872 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4874 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_explicit_relative_date4876 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4887 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SEMAINE_in_explicit_relative_date4889 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4891 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_relative_date_suffix_in_explicit_relative_date4893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_explicit_relative_date4970 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4972 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_explicit_relative_date4974 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date4976 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_explicit_relative_date4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_explicit_relative_date5046 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date5048 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_explicit_relative_date5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_year_part_in_explicit_relative_date5112 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_relative_date5114 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_explicit_relative_date5116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_explicit_day_of_month_part5155 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5157 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_explicit_day_of_month_part5161 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5164 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_month_part5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_month_part5171 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5174 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_month_part5176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_explicit_day_of_month_part5212 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5214 = new BitSet(new long[]{0x2008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000F80L});
    public static final BitSet FOLLOW_relative_occurrence_index_in_explicit_day_of_month_part5218 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5220 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_explicit_day_of_month_part5222 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5225 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_month_part5228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_month_part5232 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5235 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_month_part5237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_explicit_day_of_month_part5277 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_A_in_explicit_day_of_month_part5281 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5284 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_month_part5288 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5290 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_month_bound_in_explicit_day_of_month_part5294 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5297 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_month_part5300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_month_part5304 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_part5307 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_month_part5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_explicit_day_of_week_part5343 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5345 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_explicit_day_of_week_part5349 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5352 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_week_part5355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_week_part5359 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5361 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_week_part5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_explicit_day_of_week_part5400 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_A_in_explicit_day_of_week_part5404 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5407 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_week_part5411 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5413 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF03L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_explicit_day_of_week_bound_in_explicit_day_of_week_part5417 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5420 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_week_part5423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_week_part5427 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_part5430 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_week_part5432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_explicit_day_of_year_part5466 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5468 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_year_in_explicit_day_of_year_part5472 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5475 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_year_part5478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_year_part5482 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5484 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_year_part5486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_explicit_day_of_year_part5522 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_A_in_explicit_day_of_year_part5526 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5529 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_LE_in_explicit_day_of_year_part5533 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5535 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_year_bound_in_explicit_day_of_year_part5539 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5542 = new BitSet(new long[]{0x0300000000000000L});
    public static final BitSet FOLLOW_DU_in_explicit_day_of_year_part5545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DE_in_explicit_day_of_year_part5549 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_part5552 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_explicit_day_of_year_part5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEBUT_in_explicit_day_of_year_bound5589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIN_in_explicit_day_of_year_bound5622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_explicit_day_of_year_bound5627 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_year_bound5629 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_JOUR_in_explicit_day_of_year_bound5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEBUT_in_explicit_day_of_month_bound5672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIN_in_explicit_day_of_month_bound5705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_explicit_day_of_month_bound5710 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_month_bound5712 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_JOUR_in_explicit_day_of_month_bound5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEBUT_in_explicit_day_of_week_bound5755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREMIER_in_explicit_day_of_week_bound5760 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_bound5762 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_JOUR_in_explicit_day_of_week_bound5764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIN_in_explicit_day_of_week_bound5798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_explicit_day_of_week_bound5803 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_day_of_week_bound5805 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_JOUR_in_explicit_day_of_week_bound5807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_month_in_explicit_relative_month5843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOIS_in_explicit_relative_month5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREMIER_in_relative_occurrence_index5869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEUXIEME_in_relative_occurrence_index5884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TROISIEME_in_relative_occurrence_index5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUATRIEME_in_relative_occurrence_index5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CINQUIEME_in_relative_occurrence_index5924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_relative_occurrence_index5937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_of_week_in_relative_target5961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_month_in_relative_target5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_date_span_in_relative_target5974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_time_span_in_relative_time_target5989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEURE_in_relative_time_span6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTE_in_relative_time_span6017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECOND_in_relative_time_span6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CE_in_implicit_prefix6050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DERNIER_in_relative_date_prefix6076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUIVANT_in_relative_date_prefix6097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PASSE_in_relative_date_prefix6118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_relative_date_prefix6142 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_date_prefix6144 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_relative_date_prefix6148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_date_prefix_in_prefix6180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_prefix_in_prefix6186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVANT_in_relative_date_suffix6204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APRES_in_relative_time_suffix6230 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time_suffix6233 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_relative_time_suffix_anchor_in_relative_time_suffix6235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVANT_in_relative_time_suffix6265 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time_suffix6268 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_relative_time_suffix_anchor_in_relative_time_suffix6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_relative_time_in_relative_time_suffix_anchor6304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_time_in_relative_time_suffix_anchor6311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOUR_in_relative_date_span6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMAINE_in_relative_date_span6353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOIS_in_relative_date_span6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANNEE_in_relative_date_span6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMANCHE_in_day_of_week6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LUNDI_in_day_of_week6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARDI_in_day_of_week6438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERCREDI_in_day_of_week6457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JEUDI_in_day_of_week6473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VENDREDI_in_day_of_week6492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMEDI_in_day_of_week6508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUJOURD_HUI_in_named_relative_date6536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAINTENANT_in_named_relative_date6540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEMAIN_in_named_relative_date6570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APRES_DEMAIN_in_named_relative_date6619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HIER_in_named_relative_date6662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVANT_HIER_in_named_relative_date6713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAINTENANT_in_named_relative_time6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_relative_time6809 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time6811 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_relative_time_target_in_relative_time6813 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time6815 = new BitSet(new long[]{0x8000040000000000L});
    public static final BitSet FOLLOW_relative_time_suffix_in_relative_time6817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_relative_time6852 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time6854 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_relative_time6856 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time6858 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_relative_time_target_in_relative_time6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relative_time_target_in_relative_time6898 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_relative_time6900 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_relative_time6902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hours_in_explicit_time6936 = new BitSet(new long[]{0x4000000003000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_explicit_time6939 = new BitSet(new long[]{0x0000000000000000L,0xFFFFFFFFFFFDFF80L,0x0000000000001FFFL});
    public static final BitSet FOLLOW_HEURE_SHORT_in_explicit_time6943 = new BitSet(new long[]{0x0000000000000000L,0xFFFFFFFFFFFDFF80L,0x0000000000001FFFL});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time6948 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_HEURE_in_explicit_time6951 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time6953 = new BitSet(new long[]{0x0000000000000000L,0xFFFFFFFFFFFDFF80L,0x0000000000001FFFL});
    public static final BitSet FOLLOW_minutes_in_explicit_time6957 = new BitSet(new long[]{0x4000000004000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_explicit_time6961 = new BitSet(new long[]{0x0000000000000000L,0xFFFFFFFFFFFDFF80L,0x0000000000001FFFL});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time6966 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_MINUTE_in_explicit_time6969 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time6971 = new BitSet(new long[]{0x0000000000000000L,0xFFFFFFFFFFFDFF80L,0x0000000000001FFFL});
    public static final BitSet FOLLOW_seconds_in_explicit_time6975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hours_in_explicit_time7005 = new BitSet(new long[]{0x4000000003000000L});
    public static final BitSet FOLLOW_HEURE_SHORT_in_explicit_time7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time7013 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_HEURE_in_explicit_time7016 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time7018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CE_in_explicit_time7052 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_explicit_time7054 = new BitSet(new long[]{0x789DFA1F08FFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_named_time_in_explicit_time7058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_00_to_23_optional_prefix_in_hours7088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_00_to_59_mandatory_prefix_in_minutes7111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_00_to_59_mandatory_prefix_in_seconds7134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_named_time7158 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7160 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_LE_in_named_time7162 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7164 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_APRES_MIDI_in_named_time7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_named_time7199 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7201 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_named_time7203 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7205 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_MATIN_in_named_time7209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_named_time7245 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7247 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_named_time7249 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7251 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_NUIT_in_named_time7255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_A_in_named_time7292 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7294 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_MINUIT_in_named_time7298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DANS_in_named_time7351 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7353 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LA_in_named_time7355 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_named_time7357 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_SOIR_in_named_time7361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recurrence_in_synpred1_DateParser185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_in_synpred2_DateParser277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_month_in_synpred3_DateParser532 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred3_DateParser534 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_synpred3_DateParser537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUIVANT_in_synpred3_DateParser541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_in_synpred4_DateParser953 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_synpred4_DateParser956 = new BitSet(new long[]{0x789C0A1F08FFFFE0L,0xFFFFFFFFFFFDFF17L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_interval_conjunction_in_synpred4_DateParser960 = new BitSet(new long[]{0x789C0A1F08FFFFE0L,0xFFFFFFFFFFFDFF17L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_global_date_prefix_in_synpred4_DateParser963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alternative_day_of_week_list_in_synpred5_DateParser1048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alternative_day_of_month_list_in_synpred6_DateParser1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CE_in_synpred7_DateParser1111 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred7_DateParser1113 = new BitSet(new long[]{0x3084080000FE0000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_day_of_week_in_synpred7_DateParser1117 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_synpred7_DateParser1120 = new BitSet(new long[]{0x3080000000000000L});
    public static final BitSet FOLLOW_interval_conjunction_in_synpred7_DateParser1124 = new BitSet(new long[]{0x3080000000000000L});
    public static final BitSet FOLLOW_alternative_direction_in_synpred7_DateParser1127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_year_part_in_synpred8_DateParser1270 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_synpred8_DateParser1273 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_interval_conjunction_in_synpred8_DateParser1277 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_year_part_in_synpred8_DateParser1280 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred8_DateParser1282 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_synpred8_DateParser1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PENDANT_in_synpred9_DateParser1415 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred9_DateParser1417 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_synpred9_DateParser1419 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred9_DateParser1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_synpred10_DateParser1641 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred10_DateParser1643 = new BitSet(new long[]{0x2000080000000000L});
    public static final BitSet FOLLOW_set_in_synpred10_DateParser1645 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred10_DateParser1653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_synpred11_DateParser1874 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_synpred11_DateParser1877 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interval_conjunction_in_synpred11_DateParser1879 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_synpred11_DateParser1881 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred11_DateParser1883 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_synpred11_DateParser1885 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred11_DateParser1888 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_synpred11_DateParser1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_time_in_synpred12_DateParser2010 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_synpred12_DateParser2013 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_interval_conjunction_in_synpred12_DateParser2017 = new BitSet(new long[]{0x789DFA1F0DFFFFE0L,0xFFFFFFFFFFFFFF97L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_date_time_in_synpred12_DateParser2020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred13_DateParser2950 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_synpred13_DateParser2952 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred13_DateParser2954 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred13_DateParser2956 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_synpred13_DateParser2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred14_DateParser3061 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_conjunction_in_synpred14_DateParser3063 = new BitSet(new long[]{0x309C0A0000FE0000L,0xFFFFFFFFFFFDFF13L,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred14_DateParser3065 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred14_DateParser3067 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_synpred14_DateParser3069 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred14_DateParser3071 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_synpred14_DateParser3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relaxed_day_of_week_in_synpred15_DateParser3666 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_prefix_in_synpred15_DateParser3669 = new BitSet(new long[]{0x308C080000FE0000L,0xFFFFFFFFFFFDFF10L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_day_of_month_in_synpred15_DateParser3672 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred15_DateParser3685 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_synpred15_DateParser3687 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred15_DateParser3689 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_synpred15_DateParser3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred16_DateParser4626 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred16_DateParser4628 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_synpred16_DateParser4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred17_DateParser4696 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred17_DateParser4698 = new BitSet(new long[]{0x000000002001FFE0L});
    public static final BitSet FOLLOW_explicit_relative_month_in_synpred17_DateParser4700 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred17_DateParser4702 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_synpred17_DateParser4704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_week_part_in_synpred18_DateParser4776 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred18_DateParser4778 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SEMAINE_in_synpred18_DateParser4780 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred18_DateParser4782 = new BitSet(new long[]{0x3084080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_prefix_in_synpred18_DateParser4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_week_part_in_synpred19_DateParser4860 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred19_DateParser4862 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF00L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_spelled_or_int_optional_prefix_in_synpred19_DateParser4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_day_of_month_part_in_synpred20_DateParser4952 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred20_DateParser4954 = new BitSet(new long[]{0x000000000001FFE0L});
    public static final BitSet FOLLOW_relaxed_month_in_synpred20_DateParser4956 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_WHITE_SPACE_in_synpred20_DateParser4958 = new BitSet(new long[]{0x3004080000000000L,0xFFFFFFFFFFFDFF80L,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_relaxed_year_in_synpred20_DateParser4960 = new BitSet(new long[]{0x0000000000000002L});

}