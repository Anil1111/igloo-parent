<?xml version="1.0" encoding="UTF-8"?>

<!--
  - Sample namespace-based configuration
  -
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:component-scan base-package="fr.openwide.springsec.web.business"/>

	<!--
		Active la prise en compte des annotations @Pre/PostFilter et @Pre/PostAuthorize
		Voir aussi les attributs secured-annotations et jsr250-annotations pour les annotations
		@Secured et les annotations JSR250.
	-->
	<security:global-method-security pre-post-annotations="enabled">
		<!--
		Le protect-pointcut est pris en compte si d'autres annotations Pre/Post n'existent pas
		et vérifie que l'utilisateur est bien ROLE_USER
		-->
		<security:protect-pointcut expression="execution(* fr.openwide.springsec.web.business.*Service.*(..))" access="ROLE_USER"/>
	</security:global-method-security>

	<!-- Filtrage de sécurité selon les URLs appellées -->
	<security:http use-expressions="true">
		<security:intercept-url pattern="/index.jsp" access="permitAll"/>
		<security:intercept-url pattern="/secured/admin.jsp" access="hasRole('ROLE_SUPERVISOR')"/>
		<security:intercept-url pattern="/**" access="isAuthenticated()"/>
		<security:form-login />
		<security:logout />
		<security:remember-me />

		<!--<security:session-management>
			<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</security:session-management>-->
	</security:http>

	<!--
		Simple In-Memory Authentication Manager 
		Les Usernames/Passwords sont :
		admin/admin
		user/user
	-->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="md5"/>
			<security:user-service>
				<security:user name="admin" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_SUPERVISOR, ROLE_USER" />
				<security:user name="user" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<!--
		Par défaut, Spring Security utilise un DefaultMethodSecurityExpressionHandler pour interpreter les expressions
		de securisation des méthodes (@Pre/@Post). Il est possible définir ses propres expressions. Pour cela il faut créer 
		une classe qui s'inspire de DefaultMethodSecurityExpressionHandler mais en utilisant une classe customisée qui étend
		org.springframework.security.access.expression.method.MethodSecurityExpressionRoot
		Un peu trop complexe si les fonctionnalités à ajouter sont peu nombreuses.
	-->
	<!--<bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"/>-->

</beans>
